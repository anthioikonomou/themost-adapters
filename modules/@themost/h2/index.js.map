{"version":3,"sources":["index.es6"],"names":["createInstance","JDBC","jinst","async","path","util","_","SqlFormatter","QueryExpression","QueryField","TraceUtils","SqlUtils","isJvmCreated","addOption","setupClasspath","resolve","__dirname","H2Adapter","options","rawConnection","isNil","Error","getOptions","result","url","format","minpoolsize","maxpoolsize","pool","properties","user","password","host","host_","port","database","callback","self","pools","connectionPool","hasOwnProperty","reserve","err","connObj","initialize","release","log","fn","open","transaction_","call","conn","setAutoCommit","error","rollback","commit","e","batch","entity","attribute","migration","appliesTo","model","description","version","add","name","type","primary","size","migrate","execute","length","q","create","select","max","value","parseInt","id","insertId","query","values","sql","formatter","H2Formatter","settings","nameFormat","NAME_FORMAT","startTime","process","env","NODE_ENV","Date","getTime","str","prepare","createStatement","statement","executeQuery","test","executeUpdate","JSON","stringify","toObjArray","results","view","obj","waterfall","cb","table","exists","arg","nullable","count","isArray","remove","change","column","newType","oldType","columns","x","i","find","y","splice","type1","replace","push","targetTable","constraints","tableForeignKeys","foreignKeys","eachSeries","constraint","constraintCallback","foreignKeyField","primaryKeyTable","primaryKeyField","indexes","tableIndexes","index","indexCallback","fields","strFields","filter","oneToMany","map","join","strPKFields","strTable","escapeName","owner","matches","exec","drop","undefined","thisArg","executeInTransaction","tr","list","forEach","ix","indexName","columnName","cols","apply","sqlCreateIndex","nCols","indexOf","foreignKeyColumn","primaryKeyColumn","foreignKeyName","formatType","field","scale","s","zeroPad","number","res","toString","forceAlias","unquoted","escape","escapeDate","$name","valueOf","val","year","getFullYear","month","getMonth","day","getDate","hour","getHours","minute","getMinutes","second","getSeconds","datetime","offset","getTimezoneOffset","timezone","Math","floor","concat","p0","p1","Object","isNullOrUndefined"],"mappings":"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","file":"index.js","sourcesContent":["/**\n * @license\n * MOST Web Framework 2.0 Codename Blueshift\n * Copyright (c) 2014, Kyriakos Barbounakis k.barbounakis@gmail.com\n *                     Anthi Oikonomou anthioikonomou@gmail.com\n *\n * Use of this source code is governed by an BSD-3-Clause license that can be\n * found in the LICENSE file at https://themost.io/license\n */\nimport JDBC from 'jdbc';\nimport jinst from 'jdbc/lib/jinst';\nimport async from 'async';\nimport path from 'path';\nimport util from 'util';\nimport _ from 'lodash';\nimport {SqlFormatter} from '@themost/query/formatter';\nimport {QueryExpression,QueryField} from \"@themost/query/query\";\nimport {TraceUtils} from '@themost/common/utils';\nimport {SqlUtils} from '@themost/query/utils';\n\n\nif (!jinst.isJvmCreated()) {\n    jinst.addOption(\"-Xrs\");\n    jinst.setupClasspath([ path.resolve(__dirname, './drivers/h2-latest.jar')]);\n}\n\n\n/**\n * @class\n * @augments DataAdapter\n */\nexport class H2Adapter {\n    /**\n     * @constructor\n     * @param {*} options\n     */\n    constructor(options) {\n        /**\n         * @private\n         * @type {Connection}\n         */\n        this.rawConnection = null;\n\n        if (_.isNil(options)) {\n            throw new Error(\"Data adapter options may not be empty.\");\n        }\n\n        this.getOptions = function() {\n            let result;\n            //build URL\n            if (typeof options.path === 'string') {\n                result = {\n                    url : util.format(\"jdbc:h2:%s;AUTO_SERVER=true;AUTO_RECONNECT=true\", options.path),\n                    minpoolsize:1,\n                    maxpoolsize: typeof options.pool === 'number' ? options.pool : 25,\n                    properties : {\n                        \"user\" : options.user,\n                        \"password\": options.password\n                    }\n                };\n                return result;\n            }\n            else if (typeof options.host === 'string') {\n                const host_ = options.port ? options.host + \":\" + options.port : options.host;\n                result = {\n                    url : util.format(\"jdbc:h2:tcp://%s/%s;AUTO_RECONNECT=true\", host_, options.database),\n                    minpoolsize:1,\n                    maxpoolsize: typeof options.pool === 'number' ? options.pool : 25,\n                    properties : {\n                        \"user\" : options.user,\n                        \"password\": options.password\n                    }\n                };\n                return result;\n            }\n            else {\n                throw new Error(\"Database path or host may not be empty.\");\n            }\n        };\n\n    }\n\n    /**\n     * Opens database connection\n     */\n    open(callback) {\n        callback = callback || function() {};\n        const self = this;\n        if (self.rawConnection) {\n            return callback();\n        }\n        H2Adapter.pools = H2Adapter.pools || { };\n\n        //get connection options\n        const options = this.getOptions();\n\n        let connectionPool;\n        if (H2Adapter.pools.hasOwnProperty(options.url)) {\n            connectionPool=H2Adapter.pools[options.url];\n            connectionPool.reserve(function(err, connObj) {\n                if (err) { return callback(err); }\n                self.rawConnection = connObj;\n                return callback();\n            });\n        }\n        else {\n            connectionPool = new JDBC(self.getOptions());\n            H2Adapter.pools[options.url] = connectionPool;\n            connectionPool.initialize(function(err) {\n                if (err) { return callback(err); }\n                connectionPool.reserve(function(err, connObj) {\n                    if (err) { return callback(err); }\n                    self.rawConnection = connObj;\n                    return callback();\n                });\n            });\n        }\n    }\n\n    /**\n     * @param {function(Error=)} callback\n     */\n    close(callback) {\n        const self = this;\n        callback = callback || function() {};\n        if (typeof self.rawConnection === 'undefined' || self.rawConnection === null) {\n            return callback();\n        }\n        H2Adapter.pools = H2Adapter.pools || { };\n        const options = this.getOptions(), connectionPool=H2Adapter.pools[options.url];\n        if (typeof connectionPool === 'undefined' || connectionPool === null) {\n            return callback(new Error(\"Connection pool may not be empty at this context.\"));\n        }\n        connectionPool.release(self.rawConnection, function(err) {\n            if (err) {\n                TraceUtils.log(err);\n            }\n            self.rawConnection=null;\n            return callback();\n        });\n    }\n\n    /**\n     * Begins a data transaction and executes the given function\n     * @param fn {Function}\n     * @param callback {Function}\n     */\n    executeInTransaction(fn, callback) {\n        const self = this;\n        //ensure callback\n        callback = callback || function () {};\n        //ensure that database connection is open\n        self.open(function(err) {\n            if (err) {\n                return callback(err);\n            }\n            //execution is already in transaction\n            if (self.transaction_) {\n                //so invoke method\n                fn.call(self, function(err)\n                {\n                    //call callback\n                    return callback(err);\n                });\n            }\n            else {\n                //set auto commit to off\n                return self.rawConnection.conn.setAutoCommit(false, function() {\n                    if (err) { return callback(err); }\n                    //set savepoint\n                    self.transaction_ = true;\n                    try {\n                        //invoke method\n                        fn.call(self, function(error)\n                        {\n                            if (error) {\n                                self.rawConnection.conn.rollback(function(err) {\n                                    if (err) {\n                                        //log transaction rollback error\n                                        TraceUtils.log(\"An error occured while rolling back savepoint.\");\n                                        TraceUtils.log(err);\n                                    }\n                                    delete self.transaction_;\n                                    return self.rawConnection.conn.setAutoCommit(true, function() {\n                                        return callback(error);\n                                    });\n                                });\n                            }\n                            else {\n                                self.rawConnection.conn.commit(function(err) {\n                                    delete self.transaction_;\n                                    return self.rawConnection.conn.setAutoCommit(true, function() {\n                                        return callback(err);\n                                    });\n                                });\n                            }\n                        });\n                    }\n                    catch(e) {\n                        self.rawConnection.conn.rollback(function(err) {\n                            if (err) {\n                                //log transaction rollback error\n                                TraceUtils.log(\"An error occured while rolling back savepoint.\");\n                                TraceUtils.log(err);\n                            }\n                            delete self.transaction_;\n                            return self.rawConnection.conn.setAutoCommit(true, function() {\n                                return callback(e);\n                            });\n                        });\n                    }\n                });\n            }\n        });\n    }\n\n    /**\n     * Executes an operation against database and returns the results.\n     * @param batch {*}\n     * @param callback {Function}\n     */\n    executeBatch(batch, callback) {\n        callback = callback || function() {};\n        callback(new Error('DataAdapter.executeBatch() is obsolete. Use DataAdapter.executeInTransaction() instead.'));\n    }\n\n    /**\n     * Produces a new identity value for the given entity and attribute.\n     * @param {string} entity The target entity name\n     * @param {string} attribute The target attribute\n     * @param {Function=} callback\n     */\n    selectIdentity(entity, attribute, callback) {\n\n        const self = this;\n\n        const migration = {\n            appliesTo:'increment_id',\n            model:'increments',\n            description:'Increments migration (version 1.0)',\n            version:'1.0',\n            add:[\n                { name:'id', type:'Counter', primary:true },\n                { name:'entity', type:'Text', size:120 },\n                { name:'attribute', type:'Text', size:120 },\n                { name:'value', type:'Integer' }\n            ]\n        };\n        //ensure increments entity\n        self.migrate(migration, function(err)\n        {\n            //throw error if any\n            if (err) { callback.call(self,err); return; }\n\n            self.execute('SELECT * FROM \"increment_id\" WHERE \"entity\"=? AND \"attribute\"=?', [entity, attribute], function(err, result) {\n                if (err) { callback.call(self,err); return; }\n                if (result.length===0) {\n                    //get max value by querying the given entity\n                    const q = QueryExpression.create(entity).select(QueryField.create().max(attribute));\n                    self.execute(q,null, function(err, result) {\n                        if (err) { callback.call(self, err); return; }\n                        let value = 1;\n                        if (result.length>0) {\n                            value = parseInt(result[0][attribute]) + 1;\n                        }\n                        self.execute('INSERT INTO \"increment_id\"(\"entity\", \"attribute\", \"value\") VALUES (?,?,?)',[entity, attribute, value], function(err) {\n                            //throw error if any\n                            if (err) { callback.call(self, err); return; }\n                            //return new increment value\n                            callback.call(self, err, value);\n                        });\n                    });\n                }\n                else {\n                    //get new increment value\n                    const value = parseInt(result[0].value) + 1;\n                    self.execute('UPDATE \"increment_id\" SET \"value\"=? WHERE \"id\"=?',[value, result[0].id], function(err) {\n                        //throw error if any\n                        if (err) { callback.call(self, err); return; }\n                        //return new increment value\n                        callback.call(self, err, value);\n                    });\n                }\n            });\n        });\n    }\n\n    lastIdentity(callback) {\n        const self = this;\n        self.open(function(err) {\n            if (err) {\n                callback(err);\n            }\n            else {\n                self.execute('SELECT SCOPE_IDENTITY() as \"lastval\"', [], function(err, result) {\n                    if (err) {\n                        callback(null, { insertId: null });\n                    }\n                    else {\n                        result = result || [];\n                        if (result.length>0)\n                            callback(null, { insertId:parseInt(result[0][\"lastval\"]) });\n                        else\n                            callback(null, { insertId: null });\n                    }\n                });\n            }\n        });\n    }\n\n    /**\n     * @param query {*}\n     * @param values {*}\n     * @param {function} callback\n     */\n    execute(query, values, callback) {\n        const self = this;\n        let sql = null;\n        try {\n\n            if (typeof query === 'string') {\n                sql = query;\n            }\n            else {\n                //format query expression or any object that may be act as query expression\n                const formatter = new H2Formatter();\n                formatter.settings.nameFormat = H2Adapter.NAME_FORMAT;\n                sql = formatter.format(query);\n            }\n            //validate sql statement\n            if (typeof sql !== 'string') {\n                callback.call(self, new Error('The executing command is of the wrong type or empty.'));\n                return;\n            }\n            //ensure connection\n            self.open(function(err) {\n                if (err) {\n                    callback.call(self, err);\n                }\n                else {\n\n                    let startTime;\n                    if (process.env.NODE_ENV==='development') {\n                        startTime = new Date().getTime();\n                    }\n                    //execute raw command\n                    const str = SqlUtils.prepare(sql, values);\n                    self.rawConnection.conn.createStatement(function(err, statement) {\n                        if (err) { return callback(err); }\n                        let executeQuery = statement.executeQuery;\n                        if (!/^SELECT/i.test(str)) {\n                            executeQuery = statement.executeUpdate;\n                        }\n                        executeQuery.call(statement, str, function(err, result) {\n                            if (process.env.NODE_ENV==='development') {\n                                TraceUtils.log(util.format('SQL (Execution Time:%sms):%s, Parameters:%s', (new Date()).getTime()-startTime, sql, JSON.stringify(values)));\n                            }\n                            if (err) {\n                                return callback(err);\n                            }\n                            if (typeof result.toObjArray === 'function') {\n                                result.toObjArray(function(err, results) {\n                                    return callback(null, results);\n                                });\n                            }\n                            else {\n                                return callback(null, result);\n                            }\n                        });\n                    });\n                }\n            });\n        }\n        catch (e) {\n            callback.call(self, e);\n        }\n    }\n\n    /**\n     * Formats an object based on the format string provided. Valid formats are:\n     * %t : Formats a field and returns field type definition\n     * %f : Formats a field and returns field name\n     * @param format {string}\n     * @param obj {*}\n     */\n    static format(format, obj) {\n        let result = format;\n        if (/%t/.test(format))\n            result = result.replace(/%t/g,H2Adapter.formatType(obj));\n        if (/%f/.test(format))\n            result = result.replace(/%f/g,obj.name);\n        return result;\n    }\n\n    static formatType(field) {\n        const size = parseInt(field.size);\n        const scale = parseInt(field.scale);\n        let s = 'VARCHAR(512) NULL';\n        const type=field.type;\n        switch (type)\n        {\n            case 'Boolean':\n                s = 'BOOLEAN';\n                break;\n            case 'Byte':\n                s = 'TINYINT';\n                break;\n            case 'Number':\n            case 'Float':\n                s = 'REAL';\n                break;\n            case 'Counter':\n                return 'INT AUTO_INCREMENT NOT NULL';\n            case 'Currency':\n                s =  'DECIMAL(19,4)';\n                break;\n            case 'Decimal':\n                s =  util.format('DECIMAL(%s,%s)', (size>0 ? size : 19),(scale>0 ? scale : 8));\n                break;\n            case 'Date':\n                s = 'DATE';\n                break;\n            case 'DateTime':\n                s = 'TIMESTAMP';\n                break;\n            case 'Time':\n                s = 'TIME';\n                break;\n            case 'Integer':\n                s = 'INTEGER';\n                break;\n            case 'Duration':\n                s = size>0 ?  util.format('VARCHAR(%s)', size) : 'VARCHAR(36)';\n                break;\n            case 'BigInteger':\n                s = 'BIGINT';\n                break;\n            case 'URL':\n                s = size>0 ?  util.format('VARCHAR(%s)', size) : 'VARCHAR(512)';\n                break;\n            case 'Text':\n                s = size>0 ?  util.format('VARCHAR(%s)', size) : 'VARCHAR(512)';\n                break;\n            case 'Note':\n                s = size>0 ?  util.format('VARCHAR(%s)', size) : 'CLOB';\n                break;\n            case 'Image':\n            case 'Binary':\n                s = size > 0 ? util.format('BLOB(%s)', size) : 'BLOB';\n                break;\n            case 'Guid':\n                s = 'VARCHAR(36)';\n                break;\n            case 'Short':\n                s = 'SMALLINT';\n                break;\n            default:\n                s = 'INTEGER';\n                break;\n        }\n        s += (typeof field.nullable=== 'undefined') ? ' null': (field.nullable===true || field.nullable === 1) ? ' NULL': ' NOT NULL';\n        return s;\n    }\n\n    /**\n     * @param {string} name\n     * @param {QueryExpression} query\n     * @param {function(Error=)} callback\n     */\n    createView(name, query, callback) {\n        this.view(name).create(query, callback);\n    }\n\n    /**\n     *\n     * @param  {DataModelMigration|*} obj - An Object that represents the data model scheme we want to migrate\n     * @param {function(Error=,*=)} callback\n     */\n    migrate(obj, callback) {\n        if (obj===null)\n            return;\n        const self = this;\n        const migration = obj;\n        if (migration.appliesTo===null)\n            throw new Error(\"Model name is undefined\");\n        self.open(function(err) {\n            if (err) {\n                callback.call(self, err);\n            }\n            else {\n                async.waterfall([\n                    //1. Check migrations table existence\n                    function(cb) {\n                        self.table('migrations').exists(function(err, exists) {\n                            if (err) { return cb(err); }\n                            cb(null, exists);\n                        });\n                    },\n                    //2. Create migrations table if not exists\n                    function(arg, cb) {\n                        if (arg>0) { return cb(null, 0); }\n                        self.table('migrations').create([\n                            { name:'id', type:'Counter', primary:true, nullable:false  },\n                            { name:'appliesTo', type:'Text', size:'80', nullable:false  },\n                            { name:'model', type:'Text', size:'120', nullable:true  },\n                            { name:'description', type:'Text', size:'512', nullable:true  },\n                            { name:'version', type:'Text', size:'40', nullable:false  }\n                        ], function(err) {\n                            if (err) { return cb(err); }\n                            cb(null,0);\n                        });\n                    },\n                    //3. Check if migration has already been applied\n                    function(arg, cb) {\n                        self.execute('SELECT COUNT(*) AS \"count\" FROM \"migrations\" WHERE \"appliesTo\"=? and \"version\"=?',\n                            [migration.appliesTo, migration.version], function(err, result) {\n                                if (err) { return cb(err); }\n                                cb(null, result[0].count);\n                            });\n                    },\n                    //4a. Check table existence\n                    function(arg, cb) {\n                        //migration has already been applied (set migration.updated=true)\n                        if (arg>0) { obj['updated']=true; cb(null, -1); return; }\n                        self.table(migration.appliesTo).exists(function(err, exists) {\n                            if (err) { return cb(err); }\n                            cb(null, exists);\n                        });\n                    },\n                    //4b. Migrate target table (create or alter)\n                    function(arg, cb) {\n                        //migration has already been applied\n                        if (arg<0) { return cb(null, arg); }\n                        if (arg===0) {\n                            //create table\n                            return self.table(migration.appliesTo).create(migration.add, function(err) {\n                                if (err) { return cb(err); }\n                                cb(null, 1);\n                            });\n                        }\n                        //columns to be removed (unsupported)\n                        if (util.isArray(migration.remove)) {\n                            if (migration.remove.length>0) {\n                                return cb(new Error('Data migration remove operation is not supported by this adapter.'));\n                            }\n                        }\n                        //columns to be changed (unsupported)\n                        if (util.isArray(migration.change)) {\n                            if (migration.change.length>0) {\n                                return cb(new Error('Data migration change operation is not supported by this adapter. Use add collection instead.'));\n                            }\n                        }\n                        let column, newType, oldType;\n                        if (util.isArray(migration.add)) {\n                            //init change collection\n                            migration.change = [];\n                            //get table columns\n                            self.table(migration.appliesTo).columns(function(err, columns) {\n                                if (err) { return cb(err); }\n                                for (let i = 0; i < migration.add.length; i++) {\n                                    const x = migration.add[i];\n                                    column = _.find(columns, (y)=> {\n                                        return (y.name===x.name);\n                                    });\n                                    if (column) {\n                                        //if column is primary key remove it from collection\n                                        if (column.primary) {\n                                            migration.add.splice(i, 1);\n                                            i-=1;\n                                        }\n                                        else {\n                                            //get new type\n                                            newType = H2Adapter.format('%t', x);\n                                            //get old type\n                                            oldType = column.type1.replace(/\\s+$/,'') + ((column.nullable===true || column.nullable === 1) ? ' NULL' : ' NOT NULL');\n                                            //remove column from collection\n                                            migration.add.splice(i, 1);\n                                            i-=1;\n                                            if (newType !== oldType) {\n                                                //add column to alter collection\n                                                migration.change.push(x);\n                                            }\n                                        }\n                                    }\n                                }\n                                //alter table\n                                const targetTable = self.table(migration.appliesTo);\n                                //add new columns (if any)\n                                targetTable.add(migration.add, function(err) {\n                                    if (err) { return cb(err); }\n                                    //modify columns (if any)\n                                    targetTable.change(migration.change, function(err) {\n                                        if (err) { return cb(err); }\n                                        cb(null, 1);\n                                    });\n                                });\n                            });\n                        }\n                        else {\n                            cb(new Error('Invalid migration data.'));\n                        }\n                    },\n                    //Apply data model foreign keys\n                    function (arg, cb) {\n                        if (arg<=0) { return cb(null, arg); }\n                        if (migration.constraints) {\n                            const tableForeignKeys = self.foreignKeys(migration.appliesTo);\n                            //enumerate migration constraints\n                            async.eachSeries(migration.constraints, function(constraint, constraintCallback) {\n                                //if constraint is a foreign key constraint\n                                if (constraint.type === 'foreignKey') {\n                                    //create table foreign key\n                                    return tableForeignKeys.create(constraint.foreignKeyField,\n                                        constraint.primaryKeyTable,\n                                        constraint.primaryKeyField,\n                                        constraintCallback);\n                                }\n                                else {\n                                    //else do nothing\n                                    return constraintCallback();\n                                }\n                            }, function(err) {\n                                //throw error\n                                if (err) { return cb(err); }\n                                //or return success flag\n                                return cb(null, 1);\n                            });\n                        }\n                        else {\n                            //do nothing and exit\n                            return cb(null, 1);\n                        }\n                    },\n                    //Apply data model indexes\n                    function (arg, cb) {\n                        if (arg<=0) { return cb(null, arg); }\n                        if (migration.indexes) {\n                            const tableIndexes = self.indexes(migration.appliesTo);\n                            //enumerate migration constraints\n                            async.eachSeries(migration.indexes, function(index, indexCallback) {\n                                tableIndexes.create(index.name, index.columns, indexCallback);\n                            }, function(err) {\n                                //throw error\n                                if (err) { return cb(err); }\n                                //or return success flag\n                                return cb(null, 1);\n                            });\n                        }\n                        else {\n                            //do nothing and exit\n                            return cb(null, 1);\n                        }\n                    }, function(arg, cb) {\n                        if (arg>0) {\n                            //log migration to database\n                            self.execute('INSERT INTO \"migrations\" (\"appliesTo\",\"model\",\"version\",\"description\") VALUES (?,?,?,?)', [migration.appliesTo,\n                                migration.model,\n                                migration.version,\n                                migration.description ], function(err) {\n                                if (err) { return cb(err); }\n                                return cb(null, 1);\n                            });\n                        }\n                        else\n                            cb(null, arg);\n\n                    }\n                ], function(err, result) {\n                    callback(err, result);\n                });\n            }\n        });\n    }\n\n    table(name) {\n        const self = this;\n\n        return {\n            /**\n             * @param {function(Error,Boolean=)} callback\n             */\n            exists:function(callback) {\n                callback = callback || function() {};\n                self.execute('SELECT COUNT(*) AS \"count\" FROM information_schema.TABLES WHERE TABLE_NAME=? AND TABLE_SCHEMA=?',\n                    [ name, 'PUBLIC' ], function(err, result) {\n                        if (err) { return callback(err); }\n                        callback(null, result[0].count);\n                    });\n            },\n            /**\n             * @param {function(Error,string=)} callback\n             */\n            version:function(callback) {\n                callback = callback || function() {};\n                self.execute('SELECT MAX(\"version\") AS \"version\" FROM \"migrations\" WHERE \"appliesTo\"=?',\n                    [name], function(err, result) {\n                        if (err) { return callback(err); }\n                        if (result.length===0)\n                            callback(null, '0.0');\n                        else\n                            callback(null, result[0].version || '0.0');\n                    });\n            },\n            /**\n             * @param {function(Error=,Array=)} callback\n             */\n            columns:function(callback) {\n                callback = callback || function() {};\n                self.execute('SELECT COLUMN_NAME AS \"name\", TYPE_NAME as \"type\",CHARACTER_MAXIMUM_LENGTH as \"size\", ' +\n                'CASE WHEN IS_NULLABLE=\\'YES\\' THEN 1 ELSE 0 END AS \"nullable\", NUMERIC_PRECISION as \"precision\",' +\n                'NUMERIC_SCALE as \"scale\" ,(SELECT COUNT(*) FROM information_schema.INDEXES WHERE TABLE_CATALOG=\"c\".TABLE_CATALOG AND TABLE_SCHEMA=\"c\".TABLE_SCHEMA AND TABLE_NAME=\"c\".TABLE_NAME ' +\n                'AND PRIMARY_KEY=true AND COLUMN_NAME=\"c\".COLUMN_NAME) AS \"primary\" ,CONCAT(TYPE_NAME, (CASE WHEN \"NULLABLE\" = 0 THEN \\' NOT NULL\\' ELSE \\'\\' END)) ' +\n                'AS \"type1\" FROM information_schema.COLUMNS AS \"c\" WHERE TABLE_NAME=? AND TABLE_SCHEMA=?',\n                    [ name, 'PUBLIC' ], function(err, result) {\n                        if (err) { return callback(err); }\n                        callback(null, result);\n                    });\n            },\n            /**\n             * @param {{name:string,type:string,primary:boolean|number,nullable:boolean|number,size:number, scale:number,precision:number,oneToMany:boolean}[]|*} fields\n             * @param callback\n             */\n            create: function(fields, callback) {\n                callback = callback || function() {};\n                fields = fields || [];\n                if (!util.isArray(fields)) {\n                    return callback(new Error('Invalid argument type. Expected Array.'));\n                }\n                if (fields.length === 0) {\n                    return callback(new Error('Invalid argument. Fields collection cannot be empty.'));\n                }\n                let strFields = fields.filter(function(x) {\n                    return !x.oneToMany;\n                }).map(\n                    function(x) {\n                        return H2Adapter.format('\"%f\" %t', x);\n                    }).join(', ');\n                //add primary key constraint\n                const strPKFields = fields.filter(function(x) { return (x.primary === true || x.primary === 1); }).map(function(x) {\n                    return H2Adapter.format('\"%f\"', x);\n                }).join(', ');\n                if (strPKFields.length>0) {\n                    strFields += ', ' + util.format('PRIMARY KEY (%s)', strPKFields);\n                }\n                const sql = util.format('CREATE TABLE \"%s\" (%s)', name, strFields);\n                self.execute(sql, null, function(err) {\n                    callback(err);\n                });\n            },\n            /**\n             * Alters the table by adding an array of fields\n             * @param {{name:string,type:string,primary:boolean|number,nullable:boolean|number,size:number,oneToMany:boolean}[]|*} fields\n             * @param callback\n             */\n            add:function(fields, callback) {\n                callback = callback || function() {};\n                callback = callback || function() {};\n                fields = fields || [];\n                if (!util.isArray(fields)) {\n                    //invalid argument exception\n                    return callback(new Error('Invalid argument type. Expected Array.'));\n                }\n                if (fields.length === 0) {\n                    //do nothing\n                    return callback();\n                }\n                const formatter = new H2Formatter();\n                const strTable = formatter.escapeName(name);\n                //generate SQL statement\n                const sql = fields.map(function(x) {\n                    return H2Adapter.format('ALTER TABLE ' + strTable + ' ADD \"%f\" %t', x);\n                }).join(';');\n                self.execute(sql, [], function(err) {\n                    callback(err);\n                });\n            },\n            /**\n             * Alters the table by modifying an array of fields\n             * @param {{name:string,type:string,primary:boolean|number,nullable:boolean|number,size:number,oneToMany:boolean}[]|*} fields\n             * @param callback\n             */\n            change:function(fields, callback) {\n                callback = callback || function() {};\n                callback = callback || function() {};\n                fields = fields || [];\n                if (!util.isArray(fields)) {\n                    //invalid argument exception\n                    return callback(new Error('Invalid argument type. Expected Array.'));\n                }\n                if (fields.length === 0) {\n                    //do nothing\n                    return callback();\n                }\n                const formatter = new H2Formatter();\n                const strTable = formatter.escapeName(name);\n                //generate SQL statement\n                const sql = fields.map(function(x) {\n                    return H2Adapter.format('ALTER TABLE ' + strTable + ' ALTER COLUMN \"%f\" %t', x);\n                }).join(';');\n                self.execute(sql, [], function(err) {\n                    callback(err);\n                });\n            }\n        };\n    }\n\n    view(name) {\n        const self = this;\n        let owner;\n        let view;\n\n        const matches = /(\\w+)\\.(\\w+)/.exec(name);\n        if (matches) {\n            //get schema owner\n            owner = matches[1];\n            //get table name\n            view = matches[2];\n        }\n        else {\n            view = name;\n        }\n        return {\n            /**\n             * @param {function(Error,Boolean=)} callback\n             */\n            exists:function(callback) {\n                const sql = 'SELECT COUNT(*) AS \"count\" FROM information_schema.TABLES WHERE TABLE_NAME=? AND TABLE_TYPE=\\'VIEW\\' AND TABLE_SCHEMA=?';\n                self.execute(sql, [name, 'PUBLIC'], function(err, result) {\n                    if (err) { callback(err); return; }\n                    callback(null, (result[0].count>0));\n                });\n            },\n            /**\n             * @param {function(Error=)} callback\n             */\n            drop:function(callback) {\n                callback = callback || function() {};\n                self.open(function(err) {\n                    if (err) { return callback(err); }\n                    const sql = 'SELECT COUNT(*) AS \"count\" FROM information_schema.TABLES WHERE TABLE_NAME=? AND TABLE_TYPE=\\'VIEW\\' AND TABLE_SCHEMA=?';\n                    self.execute(sql, [name, 'PUBLIC'], function(err, result) {\n                        if (err) { return callback(err); }\n                        const exists = (result[0].count>0);\n                        if (exists) {\n                            const sql = util.format('DROP VIEW \"%s\"',name);\n                            self.execute(sql, undefined, function(err) {\n                                if (err) { callback(err); return; }\n                                callback();\n                            });\n                        }\n                        else {\n                            callback();\n                        }\n                    });\n                });\n            },\n            /**\n             * @param {QueryExpression|*} q\n             * @param {function(Error=)} callback\n             */\n            create:function(q, callback) {\n                const thisArg = this;\n                self.executeInTransaction(function(tr) {\n                    thisArg.drop(function(err) {\n                        if (err) { return tr(err); }\n                        try {\n                            let sql = util.format('CREATE VIEW \"%s\" AS ',name);\n                            const formatter = new H2Formatter();\n                            sql += formatter.format(q);\n                            self.execute(sql, [], tr);\n                        }\n                        catch(e) {\n                            tr(e);\n                        }\n                    });\n                }, function(err) {\n                    callback(err);\n                });\n\n            }\n        };\n    }\n\n    indexes(table) {\n      const self = this, formatter = new H2Formatter();\n        return {\n            list: function (callback) {\n                self.execute('SELECT INDEX_NAME as \"indexName\", TABLE_NAME as \"tableName\", COLUMN_NAME as \"columnName\" FROM \"INFORMATION_SCHEMA\".INDEXES ' +\n                    'WHERE TABLE_NAME=? AND TABLE_SCHEMA=? AND INDEX_TYPE_NAME=\\'INDEX\\'', [ table, 'PUBLIC'] , function (err, result) {\n                    if (err) { return callback(err); }\n                    const indexes = [];\n                    _.forEach(result,\n                        /**\n                         * @param {{indexName:string, columnName:string}} x\n                         */\n                        function(x) {\n                       const ix = indexes.find(function(y) {\n                          return y.name === x.indexName;\n                       });\n                        if (ix) {\n                            ix.columns.push(x.columnName);\n                        }\n                        else {\n                            indexes.push({\n                                name:x.indexName,\n                                columns: [ x.columnName ]\n                            });\n                        }\n                    });\n                    return callback(null, indexes);\n                });\n            },\n            /**\n             * @param {string} name\n             * @param {Array|string} columns\n             * @param {Function} callback\n             */\n            create: function(name, columns, callback) {\n                const cols = [];\n                if (typeof columns === 'string') {\n                    cols.push(columns);\n                }\n                else if (util.isArray(columns)) {\n                    cols.push.apply(cols, columns);\n                }\n                else {\n                    return callback(new Error(\"Invalid parameter. Columns parameter must be a string or an array of strings.\"));\n                }\n                const thisArg = this;\n                thisArg.list(function(err, indexes) {\n                   if (err) { return callback(err); }\n                   const ix = indexes.find(function(x) { return x.name === name; });\n                    //format create index SQL statement\n                    const sqlCreateIndex = util.format(\"CREATE INDEX %s ON %s(%s)\",\n                        formatter.escapeName(name),\n                        formatter.escapeName(table),\n                        cols.map(function(x) {\n                            return formatter.escapeName(x);\n                        }).join(\",\"));\n                    if (typeof ix === 'undefined' || ix === null) {\n                        self.execute(sqlCreateIndex, [], callback);\n                    }\n                    else {\n                        let nCols = cols.length;\n                        //enumerate existing columns\n                        ix.columns.forEach(function(x) {\n                            if (cols.indexOf(x)>=0) {\n                                //column exists in index\n                                nCols -= 1;\n                            }\n                        });\n                        if (nCols>0) {\n                            //drop index\n                            thisArg.drop(name, function(err) {\n                               if (err) { return callback(err); }\n                               //and create it\n                                self.execute(sqlCreateIndex, [], callback);\n                            });\n                        }\n                        else {\n                            //do nothing\n                            return callback();\n                        }\n                    }\n                });\n\n\n            },\n            drop: function(name, callback) {\n                if (typeof name !== 'string') {\n                    return callback(new Error(\"Name must be a valid string.\"));\n                }\n                self.execute('SELECT COUNT(*) as \"count\" FROM \"INFORMATION_SCHEMA\".INDEXES WHERE  TABLE_NAME=? AND TABLE_SCHEMA=? AND INDEX_NAME=?', [ table, 'PUBLIC', name ], function(err, result) {\n                    if (err) { return callback(err); }\n                    const exists = (result.length>0) && (result[0].count>0);\n                    if (!exists) {\n                        return callback();\n                    }\n                    self.execute(util.format(\"DROP INDEX %s\", self.escapeName(name)), [], callback);\n                });\n            }\n        };\n    }\n\n    foreignKeys(table) {\n      const self = this;\n        return {\n            /**\n             * Gets the collection of the foreign keys associated with the given table\n             * @param callback\n             */\n            list:function (callback) {\n                self.execute('SELECT FK_NAME as \"foreignKeyName\" ,PKTABLE_NAME as \"primaryKeyTable\",PKCOLUMN_NAME as \"primaryKeyColumn\", ' +\n                    'FKTABLE_NAME as \"foreignKeyTable\",FKCOLUMN_NAME as \"foreignKeyColumn\" ' +\n                    'FROM \"INFORMATION_SCHEMA\".CROSS_REFERENCES WHERE FKTABLE_NAME=? AND FKTABLE_SCHEMA=?', [ table, \"PUBLIC\" ], function(err, result) {\n                    if (err) {\n                        return callback(err);\n                    }\n                    return callback(null, result);\n                });\n            },\n            /**\n             * Creates a foreign key association between two tables\n             * @param {string} foreignKeyColumn\n             * @param {string} primaryKeyTable\n             * @param {string} primaryKeyColumn\n             * @param {Function} callback\n             */\n            create:function(foreignKeyColumn, primaryKeyTable, primaryKeyColumn, callback) {\n                self.execute('SELECT COUNT(*) as \"count\" FROM \"INFORMATION_SCHEMA\".CROSS_REFERENCES ' +\n                    'WHERE FKTABLE_NAME=? AND FKTABLE_SCHEMA=? AND FKCOLUMN_NAME=? AND PKTABLE_NAME=? AND PKCOLUMN_NAME=?',\n                    [ table, \"PUBLIC\", foreignKeyColumn, primaryKeyTable, primaryKeyColumn ], function(err, result) {\n                    if (err) {\n                        return callback(err);\n                    }\n                    //if foreign key already exists\n                    if (result[0] && result[0].count>0) {\n                        return callback();\n                    }\n                    const sql = util.format('ALTER TABLE \"%s\" ADD FOREIGN KEY (\"%s\") REFERENCES \"%s\"(\"%s\")', table, foreignKeyColumn, primaryKeyTable, primaryKeyColumn);\n                    self.execute(sql, [], function(err) {\n                        return callback(err);\n                    });\n                });\n            },\n            /**\n             * Drops a foreign key association between two tables\n             * @param {string} foreignKeyColumn\n             * @param {string} primaryKeyTable\n             * @param {string} primaryKeyColumn\n             * @param {Function} callback\n             */\n            drop:function(foreignKeyColumn, primaryKeyTable, primaryKeyColumn, callback) {\n                self.execute('SELECT FK_NAME as \"foreignKeyName\" FROM \"INFORMATION_SCHEMA\".CROSS_REFERENCES ' +\n                    'WHERE FKTABLE_NAME=? AND FKTABLE_SCHEMA=? AND FKCOLUMN_NAME=? AND PKTABLE_NAME=? AND PKCOLUMN_NAME=?',\n                    [ table, \"PUBLIC\", foreignKeyColumn, primaryKeyTable, primaryKeyColumn ], function(err, result) {\n                        if (err) {\n                            return callback(err);\n                        }\n                        if (result[0]) {\n                            const sql = util.format('ALTER TABLE \"%s\" DROP CONSTRAINT \"%s\";', table, result[0].foreignKeyName);\n                            self.execute(sql, [], function(err) {\n                                return callback(err);\n                            });\n                        }\n                        else {\n                            return callback();\n                        }\n                    });\n            }\n        };\n    }\n\n    /**\n     * Gets the database timezone\n     * @param {Function} callback\n     */\n    getDatabaseTimezone(callback) {\n    return this.execute('SELECT FORMATDATETIME(CURRENT_TIMESTAMP(),\\'XXX\\') as \"timezone\"', null, function (err, result) {\n        if (err) { return callback(err); }\n        return callback(null, result[0][\"timezone\"]);\n    });\n}\n\n}\n\nfunction zeroPad(number, length) {\n    number = number || 0;\n    let res = number.toString();\n    while (res.length < length) {\n        res = '0' + res;\n    }\n    return res;\n}\n\n/**\n * @class\n * @augments {SqlFormatter}\n */\nexport class H2Formatter extends SqlFormatter {\n    /**\n     * @constructor\n     */\n    constructor() {\n        super();\n        this.settings = {\n            nameFormat:H2Formatter.NAME_FORMAT,\n            forceAlias:true\n        };\n    }\n\n    escapeName(name) {\n        if (typeof name === 'string') {\n            if (/^(\\w+)\\.(\\w+)$/g.test(name)) {\n                return name.replace(/(\\w+)/g, H2Formatter.NAME_FORMAT);\n            }\n            return name.replace(/(\\w+)$|^(\\w+)$/g, H2Formatter.NAME_FORMAT);\n        }\n        return name;\n    }\n\n    escape(value, unquoted) {\n        if (value===null || typeof value==='undefined')\n            return SqlUtils.escape(null);\n\n        if(typeof value==='string') {\n            if (unquoted) {\n                return value.replace(/'/g, \"''\");\n            }\n            return '\\'' + value.replace(/'/g, \"''\") + '\\'';\n        }\n\n        if (typeof value==='boolean')\n            return value ? 1 : 0;\n        if (typeof value === 'object')\n        {\n            if (value instanceof Date)\n                return this.escapeDate(value);\n            if (value.hasOwnProperty('$name'))\n                return this.escapeName(value.$name);\n        }\n        if (unquoted)\n            return value.valueOf();\n        else\n            return SqlUtils.escape(value);\n    }\n\n    /**\n     * @param {Date|*} val\n     * @returns {string}\n     */\n    escapeDate(val) {\n        /*\n        Important Note\n        H2 database engine uses server timezone while inserting date values.\n        \n        Tip #1: convert date to GMT: new Date(val.valueOf() + val.getTimezoneOffset() * 60000); \n        */\n        const year   = val.getFullYear();\n        const month  = zeroPad(val.getMonth() + 1, 2);\n        const day    = zeroPad(val.getDate(), 2);\n        const hour   = zeroPad(val.getHours(), 2);\n        const minute = zeroPad(val.getMinutes(), 2);\n        const second = zeroPad(val.getSeconds(), 2);\n        const datetime = year + '-' + month + '-' + day + ' ' + hour + ':' + minute + ':' + second;\n        const offset = val.getTimezoneOffset(), timezone = (offset<=0 ? '+' : '-') + zeroPad(-Math.floor(offset/60),2) + ':' + zeroPad(offset%60,2);\n        return \"'\" + datetime.concat(timezone) + \"'\";\n    }\n\n    /**\n     * Implements length(a) expression formatter.\n     * @param {*} p0\n     * @returns {string}\n     */\n    $length(p0) {\n        return util.format('LENGTH(%s)', this.escape(p0));\n    }\n\n    $day(p0) {\n        return util.format('DAY_OF_MONTH(%s)', this.escape(p0));\n    }\n\n    $date(p0) {\n        return util.format('CAST(%s AS DATE)', this.escape(p0));\n    }\n\n    $mod(p0, p1) {\n        //validate params\n        if (Object.isNullOrUndefined(p0) || Object.isNullOrUndefined(p1))\n            return '0';\n        return util.format('MOD(%s,%s)', this.escape(p0), this.escape(p1));\n    }\n\n    $bit(p0, p1) {\n        //validate params\n        if (Object.isNullOrUndefined(p0) || Object.isNullOrUndefined(p1))\n            return '0';\n        return util.format('BITAND(%s,%s)', this.escape(p0), this.escape(p1));\n    }\n}\n\nH2Formatter.NAME_FORMAT = '\"$1\"';\n\n/**\n * Creates an instance of H2Adapter object that represents a MySql database connection.\n * @param {*} options An object that represents the properties of the underlying database connection.\n * @returns {DataAdapter}\n */\nexport function createInstance(options) {\n    return new H2Adapter(options);\n}"]}