{"version":3,"sources":["index.es6"],"names":["createInstance","oracledb","async","util","_","SqlFormatter","TraceUtils","LangUtils","SqlUtils","QueryField","OracleAdapter","options","host","rawConnection","connectString","Object","defineProperty","get","port","service","type","instance","callback","self","debug","getConnection","user","password","err","connection","release","query","values","format","fn","open","transaction","call","rollback","commit","name","view","create","obj","migration","result","test","replace","formatType","waterfall","cb","supportMigrations","table","exists","arg","eachSeries","s","cb0","execute","appliesTo","version","add","column","newType","oldType","isArray","remove","length","Error","change","columns","x","i","find","y","primary","splice","precision","scale","toUpperCase","toString","nullable","size","push","targetTable","model","description","entity","attribute","substring","selectIdentity","batch","owner","matches","exec","schema","sql","count","hasSequence","fields","strFields","map","filter","oneToMany","join","strTable","formatter","OracleFormatter","escapeName","strPKFields","drop","undefined","q","thisArg","executeInTransaction","tr","e","process","env","NODE_ENV","log","JSON","stringify","prepared","prepare","outFormat","OBJECT","autoCommit","rows","field","parseInt","concat","zeroPad","number","res","settings","nameFormat","NAME_FORMAT","forceAlias","useAliasKeyword","value","unquoted","Date","escapeDate","isDate","bind","SINGLE_QUOTE_ESCAPE","DOUBLE_QUOTE_ESCAPE","SLASH_ESCAPE","val","year","getFullYear","month","getMonth","day","getDate","hour","getHours","minute","getMinutes","second","getSeconds","offset","getTimezoneOffset","timezone","Math","floor","getMilliseconds","take","$take","skip","$skip","formatSelect","keys","$select","selectFields","order","$order","$row_index","args","Array","prototype","slice","arguments","subQuery","pop","forEach","assign","as","p0","p1","escape","pos","valueOf","isNil"],"mappings":"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","file":"index.js","sourcesContent":["/**\n * @license\n * MOST Web Framework 2.0 Codename Blueshift\n * Copyright (c) 2014, Kyriakos Barbounakis k.barbounakis@gmail.com\n *                     Anthi Oikonomou anthioikonomou@gmail.com\n *\n * Use of this source code is governed by an BSD-3-Clause license that can be\n * found in the LICENSE file at https://themost.io/license\n */\nimport oracledb from 'oracledb';\nimport async from 'async';\nimport util from 'util';\nimport _ from 'lodash';\nimport {SqlFormatter} from '@themost/query/formatter';\nimport {TraceUtils,LangUtils} from \"@themost/common/utils\";\nimport {SqlUtils} from \"@themost/query/utils\";\nimport {QueryField} from \"../../../../themost/modules/@themost/query/query\";\n\n\n/**\n * @class\n * @augments DataAdapter\n * @property {string} connectString\n */\nexport class OracleAdapter {\n    /**\n     * @constructor\n     * @param {*} options\n     */\n    constructor(options) {\n        this.options = options || { host:'localhost' };\n        /**\n         * Represents the database raw connection associated with this adapter\n         * @type {*}\n         */\n        this.rawConnection = null;\n        let connectString;\n        //of options contains connectString parameter ignore all other params and define this as the database connection string\n        if (options.connectString) { connectString = options.connectString; }\n        Object.defineProperty(this, 'connectString', {\n            get: function() {\n                if (typeof connectString === 'string') {\n                    return connectString;\n                }\n                else {\n                    //generate connectString ([//]host_name[:port][/service_name][:server_type][/instance_name])\n                    //get hostname or localhost\n                    connectString = options.host || 'localhost';\n                    //append port\n                    if (typeof options.port !== 'undefined') { connectString += ':' + options.port; }\n                    if (typeof options.service !== 'undefined') { connectString += '/' + options.service; }\n                    if (typeof options.type !== 'undefined') { connectString += ':' + options.type; }\n                    if (typeof options.instance !== 'undefined') { connectString += '/' + options.instance; }\n                    return connectString;\n                }\n            }\n        });\n    }\n\n    open(callback) {\n        const self = this;\n        callback = callback || function() {};\n        if (self.rawConnection) {\n            callback();\n        }\n        else {\n            TraceUtils.debug('Opening database connection');\n            oracledb.getConnection(\n                {\n                    user          : this.options.user,\n                    password      : this.options.password,\n                    connectString : this.connectString\n                }, function(err, connection) {\n                    if (err) { return callback(err); }\n                    TraceUtils.debug('Open database connection');\n                    self.rawConnection = connection;\n                    callback();\n                });\n        }\n    }\n\n    close(callback) {\n        const self = this;\n        callback = callback || function() {};\n        try {\n            if (self.rawConnection)\n            {\n                TraceUtils.debug('Closing database connection');\n                //close connection\n                self.rawConnection.release(function(err) {\n                    if (err) {\n                        TraceUtils.debug('An error occured while closing database connection.');\n                        TraceUtils.debug(err);\n                    }\n                    TraceUtils.debug('Close database connection');\n                    //destroy raw connection\n                    self.rawConnection=null;\n                    //and finally return\n                    return callback();\n                });\n            }\n            else {\n                return callback();\n            }\n\n        }\n        catch (err) {\n            TraceUtils.debug('An error occured while closing database connection');\n            TraceUtils.debug(err);\n            //call callback without error\n            callback();\n        }\n    }\n\n    /**\n     * @param {string} query\n     * @param {*=} values\n     */\n    prepare(query, values) {\n        return SqlUtils.format(query,values);\n    }\n\n    static formatType(field) {\n        const size = parseInt(field.size);\n        let s;\n        switch (field.type)\n        {\n            case 'Boolean':\n                s = 'NUMBER(1,0)';\n                break;\n            case 'Byte':\n                s = 'NUMBER(3,0)';\n                break;\n            case 'Number':\n                s = 'NUMBER(38)';\n                break;\n            case 'Float':\n                s = 'NUMBER(19,4)';\n                break;\n            case 'Counter':\n                return 'NUMBER(19,0)';\n            case 'Currency':\n                s =  'NUMBER(' + (field.size || 19) + ',4)';\n                break;\n            case 'Decimal':\n                s =  'NUMBER';\n                if ((field.size) && (field.scale)) {\n                    s += '(' + field.size + ',' + field.scale + ')';\n                }\n                else {\n                    s += '(19,4)';\n                }\n                break;\n            case 'Date':\n            case 'DateTime':\n                s = 'TIMESTAMP(6) WITH LOCAL TIME ZONE';\n                break;\n            case 'Time':\n                s = 'NUMBER(19,4)';\n                break;\n            case 'Long':\n            case 'Duration':\n                s = 'NUMBER(19,0)';\n                break;\n            case 'Integer':\n                s = 'NUMBER' + (field.size ? '(' + field.size + ',0)':'(19,0)' );\n                break;\n            case 'URL':\n            case 'Text':\n            case 'Note':\n                s =field.size ? util.format('NVARCHAR2(%s)', field.size) : 'NVARCHAR2(255)';\n                break;\n            case 'Image':\n            case 'Binary':\n                s ='LONG RAW';\n                break;\n            case 'Guid':\n                s = 'VARCHAR2(36)';\n                break;\n            case 'Short':\n                s = 'NUMBER(5,0)';\n                break;\n            default:\n                s = 'NUMBER(19,0)';\n                break;\n        }\n        if (field.primary) {\n            return s.concat(' NOT NULL');\n        }\n        else {\n            return s.concat((typeof field.nullable=== 'undefined' || field.nullable === null) ? ' NULL': (field.nullable ? ' NULL': ' NOT NULL'));\n        }\n    }\n\n    /**\n     * Begins a transactional operation by executing the given function\n     * @param fn {function} The function to execute\n     * @param callback {function(Error=)} The callback that contains the error -if any- and the results of the given operation\n     */\n    executeInTransaction(fn, callback) {\n        const self = this;\n        //ensure parameters\n        fn = fn || function() {}; callback = callback || function() {};\n        self.open(function(err) {\n            if (err) {\n                callback(err);\n            }\n            else {\n                if (self.transaction) {\n                    fn.call(self, function(err) {\n                        callback(err);\n                    });\n                }\n                else {\n                    //initialize dummy transaction object (for future use)\n                    self.transaction = { };\n                    //execute function\n                    fn.call(self, function(err) {\n                        if (err) {\n                            //rollback transaction\n                            self.rawConnection.rollback(function() {\n                                delete self.transaction;\n                                callback(err);\n                            });\n                        }\n                        else {\n                            //commit transaction\n                            self.rawConnection.commit(function(err) {\n                                delete self.transaction;\n                                callback(err);\n                            });\n                        }\n                    });\n                }\n            }\n        });\n    }\n\n    /**\n     *\n     * @param {string} name\n     * @param {QueryExpression|*} query\n     * @param {function(Error=)} callback\n     */\n    createView(name, query, callback) {\n        this.view(name).create(query, callback);\n    }\n\n    /*\n     * @param {DataModelMigration|*} obj An Object that represents the data model scheme we want to migrate\n     * @param {function(Error=)} callback\n     */\n    migrate(obj, callback) {\n        const self = this;\n        callback = callback || function() {};\n        if (typeof obj === 'undefined' || obj === null) { callback(); return; }\n        /**\n         * @type {DataModelMigration|*}\n         */\n        const migration = obj;\n\n        const format = function(format, obj)\n        {\n            let result = format;\n            if (/%t/.test(format))\n                result = result.replace(/%t/g,OracleAdapter.formatType(obj));\n            if (/%f/.test(format))\n                result = result.replace(/%f/g,obj.name);\n            return result;\n        };\n\n\n        async.waterfall([\n            //1. Check migrations table existence\n            function(cb) {\n                if (OracleAdapter.supportMigrations) {\n                    cb(null, true);\n                    return;\n                }\n                self.table('migrations').exists(function(err, exists) {\n                    if (err) { cb(err); return; }\n                    cb(null, exists);\n                });\n            },\n            //2. Create migrations table, if it does not exist\n            function(arg, cb) {\n                if (arg) { cb(null, 0); return; }\n                //create migrations table\n\n                async.eachSeries([\n                    'CREATE TABLE \"migrations\"(\"id\" NUMBER(10) NOT NULL, \"appliesTo\" NVARCHAR2(255) NOT NULL, \"model\" NVARCHAR2(255) NULL, ' +\n                    '\"description\" NVARCHAR2(255),\"version\" NVARCHAR2(24) NOT NULL, CONSTRAINT \"migrations_pk\" PRIMARY KEY (\"id\"))',\n                    'CREATE SEQUENCE \"migrations_id_seq\" START WITH 1 INCREMENT BY 1'\n                ], function(s, cb0) {\n                    self.execute(s, [], cb0);\n                }, function(err) {\n                    if (err) { return cb(err); }\n                    OracleAdapter.supportMigrations=true;\n                    return cb(null, 0);\n                });\n\n                //self.execute('CREATE TABLE \"migrations\"(\"id\" NUMBER(10) NOT NULL, ' +\n                //    '\"appliesTo\" NVARCHAR2(255) NOT NULL, \"model\" NVARCHAR2(255) NULL, ' +\n                //    '\"description\" NVARCHAR2(255),\"version\" NVARCHAR2(24) NOT NULL, ' +\n                //    'CONSTRAINT \"migrations_pk\" PRIMARY KEY (\"id\")); ' +\n                //    'CREATE SEQUENCE \"migrations_seq\" START WITH 1 INCREMENT BY 1; ' +\n                //    'CREATE TRIGGER \"migrations_auto_inc\" BEFORE INSERT ON \"migrations\" FOR EACH ROW BEGIN :new.\"id\" := \"migrations_seq\".nextval; END;',\n                //    [], function(err) {\n                //        if (err) { cb(err); return; }\n                //        OracleAdapter.supportMigrations=true;\n                //        cb(null, 0);\n                //    });\n            },\n            //3. Check if migration has already been applied (true=Table version is equal to migration version, false=Table version is older from migration version)\n            function(arg, cb) {\n                self.table(migration.appliesTo).version(function(err, version) {\n                    if (err) { cb(err); return; }\n                    cb(null, (version>=migration.version));\n                });\n            },\n            //4a. Check table existence (-1=Migration has already been applied, 0=Table does not exist, 1=Table exists)\n            function(arg, cb) {\n                //migration has already been applied (set migration.updated=true)\n                if (arg) {\n                    migration['updated']=true;\n                    cb(null, -1);\n                }\n                else {\n                    self.table(migration.appliesTo).exists(function(err, exists) {\n                        if (err) { cb(err); return; }\n                        cb(null, exists ? 1 : 0);\n                    });\n                }\n            },\n            //5. Migrate target table (create or alter)\n            function(arg, cb) {\n                //migration has already been applied (args[0]=-1)\n                if (arg < 0) {\n                    cb(null, arg);\n                }\n                else if (arg === 0) {\n                    self.table(migration.appliesTo).create(migration.add, function(err) {\n                        if (err) { return cb(err); }\n                        cb(null, 1);\n                    });\n                }\n                else if (arg === 1) {\n                    let column, newType, oldType;\n\n                    //1. columns to be removed\n                    if (_.isArray(migration.remove)) {\n                        if (migration.remove.length>0) {\n                            return cb(new Error('Data migration remove operation is not supported by this adapter.'));\n                        }\n                    }\n                    //1. columns to be changed\n                    if (_.isArray(migration.change)) {\n                        if (migration.change.length>0) {\n                            return cb(new Error('Data migration change operation is not supported by this adapter. Use add collection instead.'));\n                        }\n                    }\n\n                    if (_.isArray(migration.add)) {\n                        //init change collection\n                        migration.change = [];\n                        //get table columns\n                        self.table(migration.appliesTo).columns(function(err, columns) {\n                            if (err) { return cb(err); }\n                            for (let i = 0; i < migration.add.length; i++) {\n                                const x = migration.add[i];\n                                column = _.find(columns, function(y) {\n                                    return y.name === x.name;\n                                });\n                                if (column) {\n                                    //if column is primary key remove it from collection\n                                    if (column.primary) {\n                                        migration.add.splice(i, 1);\n                                        i-=1;\n                                    }\n                                    else {\n                                        newType = format('%t', x);\n                                        if (column.precision !== null && column.scale !== null) {\n                                            oldType = util.format('%s(%s,%s) %s', column.type.toUpperCase(), column.precision.toString(), column.scale.toString(), (column.nullable ? 'NULL' : 'NOT NULL'));\n                                        }\n                                        else if (/^TIMESTAMP\\(\\d+\\) WITH LOCAL TIME ZONE$/i.test(column.type)) {\n                                            oldType=util.format('%s %s', column.type.toUpperCase(), (column.nullable ? 'NULL' : 'NOT NULL'));\n                                        }\n                                        else if (column.size !== null) {\n                                            oldType = util.format('%s(%s) %s', column.type.toUpperCase(), column.size.toString(), (column.nullable ? 'NULL' : 'NOT NULL'));\n                                        }\n                                        else {\n                                            oldType = util.format('%s %s', column.type.toUpperCase(), (column.nullable ? 'NULL' : 'NOT NULL'));\n                                        }\n                                        //remove column from collection\n                                        migration.add.splice(i, 1);\n                                        i-=1;\n                                        if (newType !== oldType) {\n                                            //add column to alter collection\n                                            migration.change.push(x);\n                                        }\n                                    }\n                                }\n                            }\n                            //alter table\n                            const targetTable = self.table(migration.appliesTo);\n                            //add new columns (if any)\n                            targetTable.add(migration.add, function(err) {\n                                if (err) { return cb(err); }\n                                //modify columns (if any)\n                                targetTable.change(migration.change, function(err) {\n                                    if (err) { return cb(err); }\n                                    cb(null, 1);\n                                });\n                            });\n                        });\n                    }\n                    else {\n                        cb(new Error('Invalid migration data.'));\n                    }\n                }\n                else {\n                    cb(new Error('Invalid table status.'));\n                }\n            },\n            function(arg, cb) {\n                if (arg>0) {\n                    //log migration to database\n                    self.execute('INSERT INTO \"migrations\"(\"id\",\"appliesTo\", \"model\", \"version\", \"description\") VALUES (\"migrations_id_seq\".nextval,?,?,?,?)', [migration.appliesTo,\n                        migration.model,\n                        migration.version,\n                        migration.description ], function(err) {\n                        if (err)  {\n                            return cb(err);\n                        }\n                        cb(null, 1);\n                    });\n                }\n                else {\n                    migration['updated'] = true;\n                    cb(null, arg);\n                }\n            }\n        ], function(err) {\n            callback(err);\n        });\n\n    }\n\n    /**\n     * Produces a new identity value for the given entity and attribute.\n     * @param entity {String} The target entity name\n     * @param attribute {String} The target attribute\n     * @param callback {Function=}\n     */\n    selectIdentity(entity, attribute, callback) {\n\n        const self = this;\n        //format sequence name ([entity]_[attribute]_seg e.g. user_id_seq)\n        let name = entity + \"_\" + attribute + \"_seq\";\n        if (name.length>30)\n        {\n            name=entity.substring(0,26) + \"_seq\";\n        }\n        //search for sequence\n        self.execute('SELECT SEQUENCE_OWNER,SEQUENCE_NAME FROM ALL_SEQUENCES WHERE \"SEQUENCE_NAME\" = ?', [name], function(err, result) {\n            if (err) { return callback(err); }\n            if (result.length===0) {\n                self.execute(util.format('CREATE SEQUENCE \"%s\" START WITH 1 INCREMENT BY 1', name), [], function(err) {\n                    if (err) { return callback(err); }\n                    //get next value\n                    self.execute(util.format('SELECT \"%s\".nextval AS \"resultId\" FROM DUAL', name), [], function(err, result) {\n                        if (err) { return callback(err); }\n                        callback(null, result[0]['resultId']);\n                    });\n                });\n            }\n            else {\n                //get next value\n                self.execute(util.format('SELECT \"%s\".nextval AS \"resultId\" FROM DUAL', name), [], function(err, result) {\n                    if (err) { return callback(err); }\n                    callback(null, result[0]['resultId']);\n                });\n            }\n        });\n    }\n\n    /**\n     * Produces a new counter auto increment value for the given entity and attribute.\n     * @param entity {String} The target entity name\n     * @param attribute {String} The target attribute\n     * @param callback {Function=}\n     */\n    nextIdentity(entity, attribute, callback) {\n        this.selectIdentity(entity, attribute , callback);\n    }\n\n    /**\n     * Executes an operation against database and returns the results.\n     * @param {*} batch\n     * @param {function(Error=)} callback\n     */\n    executeBatch(batch, callback) {\n        callback = callback || function() {};\n        callback(new Error('DataAdapter.executeBatch() is obsolete. Use DataAdapter.executeInTransaction() instead.'));\n    }\n\n    table(name) {\n        const self = this;\n        let owner;\n        let table;\n        const matches = /(\\w+)\\.(\\w+)/.exec(name);\n        if (matches) {\n            //get schema owner (the first part of the string provided)\n            owner = matches[1];\n            //get table name (the second part of the string provided)\n            table = matches[2];\n        }\n        else {\n            //get table name (the whole string provided)\n            table = name;\n            //get schema name (from options)\n            if (self.options && self.options.schema) {\n                owner = self.options.schema;\n            }\n        }\n\n        const format = function(format, obj)\n        {\n            let result = format;\n            if (/%t/.test(format))\n                result = result.replace(/%t/g,OracleAdapter.formatType(obj));\n            if (/%f/.test(format))\n                result = result.replace(/%f/g,obj.name);\n            return result;\n        };\n\n        return {\n            /**\n             * @param {function(Error,Boolean=)} callback\n             */\n            exists:function(callback) {\n                let sql;\n                if (typeof owner === 'undefined' || owner === null) {\n                    sql = 'SELECT COUNT(*) AS \"count\" FROM ALL_OBJECTS WHERE object_type IN (\\'TABLE\\') AND object_name = ?';\n                }\n                else {\n                    sql = 'SELECT COUNT(*) AS \"count\" FROM ALL_OBJECTS WHERE object_type IN (\\'TABLE\\') AND object_name = ? AND REGEXP_LIKE(owner,?,\\'i\\')';\n                }\n                self.execute(sql, [table, '^' + owner + '$'], function(err, result) {\n                    if (err) { callback(err); return; }\n                    callback(null, (result[0].count>0));\n                });\n            },\n            /**\n             * @param {function(Error,string=)} callback\n             */\n            version:function(callback) {\n                self.execute('SELECT MAX(\"version\") AS \"version\" FROM \"migrations\" WHERE \"appliesTo\"=?',\n                    [name], function(err, result) {\n                        if (err) { return callback(err); }\n                        if (result.length===0)\n                            callback(null, '0.0');\n                        else\n                            callback(null, result[0].version || '0.0');\n                    });\n            },\n            /**\n             * @param {function(Error,Boolean=)} callback\n             */\n            hasSequence:function(callback) {\n                callback = callback || function() {};\n                self.execute('SELECT COUNT(*) AS \"count\" FROM ALL_SEQUENCES WHERE SEQUENCE_NAME=?',\n                    [ table + '_seq' ], function(err, result) {\n                        if (err) { callback(err); return; }\n                        callback(null, (result[0].count>0));\n                    });\n            },\n            /**\n             * @param {function(Error=,Array=)} callback\n             */\n            columns:function(callback) {\n                callback = callback || function() {};\n\n                /*\n                 SELECT c0.COLUMN_NAME AS \"name\", c0.DATA_TYPE AS \"type\", ROWNUM AS \"ordinal\",\n                 c0.DATA_LENGTH AS \"size\", c0.DATA_SCALE AS \"scale\", CASE WHEN c0.NULLABLE='Y'\n                 THEN 1 ELSE 0 END AS \"nullable\", CASE WHEN t0.CONSTRAINT_TYPE='P' THEN 1 ELSE 0 END AS \"primaryKey\"\n                 FROM ALL_TAB_COLUMNS c0 LEFT JOIN (SELECT cols.table_name, cols.column_name, cols.owner, cons.constraint_type\n                 FROM all_constraints cons, all_cons_columns cols WHERE cons.constraint_type = 'P'\n                 AND cons.constraint_name = cols.constraint_name AND cons.owner = cols.owner) t0 ON c0.TABLE_NAME=t0.TABLE_NAME\n                 AND c0.OWNER=t0.OWNER AND c0.COLUMN_NAME=t0.COLUMN_NAME WHERE c0.TABLE_NAME = ?\n                */\n\n                let sql = 'SELECT c0.COLUMN_NAME AS \"name\", c0.DATA_TYPE AS \"type\", ROWNUM AS \"ordinal\", CASE WHEN c0.\"CHAR_LENGTH\">0 THEN c0.\"CHAR_LENGTH\" ELSE c0.DATA_LENGTH END as \"size\", ' +\n                    'c0.DATA_SCALE AS \"scale\", c0.DATA_PRECISION AS \"precision\", CASE WHEN c0.NULLABLE=\\'Y\\' THEN 1 ELSE 0 END AS \"nullable\", CASE WHEN t0.CONSTRAINT_TYPE=\\'P\\' ' +\n                'THEN 1 ELSE 0 END AS \"primary\" FROM ALL_TAB_COLUMNS c0 LEFT JOIN (SELECT cols.table_name, cols.column_name, cols.owner, ' +\n                'cons.constraint_type FROM all_constraints cons, all_cons_columns cols WHERE cons.constraint_type = \\'P\\' ' +\n                'AND cons.constraint_name = cols.constraint_name AND cons.owner = cols.owner) t0 ON c0.TABLE_NAME=t0.TABLE_NAME ' +\n                'AND c0.OWNER=t0.OWNER AND c0.COLUMN_NAME=t0.COLUMN_NAME WHERE c0.TABLE_NAME = ?';\n                if (owner) { \n                    sql += ' AND REGEXP_LIKE(c0.OWNER,?,\\'i\\')'\n                }\n                self.execute(sql, [name, '^' + owner + '$'], function(err, result) {\n                        if (err) { callback(err); return; }\n                        callback(null, result);\n                    });\n            },\n            /**\n             * @param {{name:string,type:string,primary:boolean|number,nullable:boolean|number,size:number, scale:number,precision:number,oneToMany:boolean}[]|*} fields\n             * @param callback\n             */\n            create: function(fields, callback) {\n                callback = callback || function() {};\n                fields = fields || [];\n                if (!_.isArray(fields)) {\n                    return callback(new Error('Invalid argument type. Expected Array.'));\n                }\n                if (fields.length === 0) {\n                    return callback(new Error('Invalid argument. Fields collection cannot be empty.'));\n                }\n                let strFields = _.map(\n                    _.filter(fields, (x) => {\n                        return !x.oneToMany;\n                    }),\n                    (x) => {\n                        return format('\"%f\" %t', x);\n                    }).join(', ');\n\n                //get table qualified name\n                let strTable = '';\n\n                const formatter = new OracleFormatter();\n                if (typeof owner !== 'undefined') { strTable = formatter.escapeName(owner) + \".\"; }\n                strTable += formatter.escapeName(table);\n                //add primary key constraint\n                const strPKFields = _.map(_.filter(fields, (x) => {\n                        return (x.primary === true || x.primary === 1);\n                    }), (x) => {\n                        return formatter.escapeName(x.name);\n                }).join(', ');\n                if (strPKFields.length>0) {\n                    strFields += ', ' + util.format('CONSTRAINT \"%s_pk\" PRIMARY KEY (%s)', table, strPKFields);\n                }\n                const sql = util.format('CREATE TABLE %s (%s)', strTable, strFields);\n                self.execute(sql, null, function(err) {\n                    callback(err);\n                });\n            },\n            /**\n             * Alters the table by adding an array of fields\n             * @param {{name:string,type:string,primary:boolean|number,nullable:boolean|number,size:number,oneToMany:boolean}[]|*} fields\n             * @param callback\n             */\n            add:function(fields, callback) {\n                callback = callback || function() {};\n                fields = fields || [];\n                if (!_.isArray(fields)) {\n                    //invalid argument exception\n                    return callback(new Error('Invalid argument type. Expected Array.'));\n                }\n                if (fields.length === 0) {\n                    //do nothing\n                    return callback();\n                }\n                const strFields = fields.map(function(x) {\n                    return format('\"%f\" %t', x);\n                }).join(', ');\n\n                //get table qualified name\n                let strTable = '';\n\n                const formatter = new OracleFormatter();\n                if (typeof owner !== 'undefined') { strTable = formatter.escapeName(owner) + \".\"; }\n                strTable += formatter.escapeName(table);\n                //generate SQL statement\n                const sql = util.format('ALTER TABLE %s ADD (%s)', strTable, strFields);\n                self.execute(sql, [], function(err) {\n                    callback(err);\n                });\n            },\n            /**\n             * Alters the table by modifying an array of fields\n             * @param {{name:string,type:string,primary:boolean|number,nullable:boolean|number,size:number,oneToMany:boolean}[]|*} fields\n             * @param callback\n             */\n            change:function(fields, callback) {\n                callback = callback || function() {};\n                fields = fields || [];\n                if (!_.isArray(fields)) {\n                    //invalid argument exception\n                    return callback(new Error('Invalid argument type. Expected Array.'));\n                }\n                if (fields.length === 0) {\n                    //do nothing\n                    return callback();\n                }\n                const strFields = fields.map(function(x) {\n                    return format('\"%f\" %t', x);\n                }).join(', ');\n\n                //get table qualified name\n                let strTable = '';\n\n                const formatter = new OracleFormatter();\n                if (typeof owner !== 'undefined') { strTable = formatter.escapeName(owner) + \".\"; }\n                strTable += formatter.escapeName(table);\n                //generate SQL statement\n                const sql = util.format('ALTER TABLE %s MODIFY (%s)', strTable, strFields);\n                self.execute(sql, [], function(err) {\n                    callback(err);\n                });\n            }\n        };\n    }\n\n    view(name) {\n        const self = this;\n        let owner;\n        let view;\n\n        const matches = /(\\w+)\\.(\\w+)/.exec(name);\n        if (matches) {\n            //get schema owner\n            owner = matches[1];\n            //get table name\n            view = matches[2];\n        }\n        else {\n            view = name;\n        }\n        return {\n            /**\n             * @param {function(Error,Boolean=)} callback\n             */\n            exists:function(callback) {\n                let sql = 'SELECT COUNT(*) AS \"count\" FROM ALL_OBJECTS WHERE object_type IN (\\'VIEW\\') AND object_name = ?';\n                if (typeof owner !== 'undefined') {\n                    sql += ' AND REGEXP_LIKE(owner,?,\\'i\\')';\n                }\n                self.execute(sql, [name, '^' + (owner || '') + '$'], function(err, result) {\n                    if (err) { callback(err); return; }\n                    callback(null, (result[0].count>0));\n                });\n            },\n            /**\n             * @param {function(Error=)} callback\n             */\n            drop:function(callback) {\n                callback = callback || function() {};\n                self.open(function(err) {\n                   if (err) { return callback(err); }\n\n                    let sql = 'SELECT COUNT(*) AS \"count\" FROM ALL_OBJECTS WHERE object_type IN (\\'VIEW\\') AND object_name = ?';\n                    if (typeof owner !== 'undefined') {\n                        sql += ' AND REGEXP_LIKE(owner,?,\\'i\\')';\n                    }\n                    self.execute(sql, [name, '^' + (owner || '') + '$'], function(err, result) {\n                        if (err) { return callback(err); }\n                        const exists = (result[0].count>0);\n                        if (exists) {\n                            const sql = util.format('DROP VIEW \"%s\"',name);\n                            self.execute(sql, undefined, function(err) {\n                                if (err) { callback(err); return; }\n                                callback();\n                            });\n                        }\n                        else {\n                            callback();\n                        }\n                    });\n                });\n            },\n            /**\n             * @param {QueryExpression|*} q\n             * @param {function(Error=)} callback\n             */\n            create:function(q, callback) {\n                const thisArg = this;\n                self.executeInTransaction(function(tr) {\n                    thisArg.drop(function(err) {\n                        if (err) { tr(err); return; }\n                        try {\n                            let sql = util.format('CREATE VIEW \"%s\" AS ',name);\n                            const formatter = new OracleFormatter();\n                            sql += formatter.format(q);\n                            self.execute(sql, [], tr);\n                        }\n                        catch(e) {\n                            tr(e);\n                        }\n                    });\n                }, function(err) {\n                    callback(err);\n                });\n\n            }\n        };\n    }\n\n    /**\n     * Executes a query against the underlying database\n     * @param query {QueryExpression|string|*}\n     * @param values {*=}\n     * @param {function(Error=,*=)} callback\n     */\n    execute(query, values, callback) {\n        const self = this;\n        let sql = null;\n        try {\n\n            if (typeof query === 'string') {\n                //get raw sql statement\n                sql = query;\n            }\n            else {\n                //format query expression or any object that may be act as query expression\n                const formatter = new OracleFormatter();\n                sql = formatter.format(query);\n            }\n            //validate sql statement\n            if (typeof sql !== 'string') {\n                callback.call(self, new Error('The executing command is of the wrong type or empty.'));\n                return;\n            }\n            //ensure connection\n            self.open(function(err) {\n                if (err) {\n                    callback.call(self, err);\n                }\n                else {\n                    //log statement (optional)\n                    if (process.env.NODE_ENV==='development')\n                        TraceUtils.log(util.format('SQL:%s, Parameters:%s', sql, JSON.stringify(values)));\n                    //prepare statement - the traditional way\n                    const prepared = self.prepare(sql, values);\n                    //execute raw command\n                    self.rawConnection.execute(prepared,[], {outFormat: oracledb.OBJECT, autoCommit: (typeof self.transaction === 'undefined') }, function(err, result) {\n                        if (err) {\n                            //log sql\n                            TraceUtils.log(util.format('SQL Error:%s', prepared));\n                            callback(err);\n                        }\n                        else {\n                            if (result)\n                                callback(null, result.rows);\n                            else\n                                callback();\n                        }\n                    });\n                }\n            });\n        }\n        catch (e) {\n            callback.call(self, e);\n        }\n    }\n}\n\nfunction zeroPad(number, length) {\n    number = number || 0;\n    let res = number.toString();\n    while (res.length < length) {\n        res = '0' + res;\n    }\n    return res;\n}\n\n/**\n * @class\n * @augments {SqlFormatter}\n */\nexport class OracleFormatter extends SqlFormatter {\n    /**\n     * @constructor\n     */\n    constructor() {\n        super();\n        this.settings = {\n            nameFormat:OracleFormatter.NAME_FORMAT,\n            forceAlias:true,\n            useAliasKeyword: false\n        };\n    }\n\n    escapeName(name) {\n        if (typeof name === 'string')\n            return name.replace(/(\\w+)/ig, this.settings.nameFormat);\n        return name;\n    }\n\n    /**\n     * Escapes an object or a value and returns the equivalent sql value.\n     * @param {*} value - A value that is going to be escaped for SQL statements\n     * @param {boolean=} unquoted - An optional value that indicates whether the resulted string will be quoted or not.\n     * returns {string} - The equivalent SQL string value\n     */\n    escape(value, unquoted) {\n        if (typeof value === 'boolean') { return value ? '1' : '0'; }\n        if (value instanceof Date) {\n            return util.format('TO_TIMESTAMP_TZ(%s, \\'YYYY-MM-DD HH24:MI:SS.FF3TZH:TZM\\')', this.escapeDate(value));\n        }\n        if (typeof value === 'string' && LangUtils.isDate(value)) {\n            return util.format('TO_TIMESTAMP_TZ(%s, \\'YYYY-MM-DD HH24:MI:SS.FF3TZH:TZM\\')', this.escapeDate(new Date(value)));\n        }\n        let res = super.escape.bind(this)(value, unquoted);\n        if (typeof value === 'string') {\n            if (/\\\\'/g.test(res)) {\n                //escape single quote (that is already escaped)\n                res = res.replace(/\\\\'/g, SINGLE_QUOTE_ESCAPE);\n                if (/\\\\\"/g.test(res))\n                //escape double quote (that is already escaped)\n                    res = res.replace(/\\\\\"/g, DOUBLE_QUOTE_ESCAPE);\n                if (/\\\\\\\\/g.test(res))\n                //escape slash (that is already escaped)\n                    res = res.replace(/\\\\\\\\/g, SLASH_ESCAPE);\n            }\n        }\n        return res;\n    }\n\n    /**\n     * @param {Date|*} val\n     * @returns {string}\n     */\n    escapeDate(val) {\n        const year   = val.getFullYear();\n        const month  = zeroPad(val.getMonth() + 1, 2);\n        const day    = zeroPad(val.getDate(), 2);\n        const hour   = zeroPad(val.getHours(), 2);\n        const minute = zeroPad(val.getMinutes(), 2);\n        const second = zeroPad(val.getSeconds(), 2);\n        //var millisecond = zeroPad(dt.getMilliseconds(), 3);\n        //format timezone\n        const offset = (new Date()).getTimezoneOffset(), timezone = (offset<=0 ? '+' : '-') + zeroPad(-Math.floor(offset/60),2) + ':' + zeroPad(offset%60,2);\n        return \"'\" + year + '-' + month + '-' + day + ' ' + hour + ':' + minute + ':' + second + \".\" + zeroPad(val.getMilliseconds(), 3) + timezone + \"'\";\n    }\n\n\n    /**\n     * Formats a fixed query expression where select fields are constants e.g. SELECT 1 AS `id`,'John' AS `givenName` etc\n     * @param obj {QueryExpression|*}\n     * @returns {string}\n     */\n    formatFixedSelect(obj) {\n        var self = this;\n        var fields = obj.fields();\n        return 'SELECT ' + _.map(fields, function(x) { return self.format(x,'%f'); }).join(', ') + ' FROM DUAL';\n    };\n\n    /**\n     *\n     * @param {QueryExpression} obj\n     * @returns {string}\n     */\n    formatLimitSelect(obj) {\n\n        let sql;\n        const self=this;\n        let take = parseInt(obj.$take) || 0;\n        let skip = parseInt(obj.$skip) || 0;\n        if (take<=0) {\n            sql=self.formatSelect(obj);\n        }\n        else {\n            //add row_number with order\n            const keys = Object.keys(obj.$select);\n            if (keys.length === 0)\n                throw new Error('Entity is missing');\n            let selectFields = obj.$select[keys[0]];\n            let order = obj.$order;\n            self.$row_index = function() {\n                let args = Array.prototype.slice.call(arguments);\n                return util.format('ROW_NUMBER() OVER(%s)', (args && args.length) ? this.format(args, '%o') : 'ORDER BY NULL');\n            };\n            selectFields.push({\n                \"__RowIndex\": {\n                  $row_index: order\n                }\n            });\n            if (order) {\n                delete obj.$order;\n            }\n            const subQuery = self.formatSelect(obj);\n            if (order) {\n                obj.$order = order;\n            }\n            //delete row index field\n            selectFields.pop();\n            const fields = [];\n            _.forEach(selectFields, (x) => {\n                if (typeof x === 'string') {\n                    fields.push(new QueryField(x));\n                }\n                else {\n                    let field = _.assign(new QueryField(), x);\n                    fields.push(field.as() || field.name());\n                }\n            });\n            sql = util.format('SELECT %s FROM (%s) t0 WHERE \"__RowIndex\" BETWEEN %s AND %s', _.map(fields, (x) => {\n                return self.format(x, '%f');\n            }).join(', '), subQuery, skip + 1, skip + take);\n        }\n        return sql;\n\n    }\n    /**\n     * Implements [a & b] bitwise and expression formatter.\n     * @param p0 {*}\n     * @param p1 {*}\n     */\n    $bit(p0, p1)\n    {\n        return util.format('BITAND(%s, %s)', this.escape(p0), this.escape(p1));\n    }\n\n    /**\n     * Implements indexOf(str,substr) expression formatter.\n     * @param {string} p0 The source string\n     * @param {string} p1 The string to search for\n     * @returns {string}\n     */\n    $indexof(p0, p1) {\n        return util.format('(INSTR(%s,%s)-1)', this.escape(p0), this.escape(p1));\n    }\n\n    /**\n     * Implements contains(a,b) expression formatter.\n     * @param {string} p0 The source string\n     * @param {string} p1 The string to search for\n     * @returns {string}\n     */\n    $text(p0, p1) {\n        return util.format('(INSTR(%s,%s)-1)>=0', this.escape(p0), this.escape(p1));\n    }\n\n    /**\n     * Implements concat(a,b) expression formatter.\n     * @param {*} p0\n     * @param {*} p1\n     * @returns {string}\n     */\n    $concat(p0, p1) {\n        return util.format('CONCAT(%s,%s)', this.escape(p0),  this.escape(p1));\n    }\n\n    /**\n     * Implements substring(str,pos) expression formatter.\n     * @param {String} p0 The source string\n     * @param {Number} pos The starting position\n     * @param {Number=} length The length of the resulted string\n     * @returns {string}\n     */\n    $substring(p0, pos, length) {\n        if (length)\n            return util.format('SUBSTR(%s,%s,%s)', this.escape(p0), pos.valueOf()+1, length.valueOf());\n        else\n            return util.format('SUBSTR(%s,%s)', this.escape(p0), pos.valueOf()+1);\n    }\n\n    /**\n     * Implements length(a) expression formatter.\n     * @param {*} p0\n     * @returns {string}\n     */\n    $length(p0) {\n        return util.format('LENGTH(%s)', this.escape(p0));\n    }\n\n    $ceiling(p0) {\n        return util.format('CEIL(%s)', this.escape(p0));\n    }\n\n    $startswith(p0, p1) {\n        //validate params\n        if ( _.isNil(p0) ||  _.isNil(p1))\n            return '';\n        return 'REGEXP_LIKE(' + this.escape(p0) + ',\\'^' + this.escape(p1, true) + '\\')';\n    }\n\n    $contains(p0, p1) {\n        //validate params\n        if ( _.isNil(p0) ||  _.isNil(p1))\n            return '';\n        return 'REGEXP_LIKE(' + this.escape(p0) + ',\\'' + this.escape(p1, true) + '\\')';\n    }\n\n    $endswith(p0, p1) {\n        //validate params\n        if ( _.isNil(p0) ||  _.isNil(p1))\n            return '';\n        return 'REGEXP_LIKE(' + this.escape(p0) + ',\\'' + this.escape(p1, true) + '$\\')';\n    }\n\n    $day(p0) {\n        return util.format('EXTRACT(DAY FROM %s)', this.escape(p0)) ;\n    }\n\n    $month(p0) {\n        return util.format('EXTRACT(MONTH FROM %s)', this.escape(p0)) ;\n    }\n\n    $year(p0) {\n        return util.format('EXTRACT(YEAR FROM %s)', this.escape(p0)) ;\n    }\n\n    $hour(p0) {\n        return util.format('EXTRACT(HOUR FROM %s)', this.escape(p0)) ;\n    }\n\n    $minute(p0) {\n        return util.format('EXTRACT(MINUTE FROM %s)', this.escape(p0)) ;\n    }\n\n    $second(p0) {\n        return util.format('EXTRACT(SECOND FROM %s)', this.escape(p0)) ;\n    }\n\n    $date(p0) {\n        //alternative date solution: 'TO_TIMESTAMP_TZ(TO_CHAR(%s, 'YYYY-MM-DD'),'YYYY-MM-DD')'\n        return util.format('TRUNC(%s)', this.escape(p0)) ;\n    }\n\n    /**\n     * Implements contains(a,b) expression formatter.\n     * @param {*} p0 The source string\n     * @param {string|*} p1 The string to search for\n     * @returns {string}\n     */\n    $regex(p0, p1) {\n        //validate params\n        if ( _.isNil(p0) ||  _.isNil(p1))\n            return '';\n        return 'REGEXP_LIKE(' + this.escape(p0) + ',\\'' + this.escape(p1, true) + '\\')';\n    }\n}\n\nOracleFormatter.NAME_FORMAT = '\"$1\"';\n\nconst SINGLE_QUOTE_ESCAPE = '\\'\\'';\nconst DOUBLE_QUOTE_ESCAPE = '\"';\nconst SLASH_ESCAPE = '\\\\';\n\n/**\n * Creates an instance of OracleAdapter object that represents an Oracle database connection.\n * @param {*} options An object that represents the properties of the underlying database connection.\n * @returns {DataAdapter|*}\n */\nexport function createInstance(options) {\n    return new OracleAdapter(options);\n}\n"]}