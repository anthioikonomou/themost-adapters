{"version":3,"sources":["index.es6"],"names":["createInstance","mysql","async","util","_","SqlFormatter","QueryExpression","QueryField","TraceUtils","MySqlAdapter","options","rawConnection","connectionPooling","callback","self","offset","Date","getTimezoneOffset","timezone","zeroPad","Math","floor","pool","createPool","getConnection","err","connection","execute","createConnection","connect","release","end","log","fn","open","bind","__transaction","error","batch","Error","entity","attribute","migration","appliesTo","model","description","version","add","name","type","primary","size","migrate","result","length","q","create","select","max","value","parseInt","id","query","values","sql","formatter","MySqlFormatter","settings","nameFormat","NAME_FORMAT","format","startTime","process","env","NODE_ENV","getTime","JSON","stringify","view","obj","waterfall","cb","table","exists","arg","nullable","count","updated","isArray","remove","change","column","newType","oldType","columns","x","i","find","y","splice","type1","replace","push","targetTable","indexes","tableIndexes","eachSeries","index","indexCallback","fields","strFields","map","filter","oneToMany","join","strPKFields","strTable","escapeName","owner","matches","exec","drop","undefined","thisArg","executeInTransaction","tr","e","list","this1","hasOwnProperty","forEach","cols","apply","ix","sqlCreateIndex","nCols","indexOf","txt","key","escape","test","formatType","field","scale","s","number","res","toString","forceAlias","unquoted","escapeDate","val","year","getFullYear","month","getMonth","day","getDate","hour","getHours","minute","getMinutes","second","getSeconds","datetime"],"mappings":";;;;;;;;;qjBAAA;;;;;;;;;;;QAy7BgBA,c,GAAAA,c;;AAh7BhB;;IAAOC,K;;AACP;;IAAOC,K;;AACP;;IAAOC,I;;AACP;;IAAOC,C;;AACP;;IAAQC,Y,cAAAA,Y;;AACR;;IAAQC,e,UAAAA,e;IAAgBC,U,UAAAA,U;;AACxB;;IAAQC,U,UAAAA,U;;;;;;;;;;AAER;;;;;IAKaC,Y;AACT,0BAAYC,OAAZ,EAAqB;AAAA;;AACjB;;;;AAIA,aAAKC,aAAL,GAAqB,IAArB;AACA;;;;AAIA,aAAKD,OAAL,GAAeA,OAAf;AACA;;;;AAIA,aAAKE,iBAAL,GAAyB,KAAzB;AAEH;;AAED;;;;;;;6BAGKC,Q,EAAU;AACXA,uBAAWA,YAAY,YAAW,CAAE,CAApC;AACA,gBAAMC,OAAO,IAAb;AACA,gBAAI,KAAKH,aAAT,EAAwB;AACpB,uBAAOE,UAAP;AACH;AACD;AACA,gBAAME,SAAU,IAAIC,IAAJ,EAAD,CAAaC,iBAAb,EAAf;AAAA,gBAAiDC,WAAW,CAACH,UAAQ,CAAR,GAAY,GAAZ,GAAkB,GAAnB,IAA0BI,QAAQ,CAACC,KAAKC,KAAL,CAAWN,SAAO,EAAlB,CAAT,EAA+B,CAA/B,CAA1B,GAA8D,GAA9D,GAAoEI,QAAQJ,SAAO,EAAf,EAAkB,CAAlB,CAAhI;AACA,gBAAID,KAAKF,iBAAT,EAA4B;AACxB,oBAAI,OAAOH,aAAaa,IAApB,KAA6B,WAAjC,EAA8C;AAC1Cb,iCAAaa,IAAb,GAAoBrB,MAAMsB,UAAN,CAAiB,KAAKb,OAAtB,CAApB;AACH;AACDD,6BAAaa,IAAb,CAAkBE,aAAlB,CAAgC,UAASC,GAAT,EAAcC,UAAd,EAA0B;AACtD,wBAAID,GAAJ,EAAS;AACL,+BAAOZ,SAASY,GAAT,CAAP;AACH,qBAFD,MAGK;AACDX,6BAAKH,aAAL,GAAqBe,UAArB;AACAZ,6BAAKa,OAAL,CAAa,iBAAb,EAAgCT,QAAhC,EAA0C,UAASO,GAAT,EAAc;AACpD,mCAAOZ,SAASY,GAAT,CAAP;AACH,yBAFD;AAGH;AACJ,iBAVD;AAWH,aAfD,MAgBK;AACDX,qBAAKH,aAAL,GAAqBV,MAAM2B,gBAAN,CAAuB,KAAKlB,OAA5B,CAArB;AACAI,qBAAKH,aAAL,CAAmBkB,OAAnB,CAA2B,UAASJ,GAAT,EAAc;AACrC,wBAAIA,GAAJ,EAAS;AACL,+BAAOZ,SAASY,GAAT,CAAP;AACH,qBAFD,MAGK;AACD;AACAX,6BAAKa,OAAL,CAAa,iBAAb,EAAgCT,QAAhC,EAA0C,UAASO,GAAT,EAAc;AACpD,mCAAOZ,SAASY,GAAT,CAAP;AACH,yBAFD;AAGH;AACJ,iBAVD;AAWH;AACJ;;AAED;;;;;;8BAGMZ,Q,EAAU;AACZ,gBAAMC,OAAO,IAAb;AACAD,uBAAWA,YAAY,YAAW,CAAE,CAApC;AACA,gBAAI,CAACC,KAAKH,aAAV,EACI;AACJ,gBAAIG,KAAKF,iBAAT,EAA4B;AACxBE,qBAAKH,aAAL,CAAmBmB,OAAnB;AACAhB,qBAAKH,aAAL,GAAmB,IAAnB;AACH,aAHD,MAIK;AACDG,qBAAKH,aAAL,CAAmBoB,GAAnB,CAAuB,UAASN,GAAT,EAAc;AACjC,wBAAIA,GAAJ,EAAS;AACLjB,mCAAWwB,GAAX,CAAeP,GAAf;AACA;AACAX,6BAAKH,aAAL,GAAmB,IAAnB;AACH;AACDE;AACH,iBAPD;AAQH;AACJ;;AAED;;;;;;;;6CAKqBoB,E,EAAIpB,Q,EAAU;AAC/B,gBAAMC,OAAO,IAAb;AACA;AACAD,uBAAWA,YAAY,YAAY,CAAE,CAArC;AACA;AACAC,iBAAKoB,IAAL,CAAU,UAAST,GAAT,EAAc;AACpB,oBAAIA,GAAJ,EAAS;AACL,2BAAOZ,SAASsB,IAAT,CAAcrB,IAAd,EAAoBW,GAApB,CAAP;AACH;AACD;AACA,oBAAIX,KAAKsB,aAAT,EAAwB;AACpB;AACAH,uBAAGE,IAAH,CAAQrB,IAAR,EAAc,UAASW,GAAT,EACd;AACI;AACAZ,iCAASsB,IAAT,CAAcrB,IAAd,EAAoBW,GAApB;AACH,qBAJD;AAKH,iBAPD,MAQK;AACDX,yBAAKa,OAAL,CAAa,mBAAb,EAAiC,IAAjC,EAAuC,UAASF,GAAT,EAAc;AACjD,4BAAIA,GAAJ,EAAS;AACLZ,qCAASsB,IAAT,CAAcrB,IAAd,EAAoBW,GAApB;AACH,yBAFD,MAGK;AACD;AACAX,iCAAKsB,aAAL,GAAqB,IAArB;AACA,gCAAI;AACA;AACAH,mCAAGE,IAAH,CAAQrB,IAAR,EAAc,UAASuB,KAAT,EACd;AACI,wCAAIA,KAAJ,EAAW;AACP;AACAvB,6CAAKa,OAAL,CAAa,UAAb,EAAyB,IAAzB,EAA+B,YAAW;AACtC;AACAb,iDAAKsB,aAAL,GAAqB,KAArB;AACA;AACAvB,qDAASsB,IAAT,CAAcrB,IAAd,EAAoBuB,KAApB;AACH,yCALD;AAMH,qCARD,MASK;AACD;AACAvB,6CAAKa,OAAL,CAAa,QAAb,EAAuB,IAAvB,EAA6B,UAASF,GAAT,EAAc;AACvC;AACAX,iDAAKsB,aAAL,GAAqB,KAArB;AACA;AACAvB,qDAASsB,IAAT,CAAcrB,IAAd,EAAoBW,GAApB;AACH,yCALD;AAMH;AACJ,iCApBD;AAqBH,6BAvBD,CAwBA,OAAMA,GAAN,EAAW;AACP;AACAX,qCAAKa,OAAL,CAAa,UAAb,EAAyB,IAAzB,EAA+B,UAASF,GAAT,EAAc;AACzC;AACAX,yCAAKsB,aAAL,GAAqB,KAArB;AACA;AACAvB,6CAASsB,IAAT,CAAcrB,IAAd,EAAoBW,GAApB;AACH,iCALD;AAMH;AAEJ;AACJ,qBA1CD;AA2CH;AACJ,aA1DD;AA2DH;;AAED;;;;;;;;qCAKaa,K,EAAOzB,Q,EAAU;AAC1BA,uBAAWA,YAAY,YAAW,CAAE,CAApC;AACAA,qBAAS,IAAI0B,KAAJ,CAAU,yFAAV,CAAT;AACH;;AAED;;;;;;;;;uCAMeC,M,EAAQC,S,EAAW5B,Q,EAAU;;AAExC,gBAAMC,OAAO,IAAb;;AAEA,gBAAM4B,YAAY;AACdC,2BAAU,cADI;AAEdC,uBAAM,YAFQ;AAGdC,6BAAY,oCAHE;AAIdC,yBAAQ,KAJM;AAKdC,qBAAI,CACA,EAAEC,MAAK,IAAP,EAAaC,MAAK,SAAlB,EAA6BC,SAAQ,IAArC,EADA,EAEA,EAAEF,MAAK,QAAP,EAAiBC,MAAK,MAAtB,EAA8BE,MAAK,GAAnC,EAFA,EAGA,EAAEH,MAAK,WAAP,EAAoBC,MAAK,MAAzB,EAAiCE,MAAK,GAAtC,EAHA,EAIA,EAAEH,MAAK,OAAP,EAAgBC,MAAK,SAArB,EAJA;AALU,aAAlB;AAYA;AACAnC,iBAAKsC,OAAL,CAAaV,SAAb,EAAwB,UAASjB,GAAT,EACxB;AACI;AACA,oBAAIA,GAAJ,EAAS;AAAEZ,6BAASsB,IAAT,CAAcrB,IAAd,EAAoBW,GAApB,EAA0B;AAAS;;AAE9CX,qBAAKa,OAAL,CAAa,2DAAb,EAA0E,CAACa,MAAD,EAASC,SAAT,CAA1E,EAA+F,UAAShB,GAAT,EAAc4B,MAAd,EAAsB;AACjH,wBAAI5B,GAAJ,EAAS;AAAEZ,iCAASsB,IAAT,CAAcrB,IAAd,EAAoBW,GAApB,EAA0B;AAAS;AAC9C,wBAAI4B,OAAOC,MAAP,KAAgB,CAApB,EAAuB;AACnB;AACA,4BAAMC,IAAIjD,gBAAgBkD,MAAhB,CAAuBhB,MAAvB,EAA+BiB,MAA/B,CAAsClD,WAAWiD,MAAX,GAAoBE,GAApB,CAAwBjB,SAAxB,CAAtC,CAAV;AACA3B,6BAAKa,OAAL,CAAa4B,CAAb,EAAe,IAAf,EAAqB,UAAS9B,GAAT,EAAc4B,MAAd,EAAsB;AACvC,gCAAI5B,GAAJ,EAAS;AAAEZ,yCAASsB,IAAT,CAAcrB,IAAd,EAAoBW,GAApB,EAA0B;AAAS;AAC9C,gCAAIkC,QAAQ,CAAZ;AACA,gCAAIN,OAAOC,MAAP,GAAc,CAAlB,EAAqB;AACjBK,wCAAQC,SAASP,OAAO,CAAP,EAAUZ,SAAV,CAAT,IAAiC,CAAzC;AACH;AACD3B,iCAAKa,OAAL,CAAa,mEAAb,EAAiF,CAACa,MAAD,EAASC,SAAT,EAAoBkB,KAApB,CAAjF,EAA6G,UAASlC,GAAT,EAAc;AACvH;AACA,oCAAIA,GAAJ,EAAS;AAAEZ,6CAASsB,IAAT,CAAcrB,IAAd,EAAoBW,GAApB,EAA0B;AAAS;AAC9C;AACAZ,yCAASsB,IAAT,CAAcrB,IAAd,EAAoBW,GAApB,EAAyBkC,KAAzB;AACH,6BALD;AAMH,yBAZD;AAaH,qBAhBD,MAiBK;AACD;AACA,4BAAMA,QAAQC,SAASP,OAAO,CAAP,EAAUM,KAAnB,IAA4B,CAA1C;AACA7C,6BAAKa,OAAL,CAAa,4CAAb,EAA0D,CAACgC,KAAD,EAAQN,OAAO,CAAP,EAAUQ,EAAlB,CAA1D,EAAiF,UAASpC,GAAT,EAAc;AAC3F;AACA,gCAAIA,GAAJ,EAAS;AAAEZ,yCAASsB,IAAT,CAAcrB,IAAd,EAAoBW,GAApB,EAA0B;AAAS;AAC9C;AACAZ,qCAASsB,IAAT,CAAcrB,IAAd,EAAoBW,GAApB,EAAyBkC,KAAzB;AACH,yBALD;AAMH;AACJ,iBA7BD;AA8BH,aAnCD;AAoCH;;AAED;;;;;;;;gCAKQG,K,EAAOC,M,EAAQlD,Q,EAAU;AAC7B,gBAAMC,OAAO,IAAb;AACA,gBAAIkD,MAAM,IAAV;AACA,gBAAI;;AAEA,oBAAI,OAAOF,KAAP,KAAiB,QAArB,EAA+B;AAC3BE,0BAAMF,KAAN;AACH,iBAFD,MAGK;AACD;AACA,wBAAMG,YAAY,IAAIC,cAAJ,EAAlB;AACAD,8BAAUE,QAAV,CAAmBC,UAAnB,GAAgC3D,aAAa4D,WAA7C;AACAL,0BAAMC,UAAUK,MAAV,CAAiBR,KAAjB,CAAN;AACH;AACD;AACA,oBAAI,OAAOE,GAAP,KAAe,QAAnB,EAA6B;AACzBnD,6BAASsB,IAAT,CAAcrB,IAAd,EAAoB,IAAIyB,KAAJ,CAAU,sDAAV,CAApB;AACA;AACH;AACD;AACAzB,qBAAKoB,IAAL,CAAU,UAAST,GAAT,EAAc;AACpB,wBAAIA,GAAJ,EAAS;AACLZ,iCAASsB,IAAT,CAAcrB,IAAd,EAAoBW,GAApB;AACH,qBAFD,MAGK;AACD,4BAAI8C,kBAAJ;AACA,4BAAIC,QAAQC,GAAR,CAAYC,QAAZ,KAAuB,aAA3B,EAA0C;AACtCH,wCAAY,IAAIvD,IAAJ,GAAW2D,OAAX,EAAZ;AACH;AACD;AACA7D,6BAAKH,aAAL,CAAmBmD,KAAnB,CAAyBE,GAAzB,EAA8BD,MAA9B,EAAsC,UAAStC,GAAT,EAAc4B,MAAd,EAAsB;AACxD,gCAAImB,QAAQC,GAAR,CAAYC,QAAZ,KAAuB,aAA3B,EAA0C;AACtClE,2CAAWwB,GAAX,CAAe7B,KAAKmE,MAAL,CAAY,6CAAZ,EAA4D,IAAItD,IAAJ,EAAD,CAAa2D,OAAb,KAAuBJ,SAAlF,EAA6FP,GAA7F,EAAkGY,KAAKC,SAAL,CAAed,MAAf,CAAlG,CAAf;AACH;AACDlD,qCAASsB,IAAT,CAAcrB,IAAd,EAAoBW,GAApB,EAAyB4B,MAAzB;AACH,yBALD;AAMH;AACJ,iBAjBD;AAkBH,aAnCD,CAoCA,OAAO5B,GAAP,EAAY;AACRZ,yBAASsB,IAAT,CAAcrB,IAAd,EAAoBW,GAApB;AACH;AACJ;;AAED;;;;;;;;;;;;AAmFA;;;;;mCAKWuB,I,EAAMc,K,EAAOjD,Q,EAAU;AAC9B,iBAAKiE,IAAL,CAAU9B,IAAV,EAAgBQ,MAAhB,CAAuBM,KAAvB,EAA8BjD,QAA9B;AACH;;AAED;;;;;;;;gCAKQkE,G,EAAKlE,Q,EAAU;AACnB,gBAAIkE,QAAM,IAAV,EACI;AACJ,gBAAMjE,OAAO,IAAb;AACA,gBAAM4B,YAAYqC,GAAlB;AACA,gBAAIrC,UAAUC,SAAV,KAAsB,IAA1B,EACI,MAAM,IAAIJ,KAAJ,CAAU,yBAAV,CAAN;AACJzB,iBAAKoB,IAAL,CAAU,UAAST,GAAT,EAAc;AACpB,oBAAIA,GAAJ,EAAS;AACLZ,6BAASsB,IAAT,CAAcrB,IAAd,EAAoBW,GAApB;AACH,iBAFD,MAGK;AACDvB,0BAAM8E,SAAN,CAAgB;AACZ;AACA,8BAASC,EAAT,EAAa;AACTnE,6BAAKoE,KAAL,CAAW,YAAX,EAAyBC,MAAzB,CAAgC,UAAS1D,GAAT,EAAc0D,MAAd,EAAsB;AAClD,gCAAI1D,GAAJ,EAAS;AAAE,uCAAOwD,GAAGxD,GAAH,CAAP;AAAiB;AAC5BwD,+BAAG,IAAH,EAASE,MAAT;AACH,yBAHD;AAIH,qBAPW;AAQZ;AACA,8BAASC,GAAT,EAAcH,EAAd,EAAkB;AACd,4BAAIG,MAAI,CAAR,EAAW;AAAE,mCAAOH,GAAG,IAAH,EAAS,CAAT,CAAP;AAAqB;AAClCnE,6BAAKoE,KAAL,CAAW,YAAX,EAAyB1B,MAAzB,CAAgC,CAC5B,EAAER,MAAK,IAAP,EAAaC,MAAK,SAAlB,EAA6BC,SAAQ,IAArC,EAA2CmC,UAAS,KAApD,EAD4B,EAE5B,EAAErC,MAAK,WAAP,EAAoBC,MAAK,MAAzB,EAAiCE,MAAK,IAAtC,EAA4CkC,UAAS,KAArD,EAF4B,EAG5B,EAAErC,MAAK,OAAP,EAAgBC,MAAK,MAArB,EAA6BE,MAAK,KAAlC,EAAyCkC,UAAS,IAAlD,EAH4B,EAI5B,EAAErC,MAAK,aAAP,EAAsBC,MAAK,MAA3B,EAAmCE,MAAK,KAAxC,EAA+CkC,UAAS,IAAxD,EAJ4B,EAK5B,EAAErC,MAAK,SAAP,EAAkBC,MAAK,MAAvB,EAA+BE,MAAK,IAApC,EAA0CkC,UAAS,KAAnD,EAL4B,CAAhC,EAMG,UAAS5D,GAAT,EAAc;AACb,gCAAIA,GAAJ,EAAS;AAAE,uCAAOwD,GAAGxD,GAAH,CAAP;AAAiB;AAC5BwD,+BAAG,IAAH,EAAQ,CAAR;AACH,yBATD;AAUH,qBArBW;AAsBZ;AACA,8BAASG,GAAT,EAAcH,EAAd,EAAkB;AACdnE,6BAAKa,OAAL,CAAa,kFAAb,EACI,CAACe,UAAUC,SAAX,EAAsBD,UAAUI,OAAhC,CADJ,EAC8C,UAASrB,GAAT,EAAc4B,MAAd,EAAsB;AAC5D,gCAAI5B,GAAJ,EAAS;AAAE,uCAAOwD,GAAGxD,GAAH,CAAP;AAAiB;AAC5BwD,+BAAG,IAAH,EAAS5B,OAAO,CAAP,EAAUiC,KAAnB;AACH,yBAJL;AAKH,qBA7BW;AA8BZ;AACA,8BAASF,GAAT,EAAcH,EAAd,EAAkB;AACd;AACA,4BAAIG,MAAI,CAAR,EAAW;AAAEL,gCAAIQ,OAAJ,GAAY,IAAZ,CAAkB,OAAON,GAAG,IAAH,EAAS,CAAC,CAAV,CAAP;AAAsB;AACrDnE,6BAAKoE,KAAL,CAAWxC,UAAUC,SAArB,EAAgCwC,MAAhC,CAAuC,UAAS1D,GAAT,EAAc0D,MAAd,EAAsB;AACzD,gCAAI1D,GAAJ,EAAS;AAAE,uCAAOwD,GAAGxD,GAAH,CAAP;AAAiB;AAC5BwD,+BAAG,IAAH,EAASE,MAAT;AACH,yBAHD;AAIH,qBAtCW;AAuCZ;AACA,8BAASC,GAAT,EAAcH,EAAd,EAAkB;AACd;AACA,4BAAIG,MAAI,CAAR,EAAW;AAAE,mCAAOH,GAAG,IAAH,EAASG,GAAT,CAAP;AAAuB;AACpC,4BAAIA,QAAM,CAAV,EAAa;AACT;AACA,mCAAOtE,KAAKoE,KAAL,CAAWxC,UAAUC,SAArB,EAAgCa,MAAhC,CAAuCd,UAAUK,GAAjD,EAAsD,UAAStB,GAAT,EAAc;AACvE,oCAAIA,GAAJ,EAAS;AAAE,2CAAOwD,GAAGxD,GAAH,CAAP;AAAiB;AAC5BwD,mCAAG,IAAH,EAAS,CAAT;AACH,6BAHM,CAAP;AAIH;AACD;AACA,4BAAI7E,EAAEoF,OAAF,CAAU9C,UAAU+C,MAApB,CAAJ,EAAiC;AAC7B,gCAAI/C,UAAU+C,MAAV,CAAiBnC,MAAjB,GAAwB,CAA5B,EAA+B;AAC3B,uCAAO2B,GAAG,IAAI1C,KAAJ,CAAU,mEAAV,CAAH,CAAP;AACH;AACJ;AACD;AACA,4BAAInC,EAAEoF,OAAF,CAAU9C,UAAUgD,MAApB,CAAJ,EAAiC;AAC7B,gCAAIhD,UAAUgD,MAAV,CAAiBpC,MAAjB,GAAwB,CAA5B,EAA+B;AAC3B,uCAAO2B,GAAG,IAAI1C,KAAJ,CAAU,+FAAV,CAAH,CAAP;AACH;AACJ;AACD,4BAAIoD,eAAJ;AAAA,4BAAYC,gBAAZ;AAAA,4BAAqBC,gBAArB;AACA,4BAAIzF,EAAEoF,OAAF,CAAU9C,UAAUK,GAApB,CAAJ,EAA8B;AAC1B;AACAL,sCAAUgD,MAAV,GAAmB,EAAnB;AACA;AACA5E,iCAAKoE,KAAL,CAAWxC,UAAUC,SAArB,EAAgCmD,OAAhC,CAAwC,UAASrE,GAAT,EAAcqE,OAAd,EAAuB;AAC3D,oCAAIrE,GAAJ,EAAS;AAAE,2CAAOwD,GAAGxD,GAAH,CAAP;AAAiB;;AAD+B;AAGvD,wCAAMsE,IAAIrD,UAAUK,GAAV,CAAciD,EAAd,CAAV;AACAL,6CAASvF,EAAE6F,IAAF,CAAOH,OAAP,EAAgB,UAASI,CAAT,EAAY;AAAE,+CAAQA,EAAElD,IAAF,KAAS+C,EAAE/C,IAAnB;AAA2B,qCAAzD,CAAT;AACA,wCAAI2C,MAAJ,EAAY;AACR;AACA,4CAAIA,OAAOzC,OAAX,EAAoB;AAChBR,sDAAUK,GAAV,CAAcoD,MAAd,CAAqBH,EAArB,EAAwB,CAAxB;AACAA,kDAAG,CAAH;AACH,yCAHD,MAIK;AACD;AACAJ,sDAAUnF,aAAa6D,MAAb,CAAoB,IAApB,EAA0ByB,CAA1B,CAAV;AACA;AACAF,sDAAUF,OAAOS,KAAP,CAAaC,OAAb,CAAqB,MAArB,EAA4B,EAA5B,KAAoCV,OAAON,QAAP,KAAkB,IAAlB,IAA0BM,OAAON,QAAP,KAAoB,CAA/C,GAAoD,OAApD,GAA8D,WAAjG,CAAV;AACA;AACA3C,sDAAUK,GAAV,CAAcoD,MAAd,CAAqBH,EAArB,EAAwB,CAAxB;AACAA,kDAAG,CAAH;AACA,gDAAIJ,YAAYC,OAAhB,EAAyB;AACrB;AACAnD,0DAAUgD,MAAV,CAAiBY,IAAjB,CAAsBP,CAAtB;AACH;AACJ;AACJ;AAtBIC,qCAFkD;AAAA;;AAE3D,qCAAK,IAAIA,IAAI,CAAb,EAAgBA,IAAItD,UAAUK,GAAV,CAAcO,MAAlC,EAA0C0C,GAA1C,EAA+C;AAAA,0CAAtCA,CAAsC;AAuB9C;AACD;AACA,oCAAMO,cAAczF,KAAKoE,KAAL,CAAWxC,UAAUC,SAArB,CAApB;AACA;AACA4D,4CAAYxD,GAAZ,CAAgBL,UAAUK,GAA1B,EAA+B,UAAStB,GAAT,EAAc;AACzC,wCAAIA,GAAJ,EAAS;AAAE,+CAAOwD,GAAGxD,GAAH,CAAP;AAAiB;AAC5B;AACA8E,gDAAYb,MAAZ,CAAmBhD,UAAUgD,MAA7B,EAAqC,UAASjE,GAAT,EAAc;AAC/C,4CAAIA,GAAJ,EAAS;AAAE,mDAAOwD,GAAGxD,GAAH,CAAP;AAAiB;AAC5BwD,2CAAG,IAAH,EAAS,CAAT;AACH,qCAHD;AAIH,iCAPD;AAQH,6BArCD;AAsCH,yBA1CD,MA2CK;AACDA,+BAAG,IAAI1C,KAAJ,CAAU,yBAAV,CAAH;AACH;AACJ,qBA7GW;AA8GZ;AACA,8BAAU6C,GAAV,EAAeH,EAAf,EAAmB;AACf,4BAAIG,OAAK,CAAT,EAAY;AAAE,mCAAOH,GAAG,IAAH,EAASG,GAAT,CAAP;AAAuB;AACrC,4BAAI1C,UAAU8D,OAAd,EAAuB;AACnB,gCAAMC,eAAe3F,KAAK0F,OAAL,CAAa9D,UAAUC,SAAvB,CAArB;AACA;AACAzC,kCAAMwG,UAAN,CAAiBhE,UAAU8D,OAA3B,EAAoC,UAASG,KAAT,EAAgBC,aAAhB,EAA+B;AAC/DH,6CAAajD,MAAb,CAAoBmD,MAAM3D,IAA1B,EAAgC2D,MAAMb,OAAtC,EAA+Cc,aAA/C;AACH,6BAFD,EAEG,UAASnF,GAAT,EAAc;AACb;AACA,oCAAIA,GAAJ,EAAS;AAAE,2CAAOwD,GAAGxD,GAAH,CAAP;AAAiB;AAC5B;AACA,uCAAOwD,GAAG,IAAH,EAAS,CAAT,CAAP;AACH,6BAPD;AAQH,yBAXD,MAYK;AACD;AACA,mCAAOA,GAAG,IAAH,EAAS,CAAT,CAAP;AACH;AACJ,qBAjIW,EAkIZ,UAASG,GAAT,EAAcH,EAAd,EAAkB;AACd,4BAAIG,MAAI,CAAR,EAAW;AACP;AACAtE,iCAAKa,OAAL,CAAa,yFAAb,EAAwG,CAACe,UAAUC,SAAX,EACpGD,UAAUE,KAD0F,EAEpGF,UAAUI,OAF0F,EAGpGJ,UAAUG,WAH0F,CAAxG,EAG6B,UAASpB,GAAT,EAAc;AACvC,oCAAIA,GAAJ,EAAS;AAAE,2CAAOwD,GAAGxD,GAAH,CAAP;AAAiB;AAC5B,uCAAOwD,GAAG,IAAH,EAAS,CAAT,CAAP;AACH,6BAND;AAOH,yBATD,MAWIA,GAAG,IAAH,EAASG,GAAT;AAEP,qBAhJW,CAAhB,EAiJG,UAAS3D,GAAT,EAAc4B,MAAd,EAAsB;AACrBxC,iCAASY,GAAT,EAAc4B,MAAd;AACH,qBAnJD;AAoJH;AACJ,aA1JD;AA2JH;;;8BAEKL,I,EAAM;AACR,gBAAMlC,OAAO,IAAb;;AAEA,mBAAO;AACH;;;AAGAqE,wBAAO,gBAAStE,QAAT,EAAmB;AACtBA,+BAAWA,YAAY,YAAW,CAAE,CAApC;AACAC,yBAAKa,OAAL,CAAa,0GAAb,EACI,CAAEqB,IAAF,CADJ,EACc,UAASvB,GAAT,EAAc4B,MAAd,EAAsB;AAC5B,4BAAI5B,GAAJ,EAAS;AAAE,mCAAOZ,SAASY,GAAT,CAAP;AAAuB;AAClCZ,iCAAS,IAAT,EAAewC,OAAO,CAAP,EAAUiC,KAAzB;AACH,qBAJL;AAKH,iBAXE;AAYH;;;AAGAxC,yBAAQ,iBAASjC,QAAT,EAAmB;AACvBA,+BAAWA,YAAY,YAAW,CAAE,CAApC;AACAC,yBAAKa,OAAL,CAAa,0EAAb,EACI,CAACqB,IAAD,CADJ,EACY,UAASvB,GAAT,EAAc4B,MAAd,EAAsB;AAC1B,4BAAI5B,GAAJ,EAAS;AAAE,mCAAOZ,SAASY,GAAT,CAAP;AAAuB;AAClC,4BAAI4B,OAAOC,MAAP,KAAgB,CAApB,EACIzC,SAAS,IAAT,EAAe,KAAf,EADJ,KAGIA,SAAS,IAAT,EAAewC,OAAO,CAAP,EAAUP,OAAV,IAAqB,KAApC;AACP,qBAPL;AAQH,iBAzBE;AA0BH;;;AAGAgD,yBAAQ,iBAASjF,QAAT,EAAmB;AACvBA,+BAAWA,YAAY,YAAW,CAAE,CAApC;AACAC,yBAAKa,OAAL,CAAa,wDACT,oGADS,GAET,8DAFS,GAGT,+DAHS,GAIT,kGAJS,GAKT,gFALJ,EAMI,CAAEqB,IAAF,CANJ,EAMc,UAASvB,GAAT,EAAc4B,MAAd,EAAsB;AAC5B,4BAAI5B,GAAJ,EAAS;AAAE,mCAAOZ,SAASY,GAAT,CAAP;AAAuB;AAClCZ,iCAAS,IAAT,EAAewC,MAAf;AACH,qBATL;AAUH,iBAzCE;AA0CH;;;;AAIAG,wBAAQ,gBAASqD,MAAT,EAAiBhG,QAAjB,EAA2B;AAC/BA,+BAAWA,YAAY,YAAW,CAAE,CAApC;AACAgG,6BAASA,UAAU,EAAnB;AACA,wBAAI,CAACzG,EAAEoF,OAAF,CAAUqB,MAAV,CAAL,EAAwB;AACpB,+BAAOhG,SAAS,IAAI0B,KAAJ,CAAU,wCAAV,CAAT,CAAP;AACH;AACD,wBAAIsE,OAAOvD,MAAP,KAAkB,CAAtB,EAAyB;AACrB,+BAAOzC,SAAS,IAAI0B,KAAJ,CAAU,sDAAV,CAAT,CAAP;AACH;AACD,wBAAIuE,YAAY1G,EAAE2G,GAAF,CAAM3G,EAAE4G,MAAF,CAASH,MAAT,EAAgB,UAACd,CAAD,EAAO;AAAE,+BAAO,CAACA,EAAEkB,SAAV;AAAsB,qBAA/C,CAAN,EACZ,UAAClB,CAAD,EAAO;AACH,+BAAOtF,aAAa6D,MAAb,CAAoB,SAApB,EAA+ByB,CAA/B,CAAP;AACH,qBAHW,EAGTmB,IAHS,CAGJ,IAHI,CAAhB;AAIA;AACA,wBAAMC,cAAc/G,EAAE2G,GAAF,CAAM3G,EAAE4G,MAAF,CAASH,MAAT,EAAiB,UAACd,CAAD,EAAO;AAC9C,+BAAQA,EAAE7C,OAAF,KAAc,IAAd,IAAsB6C,EAAE7C,OAAF,KAAc,CAA5C;AACH,qBAFyB,CAAN,EAEhB,UAAC6C,CAAD,EAAO;AACP,+BAAOtF,aAAa6D,MAAb,CAAoB,MAApB,EAA4ByB,CAA5B,CAAP;AACH,qBAJmB,EAIjBmB,IAJiB,CAIZ,IAJY,CAApB;AAKA,wBAAIC,YAAY7D,MAAZ,GAAmB,CAAvB,EAA0B;AACtBwD,qCAAa,OAAO3G,KAAKmE,MAAL,CAAY,kBAAZ,EAAgC6C,WAAhC,CAApB;AACH;AACD,wBAAMnD,MAAM7D,KAAKmE,MAAL,CAAY,sBAAZ,EAAoCtB,IAApC,EAA0C8D,SAA1C,CAAZ;AACAhG,yBAAKa,OAAL,CAAaqC,GAAb,EAAkB,IAAlB,EAAwB,UAASvC,GAAT,EAAc;AAClCZ,iCAASY,GAAT;AACH,qBAFD;AAGH,iBAxEE;AAyEH;;;;;AAKAsB,qBAAI,aAAS8D,MAAT,EAAiBhG,QAAjB,EAA2B;AAC3BA,+BAAWA,YAAY,YAAW,CAAE,CAApC;AACAA,+BAAWA,YAAY,YAAW,CAAE,CAApC;AACAgG,6BAASA,UAAU,EAAnB;AACA,wBAAI,CAACzG,EAAEoF,OAAF,CAAUqB,MAAV,CAAL,EAAwB;AACpB;AACA,+BAAOhG,SAAS,IAAI0B,KAAJ,CAAU,wCAAV,CAAT,CAAP;AACH;AACD,wBAAIsE,OAAOvD,MAAP,KAAkB,CAAtB,EAAyB;AACrB;AACA,+BAAOzC,UAAP;AACH;AACD,wBAAMoD,YAAY,IAAIC,cAAJ,EAAlB;AACA,wBAAMkD,WAAWnD,UAAUoD,UAAV,CAAqBrE,IAArB,CAAjB;AACA;AACA,wBAAMgB,MAAM5D,EAAE2G,GAAF,CAAMF,MAAN,EAAc,UAASd,CAAT,EAAY;AAClC,+BAAOtF,aAAa6D,MAAb,CAAoB,iBAAiB8C,QAAjB,GAA4B,qBAAhD,EAAuErB,CAAvE,CAAP;AACH,qBAFW,EAETmB,IAFS,CAEJ,GAFI,CAAZ;AAGApG,yBAAKa,OAAL,CAAaqC,GAAb,EAAkB,EAAlB,EAAsB,UAASvC,GAAT,EAAc;AAChCZ,iCAASY,GAAT;AACH,qBAFD;AAGH,iBAnGE;AAoGH;;;;;AAKAiE,wBAAO,gBAASmB,MAAT,EAAiBhG,QAAjB,EAA2B;AAC9BA,+BAAWA,YAAY,YAAW,CAAE,CAApC;AACAA,+BAAWA,YAAY,YAAW,CAAE,CAApC;AACAgG,6BAASA,UAAU,EAAnB;AACA,wBAAI,CAACzG,EAAEoF,OAAF,CAAUqB,MAAV,CAAL,EAAwB;AACpB;AACA,+BAAOhG,SAAS,IAAI0B,KAAJ,CAAU,wCAAV,CAAT,CAAP;AACH;AACD,wBAAIsE,OAAOvD,MAAP,KAAkB,CAAtB,EAAyB;AACrB;AACA,+BAAOzC,UAAP;AACH;AACD,wBAAMoD,YAAY,IAAIC,cAAJ,EAAlB;AACA,wBAAMkD,WAAWnD,UAAUoD,UAAV,CAAqBrE,IAArB,CAAjB;AACA;AACA,wBAAMgB,MAAM5D,EAAE2G,GAAF,CAAMF,MAAN,EAAc,UAASd,CAAT,EAAY;AAClC,+BAAOtF,aAAa6D,MAAb,CAAoB,iBAAiB8C,QAAjB,GAA4B,wBAAhD,EAA0ErB,CAA1E,CAAP;AACH,qBAFW,EAETmB,IAFS,CAEJ,GAFI,CAAZ;AAGApG,yBAAKa,OAAL,CAAaqC,GAAb,EAAkB,EAAlB,EAAsB,UAASvC,GAAT,EAAc;AAChCZ,iCAASY,GAAT;AACH,qBAFD;AAGH;AA9HE,aAAP;AAgIH;;;6BAEIuB,I,EAAM;AACP,gBAAMlC,OAAO,IAAb;AACA,gBAAIwG,cAAJ;AACA,gBAAIxC,aAAJ;;AAEA,gBAAMyC,UAAU,eAAeC,IAAf,CAAoBxE,IAApB,CAAhB;AACA,gBAAIuE,OAAJ,EAAa;AACT;AACAD,wBAAQC,QAAQ,CAAR,CAAR;AACA;AACAzC,uBAAOyC,QAAQ,CAAR,CAAP;AACH,aALD,MAMK;AACDzC,uBAAO9B,IAAP;AACH;AACD,mBAAO;AACH;;;AAGAmC,wBAAO,gBAAStE,QAAT,EAAmB;AACtB,wBAAMmD,MAAM,kIAAZ;AACAlD,yBAAKa,OAAL,CAAaqC,GAAb,EAAkB,CAAChB,IAAD,CAAlB,EAA0B,UAASvB,GAAT,EAAc4B,MAAd,EAAsB;AAC5C,4BAAI5B,GAAJ,EAAS;AAAEZ,qCAASY,GAAT,EAAe;AAAS;AACnCZ,iCAAS,IAAT,EAAgBwC,OAAO,CAAP,EAAUiC,KAAV,GAAgB,CAAhC;AACH,qBAHD;AAIH,iBAVE;AAWH;;;AAGAmC,sBAAK,cAAS5G,QAAT,EAAmB;AACpBA,+BAAWA,YAAY,YAAW,CAAE,CAApC;AACAC,yBAAKoB,IAAL,CAAU,UAAST,GAAT,EAAc;AACpB,4BAAIA,GAAJ,EAAS;AAAE,mCAAOZ,SAASY,GAAT,CAAP;AAAuB;AAClC,4BAAMuC,MAAM,kIAAZ;AACAlD,6BAAKa,OAAL,CAAaqC,GAAb,EAAkB,CAAChB,IAAD,CAAlB,EAA0B,UAASvB,GAAT,EAAc4B,MAAd,EAAsB;AAC5C,gCAAI5B,GAAJ,EAAS;AAAE,uCAAOZ,SAASY,GAAT,CAAP;AAAuB;AAClC,gCAAM0D,SAAU9B,OAAO,CAAP,EAAUiC,KAAV,GAAgB,CAAhC;AACA,gCAAIH,MAAJ,EAAY;AACR,oCAAMnB,OAAM7D,KAAKmE,MAAL,CAAY,gBAAZ,EAA6BtB,IAA7B,CAAZ;AACAlC,qCAAKa,OAAL,CAAaqC,IAAb,EAAkB0D,SAAlB,EAA6B,UAASjG,GAAT,EAAc;AACvC,wCAAIA,GAAJ,EAAS;AAAEZ,iDAASY,GAAT,EAAe;AAAS;AACnCZ;AACH,iCAHD;AAIH,6BAND,MAOK;AACDA;AACH;AACJ,yBAbD;AAcH,qBAjBD;AAkBH,iBAlCE;AAmCH;;;;AAIA2C,wBAAO,gBAASD,CAAT,EAAY1C,QAAZ,EAAsB;AACzB,wBAAM8G,UAAU,IAAhB;AACA7G,yBAAK8G,oBAAL,CAA0B,UAASC,EAAT,EAAa;AACnCF,gCAAQF,IAAR,CAAa,UAAShG,GAAT,EAAc;AACvB,gCAAIA,GAAJ,EAAS;AAAEoG,mCAAGpG,GAAH,EAAS;AAAS;AAC7B,gCAAI;AACA,oCAAIuC,MAAM7D,KAAKmE,MAAL,CAAY,sBAAZ,EAAmCtB,IAAnC,CAAV;AACA,oCAAMiB,YAAY,IAAIC,cAAJ,EAAlB;AACAF,uCAAOC,UAAUK,MAAV,CAAiBf,CAAjB,CAAP;AACAzC,qCAAKa,OAAL,CAAaqC,GAAb,EAAkB,EAAlB,EAAsB6D,EAAtB;AACH,6BALD,CAMA,OAAMC,CAAN,EAAS;AACLD,mCAAGC,CAAH;AACH;AACJ,yBAXD;AAYH,qBAbD,EAaG,UAASrG,GAAT,EAAc;AACbZ,iCAASY,GAAT;AACH,qBAfD;AAiBH;AA1DE,aAAP;AA4DH;;;gCAEOyD,K,EAAO;AACX,gBAAMpE,OAAO,IAAb;AAAA,gBAAmBmD,YAAY,IAAIC,cAAJ,EAA/B;AACA,mBAAO;AACH6D,sBAAM,cAAUlH,QAAV,EAAoB;AACtB,wBAAMmH,QAAQ,IAAd;AACA,wBAAIA,MAAMC,cAAN,CAAqB,UAArB,CAAJ,EAAsC;AAClC,+BAAOpH,SAAS,IAAT,EAAemH,MAAM,UAAN,CAAf,CAAP;AACH;AACDlH,yBAAKa,OAAL,CAAaxB,KAAKmE,MAAL,CAAY,wBAAZ,EAAsCY,KAAtC,CAAb,EAA2D,IAA3D,EAAkE,UAAUzD,GAAV,EAAe4B,MAAf,EAAuB;AACrF,4BAAI5B,GAAJ,EAAS;AAAE,mCAAOZ,SAASY,GAAT,CAAP;AAAuB;AAClC,4BAAM+E,UAAU,EAAhB;AACApG,0BAAE8H,OAAF,CAAU7E,MAAV,EAAkB,UAAS0C,CAAT,EAAY;AAC1B,gCAAMhB,MAAM3E,EAAE6F,IAAF,CAAOO,OAAP,EAAgB,UAASN,CAAT,EAAY;AAAE,uCAAOA,EAAElD,IAAF,KAAW+C,EAAE,UAAF,CAAlB;AAAkC,6BAAhE,CAAZ;AACA,gCAAI,OAAOhB,GAAP,KAAe,WAAnB,EAAgC;AAC5ByB,wCAAQF,IAAR,CAAa;AACTtD,0CAAK+C,EAAE,UAAF,CADI;AAETD,6CAAQ,CAAEC,EAAE,aAAF,CAAF;AAFC,iCAAb;AAIH,6BALD,MAMK;AACDhB,oCAAIe,OAAJ,CAAYQ,IAAZ,CAAiBP,EAAE,aAAF,CAAjB;AACH;AACJ,yBAXD;AAYA,+BAAOlF,SAAS,IAAT,EAAe2F,OAAf,CAAP;AACH,qBAhBD;AAiBH,iBAvBE;AAwBH;;;;;AAKAhD,wBAAQ,gBAASR,IAAT,EAAe8C,OAAf,EAAwBjF,QAAxB,EAAkC;AACtC,wBAAMsH,OAAO,EAAb;AACA,wBAAI,OAAOrC,OAAP,KAAmB,QAAvB,EAAiC;AAC7BqC,6BAAK7B,IAAL,CAAUR,OAAV;AACH,qBAFD,MAGK,IAAI1F,EAAEoF,OAAF,CAAUM,OAAV,CAAJ,EAAwB;AACzBqC,6BAAK7B,IAAL,CAAU8B,KAAV,CAAgBD,IAAhB,EAAqBrC,OAArB;AACH,qBAFI,MAGA;AACD,+BAAOjF,SAAS,IAAI0B,KAAJ,CAAU,+EAAV,CAAT,CAAP;AACH;AACD,wBAAMoF,UAAU,IAAhB;AACAA,4BAAQI,IAAR,CAAa,UAAStG,GAAT,EAAc+E,OAAd,EAAuB;;AAEhC,4BAAI/E,GAAJ,EAAS;AAAE,mCAAOZ,SAASY,GAAT,CAAP;AAAuB;AAClC,4BAAM4G,KAAIjI,EAAE6F,IAAF,CAAOO,OAAP,EAAgB,UAAST,CAAT,EAAY;AAAE,mCAAOA,EAAE/C,IAAF,KAAWA,IAAlB;AAAyB,yBAAvD,CAAV;AACA;AACA,4BAAMsF,iBAAiBnI,KAAKmE,MAAL,CAAY,2BAAZ,EACnBL,UAAUoD,UAAV,CAAqBrE,IAArB,CADmB,EAEnBiB,UAAUoD,UAAV,CAAqBnC,KAArB,CAFmB,EAGnB9E,EAAE2G,GAAF,CAAMoB,IAAN,EAAY,UAASpC,CAAT,EAAY;AACpB,mCAAO9B,UAAUoD,UAAV,CAAqBtB,CAArB,CAAP;AACH,yBAFD,EAEGmB,IAFH,CAEQ,GAFR,CAHmB,CAAvB;AAMA,4BAAI,OAAOmB,EAAP,KAAc,WAAd,IAA6BA,OAAO,IAAxC,EAA8C;AAC1CvH,iCAAKa,OAAL,CAAa2G,cAAb,EAA6B,EAA7B,EAAiCzH,QAAjC;AACH,yBAFD,MAGK;AACD,gCAAI0H,QAAQJ,KAAK7E,MAAjB;AACA;AACAlD,8BAAE8H,OAAF,CAAUG,GAAGvC,OAAb,EAAsB,UAASC,CAAT,EAAY;AAC9B,oCAAIoC,KAAKK,OAAL,CAAazC,CAAb,KAAiB,CAArB,EAAwB;AACpB;AACAwC,6CAAS,CAAT;AACH;AACJ,6BALD;AAMA,gCAAIA,QAAM,CAAV,EAAa;AACT;AACAZ,wCAAQF,IAAR,CAAazE,IAAb,EAAmB,UAASvB,GAAT,EAAc;AAC7B,wCAAIA,GAAJ,EAAS;AAAE,+CAAOZ,SAASY,GAAT,CAAP;AAAuB;AAClC;AACAX,yCAAKa,OAAL,CAAa2G,cAAb,EAA6B,EAA7B,EAAiCzH,QAAjC;AACH,iCAJD;AAKH,6BAPD,MAQK;AACD;AACA,uCAAOA,UAAP;AACH;AACJ;AACJ,qBApCD;AAuCH,iBAhFE;AAiFH4G,sBAAM,cAASzE,IAAT,EAAenC,QAAf,EAAyB;AAC3B,wBAAI,OAAOmC,IAAP,KAAgB,QAApB,EAA8B;AAC1B,+BAAOnC,SAAS,IAAI0B,KAAJ,CAAU,8BAAV,CAAT,CAAP;AACH;AACD,yBAAKwF,IAAL,CAAU,UAAStG,GAAT,EAAc+E,OAAd,EAAuB;AAC7B,4BAAI/E,GAAJ,EAAS;AAAE,mCAAOZ,SAASY,GAAT,CAAP;AAAuB;AAClC,4BAAM0D,SAAS,OAAO/E,EAAE6F,IAAF,CAAOO,OAAP,EAAgB,UAAST,CAAT,EAAY;AAAE,mCAAOA,EAAE/C,IAAF,KAAWA,IAAlB;AAAyB,yBAAvD,CAAP,KAAoE,WAAnF;AACA,4BAAI,CAACmC,MAAL,EAAa;AACT,mCAAOtE,UAAP;AACH;AACDC,6BAAKa,OAAL,CAAaxB,KAAKmE,MAAL,CAAY,qBAAZ,EAAmCL,UAAUoD,UAAV,CAAqBrE,IAArB,CAAnC,EAA+DiB,UAAUoD,UAAV,CAAqBnC,KAArB,CAA/D,CAAb,EAA0G,EAA1G,EAA8GrE,QAA9G;AACH,qBAPD;AAQH;AA7FE,aAAP;AA+FH;;;oCAEWiD,K,EAAOC,M,EAAQ;AACvB,gBAAI,CAACA,MAAL,EAAa,OAAOD,KAAP;AACb,gBAAMhD,OAAO,IAAb;AACA,mBAAOgD,MAAMuC,OAAN,CAAc,SAAd,EAAyB,UAAUoC,GAAV,EAAeC,GAAf,EAAoB;AAChD,oBAAI3E,OAAOkE,cAAP,CAAsBS,GAAtB,CAAJ,EAAgC;AAC5B,2BAAO5H,KAAK6H,MAAL,CAAY5E,OAAO2E,GAAP,CAAZ,CAAP;AACH;AACD,uBAAOD,GAAP;AACH,aAL+B,CAK9BtG,IAL8B,CAKzB,IALyB,CAAzB,CAAP;AAMH;;;+BA5jBamC,O,EAAQS,G,EAAK;AACvB,gBAAI1B,SAASiB,OAAb;AACA,gBAAI,KAAKsE,IAAL,CAAUtE,OAAV,CAAJ,EACIjB,SAASA,OAAOgD,OAAP,CAAe,KAAf,EAAqB5F,aAAaoI,UAAb,CAAwB9D,GAAxB,CAArB,CAAT;AACJ,gBAAI,KAAK6D,IAAL,CAAUtE,OAAV,CAAJ,EACIjB,SAASA,OAAOgD,OAAP,CAAe,KAAf,EAAqBtB,IAAI/B,IAAzB,CAAT;AACJ,mBAAOK,MAAP;AACH;;;mCAEiByF,K,EAAO;AACrB,gBAAM3F,OAAOS,SAASkF,MAAM3F,IAAf,CAAb;AACA,gBAAM4F,QAAQnF,SAASkF,MAAMC,KAAf,CAAd;AACA,gBAAIC,IAAI,mBAAR;AACA,gBAAM/F,OAAK6F,MAAM7F,IAAjB;AACA,oBAAQA,IAAR;AAEI,qBAAK,SAAL;AACI+F,wBAAI,YAAJ;AACA;AACJ,qBAAK,MAAL;AACIA,wBAAI,qBAAJ;AACA;AACJ,qBAAK,QAAL;AACA,qBAAK,OAAL;AACIA,wBAAI,OAAJ;AACA;AACJ,qBAAK,SAAL;AACI,2BAAO,iCAAP;AACJ,qBAAK,UAAL;AACIA,wBAAK,eAAL;AACA;AACJ,qBAAK,SAAL;AACIA,wBAAK7I,KAAKmE,MAAL,CAAY,gBAAZ,EAA+BnB,OAAK,CAAL,GAASA,IAAT,GAAgB,EAA/C,EAAoD4F,QAAM,CAAN,GAAUA,KAAV,GAAkB,CAAtE,CAAL;AACA;AACJ,qBAAK,MAAL;AACIC,wBAAI,MAAJ;AACA;AACJ,qBAAK,UAAL;AACA,qBAAK,MAAL;AACIA,wBAAI,WAAJ;AACA;AACJ,qBAAK,SAAL;AACA,qBAAK,UAAL;AACIA,wBAAI,SAAJ;AACA;AACJ,qBAAK,KAAL;AACA,qBAAK,MAAL;AACIA,wBAAI7F,OAAK,CAAL,gBAAqBA,IAArB,SAA+B,cAAnC;AACA;AACJ,qBAAK,MAAL;AACI6F,wBAAI7F,OAAK,CAAL,gBAAqBA,IAArB,SAA+B,MAAnC;AACA;AACJ,qBAAK,OAAL;AACA,qBAAK,QAAL;AACI6F,wBAAI7F,OAAO,CAAP,aAAmBA,IAAnB,SAA6B,MAAjC;AACA;AACJ,qBAAK,MAAL;AACI6F,wBAAI,aAAJ;AACA;AACJ,qBAAK,OAAL;AACIA,wBAAI,aAAJ;AACA;AACJ;AACIA,wBAAI,SAAJ;AACA;AAlDR;AAoDA,gBAAIF,MAAM5F,OAAN,KAAkB,IAAtB,EAA4B;AACxB8F,qBAAK,WAAL;AACH,aAFD,MAGK;AACDA,qBAAM,OAAOF,MAAMzD,QAAb,KAA0B,WAA3B,GAA0C,OAA1C,GAAqDyD,MAAMzD,QAAN,KAAiB,IAAjB,IAAyByD,MAAMzD,QAAN,KAAmB,CAA7C,GAAkD,OAAlD,GAA2D,WAApH;AAEH;AACD,mBAAO2D,CAAP;AACH;;;;;;;;;AAqfL,SAAS7H,OAAT,CAAiB8H,MAAjB,EAAyB3F,MAAzB,EAAiC;AAC7B2F,aAASA,UAAU,CAAnB;AACA,QAAIC,MAAMD,OAAOE,QAAP,EAAV;AACA,WAAOD,IAAI5F,MAAJ,GAAaA,MAApB,EAA4B;AACxB4F,cAAM,MAAMA,GAAZ;AACH;AACD,WAAOA,GAAP;AACH;;AAED;;;;;IAIahF,c,WAAAA,c;;;AACT;;;AAGA,8BAAc;AAAA;;AAAA;;AAEV,cAAKC,QAAL,GAAgB;AACZC,wBAAWF,eAAeG,WADd;AAEZ+E,wBAAW;AAFC,SAAhB;AAFU;AAMb;;;;mCAEUpG,I,EAAM;AACb,gBAAI,OAAOA,IAAP,KAAgB,QAApB,EAA8B;AAC1B,oBAAI,kBAAkB4F,IAAlB,CAAuB5F,IAAvB,CAAJ,EAAkC;AAC9B,2BAAOA,KAAKqD,OAAL,CAAa,QAAb,EAAuBnC,eAAeG,WAAtC,CAAP;AACH;AACD,uBAAOrB,KAAKqD,OAAL,CAAa,iBAAb,EAAgCnC,eAAeG,WAA/C,CAAP;AACH;AACD,mBAAOrB,IAAP;AACH;;;+BAEMW,K,EAAO0F,Q,EAAU;;AAEpB,gBAAI,OAAO1F,KAAP,KAAiB,SAArB,EAAgC;AAAE,uBAAOA,QAAQ,GAAR,GAAc,GAArB;AAA2B;AAC7D,gBAAIA,iBAAiB3C,IAArB,EAA2B;AACvB,uBAAO,KAAKsI,UAAL,CAAgB3F,KAAhB,CAAP;AACH;AACD,mBAAO,4GAAaxB,IAAb,CAAkB,IAAlB,EAAwBwB,KAAxB,EAA+B0F,QAA/B,CAAP;AACH;;AAED;;;;;;;mCAIWE,G,EAAK;AACZ,gBAAMC,OAASD,IAAIE,WAAJ,EAAf;AACA,gBAAMC,QAASvI,QAAQoI,IAAII,QAAJ,KAAiB,CAAzB,EAA4B,CAA5B,CAAf;AACA,gBAAMC,MAASzI,QAAQoI,IAAIM,OAAJ,EAAR,EAAuB,CAAvB,CAAf;AACA,gBAAMC,OAAS3I,QAAQoI,IAAIQ,QAAJ,EAAR,EAAwB,CAAxB,CAAf;AACA,gBAAMC,SAAS7I,QAAQoI,IAAIU,UAAJ,EAAR,EAA0B,CAA1B,CAAf;AACA,gBAAMC,SAAS/I,QAAQoI,IAAIY,UAAJ,EAAR,EAA0B,CAA1B,CAAf;AACA;AACA;AACA,gBAAMpJ,SAASwI,IAAItI,iBAAJ,EAAf;AAAA,gBAAwCC,WAAW,CAACH,UAAQ,CAAR,GAAY,GAAZ,GAAkB,GAAnB,IAA0BI,QAAQ,CAACC,KAAKC,KAAL,CAAWN,SAAO,EAAlB,CAAT,EAA+B,CAA/B,CAA1B,GAA8D,GAA9D,GAAoEI,QAAQJ,SAAO,EAAf,EAAkB,CAAlB,CAAvH;AACA,gBAAMqJ,WAAWZ,OAAO,GAAP,GAAaE,KAAb,GAAqB,GAArB,GAA2BE,GAA3B,GAAiC,GAAjC,GAAuCE,IAAvC,GAA8C,GAA9C,GAAoDE,MAApD,GAA6D,GAA7D,GAAmEE,MAApF;AACA;AACA,mBAAO/J,KAAKmE,MAAL,CAAY,4CAAZ,EAA0D8F,QAA1D,EAAoElJ,QAApE,CAAP;AACH;;;;EAhD+Bb,Y;;AAmDpC6D,eAAeG,WAAf,GAA6B,MAA7B;;AAEA;;;;;AAKO,SAASrE,cAAT,CAAwBU,OAAxB,EAAiC;AACpC,WAAO,IAAID,YAAJ,CAAiBC,OAAjB,CAAP;AACH","file":"index.js","sourcesContent":["/**\r\n * @license\r\n * MOST Web Framework 2.0 Codename Blueshift\r\n * Copyright (c) 2014, Kyriakos Barbounakis k.barbounakis@gmail.com\r\n *                     Anthi Oikonomou anthioikonomou@gmail.com\r\n *\r\n * Use of this source code is governed by an BSD-3-Clause license that can be\r\n * found in the LICENSE file at https://themost.io/license\r\n */\r\nimport mysql from 'mysql';\r\nimport async from 'async';\r\nimport util from 'util';\r\nimport _ from 'lodash';\r\nimport {SqlFormatter} from '@themost/query/formatter';\r\nimport {QueryExpression,QueryField} from '@themost/query/query';\r\nimport {TraceUtils} from '@themost/common/utils';\r\n\r\n/**\r\n * @class\r\n * @constructor\r\n * @augments DataAdapter\r\n */\r\nexport class MySqlAdapter {\r\n    constructor(options) {\r\n        /**\r\n         * @private\r\n         * @type {Connection}\r\n         */\r\n        this.rawConnection = null;\r\n        /**\r\n         * Gets or sets database connection string\r\n         * @type {*}\r\n         */\r\n        this.options = options;\r\n        /**\r\n         * Gets or sets a boolean that indicates whether connection pooling is enabled or not.\r\n         * @type {boolean}\r\n         */\r\n        this.connectionPooling = false;\r\n\r\n    }\r\n\r\n    /**\r\n     * Opens database connection\r\n     */\r\n    open(callback) {\r\n        callback = callback || function() {};\r\n        const self = this;\r\n        if (this.rawConnection) {\r\n            return callback();\r\n        }\r\n        //get current timezone\r\n        const offset = (new Date()).getTimezoneOffset(), timezone = (offset<=0 ? '+' : '-') + zeroPad(-Math.floor(offset/60),2) + ':' + zeroPad(offset%60,2);\r\n        if (self.connectionPooling) {\r\n            if (typeof MySqlAdapter.pool === 'undefined') {\r\n                MySqlAdapter.pool = mysql.createPool(this.options);\r\n            }\r\n            MySqlAdapter.pool.getConnection(function(err, connection) {\r\n                if (err) {\r\n                    return callback(err);\r\n                }\r\n                else {\r\n                    self.rawConnection = connection;\r\n                    self.execute(\"SET time_zone=?\", timezone, function(err) {\r\n                        return callback(err);\r\n                    });\r\n                }\r\n            });\r\n        }\r\n        else {\r\n            self.rawConnection = mysql.createConnection(this.options);\r\n            self.rawConnection.connect(function(err) {\r\n                if (err) {\r\n                    return callback(err);\r\n                }\r\n                else {\r\n                    //set connection timezone\r\n                    self.execute(\"SET time_zone=?\", timezone, function(err) {\r\n                        return callback(err);\r\n                    });\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @param {Function} callback\r\n     */\r\n    close(callback) {\r\n        const self = this;\r\n        callback = callback || function() {};\r\n        if (!self.rawConnection)\r\n            return;\r\n        if (self.connectionPooling) {\r\n            self.rawConnection.release();\r\n            self.rawConnection=null;\r\n        }\r\n        else {\r\n            self.rawConnection.end(function(err) {\r\n                if (err) {\r\n                    TraceUtils.log(err);\r\n                    //do nothing\r\n                    self.rawConnection=null;\r\n                }\r\n                callback();\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Begins a data transaction and executes the given function\r\n     * @param {Function} fn\r\n     * @param {Function} callback\r\n     */\r\n    executeInTransaction(fn, callback) {\r\n        const self = this;\r\n        //ensure callback\r\n        callback = callback || function () {};\r\n        //ensure that database connection is open\r\n        self.open(function(err) {\r\n            if (err) {\r\n                return callback.bind(self)(err);\r\n            }\r\n            //execution is already in transaction\r\n            if (self.__transaction) {\r\n                //so invoke method\r\n                fn.bind(self)(function(err)\r\n                {\r\n                    //call callback\r\n                    callback.bind(self)(err);\r\n                });\r\n            }\r\n            else {\r\n                self.execute('START TRANSACTION',null, function(err) {\r\n                    if (err) {\r\n                        callback.bind(self)(err);\r\n                    }\r\n                    else {\r\n                        //set transaction flag to true\r\n                        self.__transaction = true;\r\n                        try {\r\n                            //invoke method\r\n                            fn.bind(self)(function(error)\r\n                            {\r\n                                if (error) {\r\n                                    //rollback transaction\r\n                                    self.execute('ROLLBACK', null, function() {\r\n                                        //st flag to false\r\n                                        self.__transaction = false;\r\n                                        //call callback\r\n                                        callback.bind(self)(error);\r\n                                    });\r\n                                }\r\n                                else {\r\n                                    //commit transaction\r\n                                    self.execute('COMMIT', null, function(err) {\r\n                                        //set flag to false\r\n                                        self.__transaction = false;\r\n                                        //call callback\r\n                                        callback.bind(self)(err);\r\n                                    });\r\n                                }\r\n                            });\r\n                        }\r\n                        catch(err) {\r\n                            //rollback transaction\r\n                            self.execute('ROLLBACK', null, function(err) {\r\n                                //set flag to false\r\n                                self.__transaction = false;\r\n                                //call callback\r\n                                callback.bind(self)(err);\r\n                            });\r\n                        }\r\n\r\n                    }\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Executes an operation against database and returns the results.\r\n     * @param {DataModelBatch} batch\r\n     * @param {Function} callback\r\n     */\r\n    executeBatch(batch, callback) {\r\n        callback = callback || function() {};\r\n        callback(new Error('DataAdapter.executeBatch() is obsolete. Use DataAdapter.executeInTransaction() instead.'));\r\n    }\r\n\r\n    /**\r\n     * Produces a new identity value for the given entity and attribute.\r\n     * @param {string} entity The target entity name\r\n     * @param {string} attribute The target attribute\r\n     * @param {Function=} callback\r\n     */\r\n    selectIdentity(entity, attribute, callback) {\r\n\r\n        const self = this;\r\n\r\n        const migration = {\r\n            appliesTo:'increment_id',\r\n            model:'increments',\r\n            description:'Increments migration (version 1.0)',\r\n            version:'1.0',\r\n            add:[\r\n                { name:'id', type:'Counter', primary:true },\r\n                { name:'entity', type:'Text', size:120 },\r\n                { name:'attribute', type:'Text', size:120 },\r\n                { name:'value', type:'Integer' }\r\n            ]\r\n        };\r\n        //ensure increments entity\r\n        self.migrate(migration, function(err)\r\n        {\r\n            //throw error if any\r\n            if (err) { callback.bind(self)(err); return; }\r\n\r\n            self.execute('SELECT * FROM increment_id WHERE entity=? AND attribute=?', [entity, attribute], function(err, result) {\r\n                if (err) { callback.bind(self)(err); return; }\r\n                if (result.length===0) {\r\n                    //get max value by querying the given entity\r\n                    const q = QueryExpression.create(entity).select(QueryField.create().max(attribute));\r\n                    self.execute(q,null, function(err, result) {\r\n                        if (err) { callback.bind(self)(err); return; }\r\n                        let value = 1;\r\n                        if (result.length>0) {\r\n                            value = parseInt(result[0][attribute]) + 1;\r\n                        }\r\n                        self.execute('INSERT INTO increment_id(entity, attribute, value) VALUES (?,?,?)',[entity, attribute, value], function(err) {\r\n                            //throw error if any\r\n                            if (err) { callback.bind(self)(err); return; }\r\n                            //return new increment value\r\n                            callback.bind(self)(err, value);\r\n                        });\r\n                    });\r\n                }\r\n                else {\r\n                    //get new increment value\r\n                    const value = parseInt(result[0].value) + 1;\r\n                    self.execute('UPDATE increment_id SET value=? WHERE id=?',[value, result[0].id], function(err) {\r\n                        //throw error if any\r\n                        if (err) { callback.bind(self)(err); return; }\r\n                        //return new increment value\r\n                        callback.bind(self)(err, value);\r\n                    });\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @param query {*}\r\n     * @param values {*}\r\n     * @param {function} callback\r\n     */\r\n    execute(query, values, callback) {\r\n        const self = this;\r\n        let sql = null;\r\n        try {\r\n\r\n            if (typeof query === 'string') {\r\n                sql = query;\r\n            }\r\n            else {\r\n                //format query expression or any object that may be act as query expression\r\n                const formatter = new MySqlFormatter();\r\n                formatter.settings.nameFormat = MySqlAdapter.NAME_FORMAT;\r\n                sql = formatter.format(query);\r\n            }\r\n            //validate sql statement\r\n            if (typeof sql !== 'string') {\r\n                callback.bind(self)(new Error('The executing command is of the wrong type or empty.'));\r\n                return;\r\n            }\r\n            //ensure connection\r\n            self.open(function(err) {\r\n                if (err) {\r\n                    callback.bind(self)(err);\r\n                }\r\n                else {\r\n                    let startTime;\r\n                    if (process.env.NODE_ENV==='development') {\r\n                        startTime = new Date().getTime();\r\n                    }\r\n                    //execute raw command\r\n                    self.rawConnection.query(sql, values, function(err, result) {\r\n                        if (process.env.NODE_ENV==='development') {\r\n                            TraceUtils.log(util.format('SQL (Execution Time:%sms):%s, Parameters:%s', (new Date()).getTime()-startTime, sql, JSON.stringify(values)));\r\n                        }\r\n                        callback.bind(self)(err, result);\r\n                    });\r\n                }\r\n            });\r\n        }\r\n        catch (err) {\r\n            callback.bind(self)(err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Formats an object based on the format string provided. Valid formats are:\r\n     * %t : Formats a field and returns field type definition\r\n     * %f : Formats a field and returns field name\r\n     * @param  {string} format\r\n     * @param {*} obj\r\n     */\r\n    static format(format, obj) {\r\n        let result = format;\r\n        if (/%t/.test(format))\r\n            result = result.replace(/%t/g,MySqlAdapter.formatType(obj));\r\n        if (/%f/.test(format))\r\n            result = result.replace(/%f/g,obj.name);\r\n        return result;\r\n    }\r\n\r\n    static formatType(field) {\r\n        const size = parseInt(field.size);\r\n        const scale = parseInt(field.scale);\r\n        let s = 'varchar(512) NULL';\r\n        const type=field.type;\r\n        switch (type)\r\n        {\r\n            case 'Boolean':\r\n                s = 'tinyint(1)';\r\n                break;\r\n            case 'Byte':\r\n                s = 'tinyint(3) unsigned';\r\n                break;\r\n            case 'Number':\r\n            case 'Float':\r\n                s = 'float';\r\n                break;\r\n            case 'Counter':\r\n                return 'int(11) auto_increment not null';\r\n            case 'Currency':\r\n                s =  'decimal(19,4)';\r\n                break;\r\n            case 'Decimal':\r\n                s =  util.format('decimal(%s,%s)', (size>0 ? size : 19),(scale>0 ? scale : 8));\r\n                break;\r\n            case 'Date':\r\n                s = 'date';\r\n                break;\r\n            case 'DateTime':\r\n            case 'Time':\r\n                s = 'timestamp';\r\n                break;\r\n            case 'Integer':\r\n            case 'Duration':\r\n                s = 'int(11)';\r\n                break;\r\n            case 'URL':\r\n            case 'Text':\r\n                s = size>0 ?  `varchar(${size})` : 'varchar(512)';\r\n                break;\r\n            case 'Note':\r\n                s = size>0 ?  `varchar(${size})` : 'text';\r\n                break;\r\n            case 'Image':\r\n            case 'Binary':\r\n                s = size > 0 ? `blob(${size})` : 'blob';\r\n                break;\r\n            case 'Guid':\r\n                s = 'varchar(36)';\r\n                break;\r\n            case 'Short':\r\n                s = 'smallint(6)';\r\n                break;\r\n            default:\r\n                s = 'int(11)';\r\n                break;\r\n        }\r\n        if (field.primary === true) {\r\n            s += ' not null';\r\n        }\r\n        else {\r\n            s += (typeof field.nullable === 'undefined') ? ' null': ((field.nullable===true || field.nullable === 1) ? ' null': ' not null');\r\n\r\n        }\r\n        return s;\r\n    }\r\n\r\n    /**\r\n     * @param {string} name\r\n     * @param {QueryExpression} query\r\n     * @param {Function} callback\r\n     */\r\n    createView(name, query, callback) {\r\n        this.view(name).create(query, callback);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param  {DataModelMigration|*} obj - An Object that represents the data model scheme we want to migrate\r\n     * @param {Function} callback\r\n     */\r\n    migrate(obj, callback) {\r\n        if (obj===null)\r\n            return;\r\n        const self = this;\r\n        const migration = obj;\r\n        if (migration.appliesTo===null)\r\n            throw new Error(\"Model name is undefined\");\r\n        self.open(function(err) {\r\n            if (err) {\r\n                callback.bind(self)(err);\r\n            }\r\n            else {\r\n                async.waterfall([\r\n                    //1. Check migrations table existence\r\n                    function(cb) {\r\n                        self.table('migrations').exists(function(err, exists) {\r\n                            if (err) { return cb(err); }\r\n                            cb(null, exists);\r\n                        });\r\n                    },\r\n                    //2. Create migrations table if not exists\r\n                    function(arg, cb) {\r\n                        if (arg>0) { return cb(null, 0); }\r\n                        self.table('migrations').create([\r\n                            { name:'id', type:'Counter', primary:true, nullable:false  },\r\n                            { name:'appliesTo', type:'Text', size:'80', nullable:false  },\r\n                            { name:'model', type:'Text', size:'120', nullable:true  },\r\n                            { name:'description', type:'Text', size:'512', nullable:true  },\r\n                            { name:'version', type:'Text', size:'40', nullable:false  }\r\n                        ], function(err) {\r\n                            if (err) { return cb(err); }\r\n                            cb(null,0);\r\n                        });\r\n                    },\r\n                    //3. Check if migration has already been applied\r\n                    function(arg, cb) {\r\n                        self.execute('SELECT COUNT(*) AS `count` FROM `migrations` WHERE `appliesTo`=? and `version`=?',\r\n                            [migration.appliesTo, migration.version], function(err, result) {\r\n                                if (err) { return cb(err); }\r\n                                cb(null, result[0].count);\r\n                            });\r\n                    },\r\n                    //4a. Check table existence\r\n                    function(arg, cb) {\r\n                        //migration has already been applied (set migration.updated=true)\r\n                        if (arg>0) { obj.updated=true; return cb(null, -1); }\r\n                        self.table(migration.appliesTo).exists(function(err, exists) {\r\n                            if (err) { return cb(err); }\r\n                            cb(null, exists);\r\n                        });\r\n                    },\r\n                    //4b. Migrate target table (create or alter)\r\n                    function(arg, cb) {\r\n                        //migration has already been applied\r\n                        if (arg<0) { return cb(null, arg); }\r\n                        if (arg===0) {\r\n                            //create table\r\n                            return self.table(migration.appliesTo).create(migration.add, function(err) {\r\n                                if (err) { return cb(err); }\r\n                                cb(null, 1);\r\n                            });\r\n                        }\r\n                        //columns to be removed (unsupported)\r\n                        if (_.isArray(migration.remove)) {\r\n                            if (migration.remove.length>0) {\r\n                                return cb(new Error('Data migration remove operation is not supported by this adapter.'));\r\n                            }\r\n                        }\r\n                        //columns to be changed (unsupported)\r\n                        if (_.isArray(migration.change)) {\r\n                            if (migration.change.length>0) {\r\n                                return cb(new Error('Data migration change operation is not supported by this adapter. Use add collection instead.'));\r\n                            }\r\n                        }\r\n                        let column, newType, oldType;\r\n                        if (_.isArray(migration.add)) {\r\n                            //init change collection\r\n                            migration.change = [];\r\n                            //get table columns\r\n                            self.table(migration.appliesTo).columns(function(err, columns) {\r\n                                if (err) { return cb(err); }\r\n                                for (let i = 0; i < migration.add.length; i++) {\r\n                                    const x = migration.add[i];\r\n                                    column = _.find(columns, function(y) { return (y.name===x.name); });\r\n                                    if (column) {\r\n                                        //if column is primary key remove it from collection\r\n                                        if (column.primary) {\r\n                                            migration.add.splice(i, 1);\r\n                                            i-=1;\r\n                                        }\r\n                                        else {\r\n                                            //get new type\r\n                                            newType = MySqlAdapter.format('%t', x);\r\n                                            //get old type\r\n                                            oldType = column.type1.replace(/\\s+$/,'') + ((column.nullable===true || column.nullable === 1) ? ' null' : ' not null');\r\n                                            //remove column from collection\r\n                                            migration.add.splice(i, 1);\r\n                                            i-=1;\r\n                                            if (newType !== oldType) {\r\n                                                //add column to alter collection\r\n                                                migration.change.push(x);\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                }\r\n                                //alter table\r\n                                const targetTable = self.table(migration.appliesTo);\r\n                                //add new columns (if any)\r\n                                targetTable.add(migration.add, function(err) {\r\n                                    if (err) { return cb(err); }\r\n                                    //modify columns (if any)\r\n                                    targetTable.change(migration.change, function(err) {\r\n                                        if (err) { return cb(err); }\r\n                                        cb(null, 1);\r\n                                    });\r\n                                });\r\n                            });\r\n                        }\r\n                        else {\r\n                            cb(new Error('Invalid migration data.'));\r\n                        }\r\n                    },\r\n                    //Apply data model indexes\r\n                    function (arg, cb) {\r\n                        if (arg<=0) { return cb(null, arg); }\r\n                        if (migration.indexes) {\r\n                            const tableIndexes = self.indexes(migration.appliesTo);\r\n                            //enumerate migration constraints\r\n                            async.eachSeries(migration.indexes, function(index, indexCallback) {\r\n                                tableIndexes.create(index.name, index.columns, indexCallback);\r\n                            }, function(err) {\r\n                                //throw error\r\n                                if (err) { return cb(err); }\r\n                                //or return success flag\r\n                                return cb(null, 1);\r\n                            });\r\n                        }\r\n                        else {\r\n                            //do nothing and exit\r\n                            return cb(null, 1);\r\n                        }\r\n                    },\r\n                    function(arg, cb) {\r\n                        if (arg>0) {\r\n                            //log migration to database\r\n                            self.execute('INSERT INTO `migrations` (`appliesTo`,`model`,`version`,`description`) VALUES (?,?,?,?)', [migration.appliesTo,\r\n                                migration.model,\r\n                                migration.version,\r\n                                migration.description ], function(err) {\r\n                                if (err) { return cb(err); }\r\n                                return cb(null, 1);\r\n                            });\r\n                        }\r\n                        else\r\n                            cb(null, arg);\r\n\r\n                    }\r\n                ], function(err, result) {\r\n                    callback(err, result);\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    table(name) {\r\n        const self = this;\r\n\r\n        return {\r\n            /**\r\n             * @param {function(Error,Boolean=)} callback\r\n             */\r\n            exists:function(callback) {\r\n                callback = callback || function() {};\r\n                self.execute('SELECT COUNT(*) AS `count` FROM information_schema.TABLES WHERE TABLE_NAME=? AND TABLE_SCHEMA=DATABASE()',\r\n                    [ name ], function(err, result) {\r\n                        if (err) { return callback(err); }\r\n                        callback(null, result[0].count);\r\n                    });\r\n            },\r\n            /**\r\n             * @param {function(Error,string=)} callback\r\n             */\r\n            version:function(callback) {\r\n                callback = callback || function() {};\r\n                self.execute('SELECT MAX(`version`) AS `version` FROM `migrations` WHERE `appliesTo`=?',\r\n                    [name], function(err, result) {\r\n                        if (err) { return callback(err); }\r\n                        if (result.length===0)\r\n                            callback(null, '0.0');\r\n                        else\r\n                            callback(null, result[0].version || '0.0');\r\n                    });\r\n            },\r\n            /**\r\n             * @param {function(Error=,Array=)} callback\r\n             */\r\n            columns:function(callback) {\r\n                callback = callback || function() {};\r\n                self.execute('SELECT COLUMN_NAME AS `name`, DATA_TYPE as `type`, ' +\r\n                    'CHARACTER_MAXIMUM_LENGTH as `size`,CASE WHEN IS_NULLABLE=\\'YES\\' THEN 1 ELSE 0 END AS `nullable`, ' +\r\n                    'NUMERIC_PRECISION as `precision`, NUMERIC_SCALE as `scale`, ' +\r\n                    'CASE WHEN COLUMN_KEY=\\'PRI\\' THEN 1 ELSE 0 END AS `primary`, ' +\r\n                    'CONCAT(COLUMN_TYPE, (CASE WHEN EXTRA = NULL THEN \\'\\' ELSE CONCAT(\\' \\',EXTRA) END)) AS `type1` ' +\r\n                    'FROM information_schema.COLUMNS WHERE TABLE_NAME=? AND TABLE_SCHEMA=DATABASE()',\r\n                    [ name ], function(err, result) {\r\n                        if (err) { return callback(err); }\r\n                        callback(null, result);\r\n                    });\r\n            },\r\n            /**\r\n             * @param {Array} fields\r\n             * @param {Function} callback\r\n             */\r\n            create: function(fields, callback) {\r\n                callback = callback || function() {};\r\n                fields = fields || [];\r\n                if (!_.isArray(fields)) {\r\n                    return callback(new Error('Invalid argument type. Expected Array.'));\r\n                }\r\n                if (fields.length === 0) {\r\n                    return callback(new Error('Invalid argument. Fields collection cannot be empty.'));\r\n                }\r\n                let strFields = _.map(_.filter(fields,(x) => { return !x.oneToMany; }),\r\n                    (x) => {\r\n                        return MySqlAdapter.format('`%f` %t', x);\r\n                    }).join(', ');\r\n                //add primary key constraint\r\n                const strPKFields = _.map(_.filter(fields, (x) => {\r\n                    return (x.primary === true || x.primary === 1);\r\n                }), (x) => {\r\n                    return MySqlAdapter.format('`%f`', x);\r\n                }).join(', ');\r\n                if (strPKFields.length>0) {\r\n                    strFields += ', ' + util.format('PRIMARY KEY (%s)', strPKFields);\r\n                }\r\n                const sql = util.format('CREATE TABLE %s (%s)', name, strFields);\r\n                self.execute(sql, null, function(err) {\r\n                    callback(err);\r\n                });\r\n            },\r\n            /**\r\n             * Alters the table by adding an array of fields\r\n             * @param {{name:string,type:string,primary:boolean|number,nullable:boolean|number,size:number,oneToMany:boolean}[]|*} fields\r\n             * @param callback\r\n             */\r\n            add:function(fields, callback) {\r\n                callback = callback || function() {};\r\n                callback = callback || function() {};\r\n                fields = fields || [];\r\n                if (!_.isArray(fields)) {\r\n                    //invalid argument exception\r\n                    return callback(new Error('Invalid argument type. Expected Array.'));\r\n                }\r\n                if (fields.length === 0) {\r\n                    //do nothing\r\n                    return callback();\r\n                }\r\n                const formatter = new MySqlFormatter();\r\n                const strTable = formatter.escapeName(name);\r\n                //generate SQL statement\r\n                const sql = _.map(fields, function(x) {\r\n                    return MySqlAdapter.format('ALTER TABLE ' + strTable + ' ADD COLUMN `%f` %t', x);\r\n                }).join(';');\r\n                self.execute(sql, [], function(err) {\r\n                    callback(err);\r\n                });\r\n            },\r\n            /**\r\n             * Alters the table by modifying an array of fields\r\n             * @param {{name:string,type:string,primary:boolean|number,nullable:boolean|number,size:number,oneToMany:boolean}[]|*} fields\r\n             * @param callback\r\n             */\r\n            change:function(fields, callback) {\r\n                callback = callback || function() {};\r\n                callback = callback || function() {};\r\n                fields = fields || [];\r\n                if (!_.isArray(fields)) {\r\n                    //invalid argument exception\r\n                    return callback(new Error('Invalid argument type. Expected Array.'));\r\n                }\r\n                if (fields.length === 0) {\r\n                    //do nothing\r\n                    return callback();\r\n                }\r\n                const formatter = new MySqlFormatter();\r\n                const strTable = formatter.escapeName(name);\r\n                //generate SQL statement\r\n                const sql = _.map(fields, function(x) {\r\n                    return MySqlAdapter.format('ALTER TABLE ' + strTable + ' MODIFY COLUMN `%f` %t', x);\r\n                }).join(';');\r\n                self.execute(sql, [], function(err) {\r\n                    callback(err);\r\n                });\r\n            }\r\n        };\r\n    }\r\n\r\n    view(name) {\r\n        const self = this;\r\n        let owner;\r\n        let view;\r\n\r\n        const matches = /(\\w+)\\.(\\w+)/.exec(name);\r\n        if (matches) {\r\n            //get schema owner\r\n            owner = matches[1];\r\n            //get table name\r\n            view = matches[2];\r\n        }\r\n        else {\r\n            view = name;\r\n        }\r\n        return {\r\n            /**\r\n             * @param {function(Error,Boolean=)} callback\r\n             */\r\n            exists:function(callback) {\r\n                const sql = 'SELECT COUNT(*) AS `count` FROM information_schema.TABLES WHERE TABLE_NAME=? AND TABLE_TYPE=\\'VIEW\\' AND TABLE_SCHEMA=DATABASE()';\r\n                self.execute(sql, [name], function(err, result) {\r\n                    if (err) { callback(err); return; }\r\n                    callback(null, (result[0].count>0));\r\n                });\r\n            },\r\n            /**\r\n             * @param {Function} callback\r\n             */\r\n            drop:function(callback) {\r\n                callback = callback || function() {};\r\n                self.open(function(err) {\r\n                    if (err) { return callback(err); }\r\n                    const sql = 'SELECT COUNT(*) AS `count` FROM information_schema.TABLES WHERE TABLE_NAME=? AND TABLE_TYPE=\\'VIEW\\' AND TABLE_SCHEMA=DATABASE()';\r\n                    self.execute(sql, [name], function(err, result) {\r\n                        if (err) { return callback(err); }\r\n                        const exists = (result[0].count>0);\r\n                        if (exists) {\r\n                            const sql = util.format('DROP VIEW `%s`',name);\r\n                            self.execute(sql, undefined, function(err) {\r\n                                if (err) { callback(err); return; }\r\n                                callback();\r\n                            });\r\n                        }\r\n                        else {\r\n                            callback();\r\n                        }\r\n                    });\r\n                });\r\n            },\r\n            /**\r\n             * @param {QueryExpression|*} q\r\n             * @param {Function} callback\r\n             */\r\n            create:function(q, callback) {\r\n                const thisArg = this;\r\n                self.executeInTransaction(function(tr) {\r\n                    thisArg.drop(function(err) {\r\n                        if (err) { tr(err); return; }\r\n                        try {\r\n                            let sql = util.format('CREATE VIEW `%s` AS ',name);\r\n                            const formatter = new MySqlFormatter();\r\n                            sql += formatter.format(q);\r\n                            self.execute(sql, [], tr);\r\n                        }\r\n                        catch(e) {\r\n                            tr(e);\r\n                        }\r\n                    });\r\n                }, function(err) {\r\n                    callback(err);\r\n                });\r\n\r\n            }\r\n        };\r\n    }\r\n\r\n    indexes(table) {\r\n        const self = this, formatter = new MySqlFormatter();\r\n        return {\r\n            list: function (callback) {\r\n                const this1 = this;\r\n                if (this1.hasOwnProperty('indexes_')) {\r\n                    return callback(null, this1['indexes_']);\r\n                }\r\n                self.execute(util.format(\"SHOW INDEXES FROM `%s`\", table), null , function (err, result) {\r\n                    if (err) { return callback(err); }\r\n                    const indexes = [];\r\n                    _.forEach(result, function(x) {\r\n                        const obj = _.find(indexes, function(y) { return y.name === x['Key_name']; });\r\n                        if (typeof obj === 'undefined') {\r\n                            indexes.push({\r\n                                name:x['Key_name'],\r\n                                columns:[ x['Column_name'] ]\r\n                            });\r\n                        }\r\n                        else {\r\n                            obj.columns.push(x['Column_name']);\r\n                        }\r\n                    });\r\n                    return callback(null, indexes);\r\n                });\r\n            },\r\n            /**\r\n             * @param {string} name\r\n             * @param {Array|string} columns\r\n             * @param {Function} callback\r\n             */\r\n            create: function(name, columns, callback) {\r\n                const cols = [];\r\n                if (typeof columns === 'string') {\r\n                    cols.push(columns);\r\n                }\r\n                else if (_.isArray(columns)) {\r\n                    cols.push.apply(cols,columns);\r\n                }\r\n                else {\r\n                    return callback(new Error(\"Invalid parameter. Columns parameter must be a string or an array of strings.\"));\r\n                }\r\n                const thisArg = this;\r\n                thisArg.list(function(err, indexes) {\r\n\r\n                    if (err) { return callback(err); }\r\n                    const ix =_.find(indexes, function(x) { return x.name === name; });\r\n                    //format create index SQL statement\r\n                    const sqlCreateIndex = util.format(\"CREATE INDEX %s ON %s(%s)\",\r\n                        formatter.escapeName(name),\r\n                        formatter.escapeName(table),\r\n                        _.map(cols, function(x) {\r\n                            return formatter.escapeName(x);\r\n                        }).join(\",\"));\r\n                    if (typeof ix === 'undefined' || ix === null) {\r\n                        self.execute(sqlCreateIndex, [], callback);\r\n                    }\r\n                    else {\r\n                        let nCols = cols.length;\r\n                        //enumerate existing columns\r\n                        _.forEach(ix.columns, function(x) {\r\n                            if (cols.indexOf(x)>=0) {\r\n                                //column exists in index\r\n                                nCols -= 1;\r\n                            }\r\n                        });\r\n                        if (nCols>0) {\r\n                            //drop index\r\n                            thisArg.drop(name, function(err) {\r\n                                if (err) { return callback(err); }\r\n                                //and create it\r\n                                self.execute(sqlCreateIndex, [], callback);\r\n                            });\r\n                        }\r\n                        else {\r\n                            //do nothing\r\n                            return callback();\r\n                        }\r\n                    }\r\n                });\r\n\r\n\r\n            },\r\n            drop: function(name, callback) {\r\n                if (typeof name !== 'string') {\r\n                    return callback(new Error(\"Name must be a valid string.\"));\r\n                }\r\n                this.list(function(err, indexes) {\r\n                    if (err) { return callback(err); }\r\n                    const exists = typeof _.find(indexes, function(x) { return x.name === name; }) !== 'undefined';\r\n                    if (!exists) {\r\n                        return callback();\r\n                    }\r\n                    self.execute(util.format(\"DROP INDEX %s ON %s\", formatter.escapeName(name), formatter.escapeName(table)), [], callback);\r\n                });\r\n            }\r\n        };\r\n    }\r\n\r\n    queryFormat(query, values) {\r\n        if (!values) return query;\r\n        const self = this;\r\n        return query.replace(/:(\\w+)/g, function (txt, key) {\r\n            if (values.hasOwnProperty(key)) {\r\n                return self.escape(values[key]);\r\n            }\r\n            return txt;\r\n        }.bind(this));\r\n    }\r\n}\r\n\r\nfunction zeroPad(number, length) {\r\n    number = number || 0;\r\n    let res = number.toString();\r\n    while (res.length < length) {\r\n        res = '0' + res;\r\n    }\r\n    return res;\r\n}\r\n\r\n/**\r\n * @class\r\n * @augments {SqlFormatter}\r\n */\r\nexport class MySqlFormatter extends SqlFormatter {\r\n    /**\r\n     * @constructor\r\n     */\r\n    constructor() {\r\n        super();\r\n        this.settings = {\r\n            nameFormat:MySqlFormatter.NAME_FORMAT,\r\n            forceAlias:true\r\n        };\r\n    }\r\n\r\n    escapeName(name) {\r\n        if (typeof name === 'string') {\r\n            if (/^(\\w+)\\.(\\w+)$/g.test(name)) {\r\n                return name.replace(/(\\w+)/g, MySqlFormatter.NAME_FORMAT);\r\n            }\r\n            return name.replace(/(\\w+)$|^(\\w+)$/g, MySqlFormatter.NAME_FORMAT);\r\n        }\r\n        return name;\r\n    }\r\n\r\n    escape(value, unquoted) {\r\n\r\n        if (typeof value === 'boolean') { return value ? '1' : '0'; }\r\n        if (value instanceof Date) {\r\n            return this.escapeDate(value);\r\n        }\r\n        return super.escape.bind(this)(value, unquoted);\r\n    }\r\n\r\n    /**\r\n     * @param {Date|*} val\r\n     * @returns {string}\r\n     */\r\n    escapeDate(val) {\r\n        const year   = val.getFullYear();\r\n        const month  = zeroPad(val.getMonth() + 1, 2);\r\n        const day    = zeroPad(val.getDate(), 2);\r\n        const hour   = zeroPad(val.getHours(), 2);\r\n        const minute = zeroPad(val.getMinutes(), 2);\r\n        const second = zeroPad(val.getSeconds(), 2);\r\n        //var millisecond = zeroPad(val.getMilliseconds(), 3);\r\n        //format timezone\r\n        const offset = val.getTimezoneOffset(), timezone = (offset<=0 ? '+' : '-') + zeroPad(-Math.floor(offset/60),2) + ':' + zeroPad(offset%60,2);\r\n        const datetime = year + '-' + month + '-' + day + ' ' + hour + ':' + minute + ':' + second;\r\n        //convert timestamp to mysql server timezone (by using date object timezone offset)\r\n        return util.format(\"CONVERT_TZ('%s','%s', @@session.time_zone)\", datetime, timezone);\r\n    }\r\n}\r\n\r\nMySqlFormatter.NAME_FORMAT = '`$1`';\r\n\r\n/**\r\n * Creates an instance of MySqlAdapter object that represents a MySql database connection.\r\n * @param {*} options An object that represents the properties of the underlying database connection.\r\n * @returns {*}\r\n */\r\nexport function createInstance(options) {\r\n    return new MySqlAdapter(options);\r\n}"]}