{"version":3,"sources":["index.es6"],"names":["createInstance","mysql","async","util","_","SqlFormatter","QueryExpression","QueryField","TraceUtils","MySqlAdapter","options","rawConnection","connectionPooling","callback","self","offset","Date","getTimezoneOffset","timezone","zeroPad","Math","floor","pool","createPool","getConnection","err","connection","execute","createConnection","connect","release","end","log","fn","open","bind","__transaction","error","batch","Error","entity","attribute","migration","appliesTo","model","description","version","add","name","type","primary","size","migrate","result","length","q","create","select","max","value","parseInt","id","query","values","sql","formatter","MySqlFormatter","settings","nameFormat","NAME_FORMAT","format","startTime","process","env","NODE_ENV","getTime","JSON","stringify","view","obj","db","waterfall","cb","table","exists","arg","nullable","count","updated","isArray","remove","change","column","newType","oldType","columns","x","i","find","y","splice","type1","replace","push","targetTable","indexes","tableIndexes","eachSeries","index","indexCallback","fields","strFields","map","filter","oneToMany","join","strPKFields","strTable","escapeName","owner","matches","exec","drop","undefined","thisArg","executeInTransaction","tr","e","list","this1","hasOwnProperty","forEach","cols","apply","ix","sqlCreateIndex","nCols","indexOf","txt","key","escape","test","formatType","field","scale","s","number","res","toString","forceAlias","unquoted","escapeDate","val","year","getFullYear","month","getMonth","day","getDate","hour","getHours","minute","getMinutes","second","getSeconds","datetime"],"mappings":"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","file":"index.js","sourcesContent":["/**\n * MOST Web Framework\n * A JavaScript Web Framework\n * http://themost.io\n *\n * Copyright (c) 2014, Kyriakos Barbounakis k.barbounakis@gmail.com, Anthi Oikonomou anthioikonomou@gmail.com\n *\n * Released under the BSD3-Clause license\n * Date: 2014-01-25\n */\n'use strict';\nimport mysql from 'mysql';\nimport async from 'async';\nimport util from 'util';\nimport {_} from 'lodash';\nimport {SqlFormatter} from '@themost/query/formatter';\nimport {QueryExpression,QueryField} from \"@themost/query/query\";\nimport {TraceUtils} from \"themost/common/utils\";\n\n/**\n * @class\n * @constructor\n * @augments DataAdapter\n */\nexport class MySqlAdapter {\n    constructor(options) {\n        /**\n         * @private\n         * @type {Connection}\n         */\n        this.rawConnection = null;\n        /**\n         * Gets or sets database connection string\n         * @type {*}\n         */\n        this.options = options;\n        /**\n         * Gets or sets a boolean that indicates whether connection pooling is enabled or not.\n         * @type {boolean}\n         */\n        this.connectionPooling = false;\n\n    }\n\n    /**\n     * Opens database connection\n     */\n    open(callback) {\n        callback = callback || function() {};\n        const self = this;\n        if (this.rawConnection) {\n            return callback();\n        }\n        //get current timezone\n        const offset = (new Date()).getTimezoneOffset(), timezone = (offset<=0 ? '+' : '-') + zeroPad(-Math.floor(offset/60),2) + ':' + zeroPad(offset%60,2);\n        if (self.connectionPooling) {\n            if (typeof MySqlAdapter.pool === 'undefined') {\n                MySqlAdapter.pool = mysql.createPool(this.options);\n            }\n            MySqlAdapter.pool.getConnection(function(err, connection) {\n                if (err) {\n                    return callback(err);\n                }\n                else {\n                    self.rawConnection = connection;\n                    self.execute(\"SET time_zone=?\", timezone, function(err) {\n                        return callback(err);\n                    });\n                }\n            });\n        }\n        else {\n            self.rawConnection = mysql.createConnection(this.options);\n            self.rawConnection.connect(function(err) {\n                if (err) {\n                    return callback(err);\n                }\n                else {\n                    //set connection timezone\n                    self.execute(\"SET time_zone=?\", timezone, function(err) {\n                        return callback(err);\n                    });\n                }\n            });\n        }\n    }\n\n    /**\n     * @param {Function} callback\n     */\n    close(callback) {\n        const self = this;\n        callback = callback || function() {};\n        if (!self.rawConnection)\n            return;\n        if (self.connectionPooling) {\n            self.rawConnection.release();\n            self.rawConnection=null;\n        }\n        else {\n            self.rawConnection.end(function(err) {\n                if (err) {\n                    TraceUtils.log(err);\n                    //do nothing\n                    self.rawConnection=null;\n                }\n                callback();\n            });\n        }\n    }\n\n    /**\n     * Begins a data transaction and executes the given function\n     * @param {Function} fn\n     * @param {Function} callback\n     */\n    executeInTransaction(fn, callback) {\n        const self = this;\n        //ensure callback\n        callback = callback || function () {};\n        //ensure that database connection is open\n        self.open(function(err) {\n            if (err) {\n                return callback.bind(self)(err);\n            }\n            //execution is already in transaction\n            if (self.__transaction) {\n                //so invoke method\n                fn.bind(self)(function(err)\n                {\n                    //call callback\n                    callback.bind(self)(err);\n                });\n            }\n            else {\n                self.execute('START TRANSACTION',null, function(err) {\n                    if (err) {\n                        callback.bind(self)(err);\n                    }\n                    else {\n                        //set transaction flag to true\n                        self.__transaction = true;\n                        try {\n                            //invoke method\n                            fn.bind(self)(function(error)\n                            {\n                                if (error) {\n                                    //rollback transaction\n                                    self.execute('ROLLBACK', null, function() {\n                                        //st flag to false\n                                        self.__transaction = false;\n                                        //call callback\n                                        callback.bind(self)(error);\n                                    });\n                                }\n                                else {\n                                    //commit transaction\n                                    self.execute('COMMIT', null, function(err) {\n                                        //set flag to false\n                                        self.__transaction = false;\n                                        //call callback\n                                        callback.bind(self)(err);\n                                    });\n                                }\n                            });\n                        }\n                        catch(err) {\n                            //rollback transaction\n                            self.execute('ROLLBACK', null, function(err) {\n                                //set flag to false\n                                self.__transaction = false;\n                                //call callback\n                                callback.bind(self)(err);\n                            });\n                        }\n\n                    }\n                });\n            }\n        });\n    }\n\n    /**\n     * Executes an operation against database and returns the results.\n     * @param {DataModelBatch} batch\n     * @param {Function} callback\n     */\n    executeBatch(batch, callback) {\n        callback = callback || function() {};\n        callback(new Error('DataAdapter.executeBatch() is obsolete. Use DataAdapter.executeInTransaction() instead.'));\n    }\n\n    /**\n     * Produces a new identity value for the given entity and attribute.\n     * @param {string} entity The target entity name\n     * @param {string} attribute The target attribute\n     * @param {Function=} callback\n     */\n    selectIdentity(entity, attribute, callback) {\n\n        const self = this;\n\n        const migration = {\n            appliesTo:'increment_id',\n            model:'increments',\n            description:'Increments migration (version 1.0)',\n            version:'1.0',\n            add:[\n                { name:'id', type:'Counter', primary:true },\n                { name:'entity', type:'Text', size:120 },\n                { name:'attribute', type:'Text', size:120 },\n                { name:'value', type:'Integer' }\n            ]\n        };\n        //ensure increments entity\n        self.migrate(migration, function(err)\n        {\n            //throw error if any\n            if (err) { callback.bind(self)(err); return; }\n\n            self.execute('SELECT * FROM increment_id WHERE entity=? AND attribute=?', [entity, attribute], function(err, result) {\n                if (err) { callback.bind(self)(err); return; }\n                if (result.length===0) {\n                    //get max value by querying the given entity\n                    const q = QueryExpression.create(entity).select(QueryField.create().max(attribute));\n                    self.execute(q,null, function(err, result) {\n                        if (err) { callback.bind(self)(err); return; }\n                        let value = 1;\n                        if (result.length>0) {\n                            value = parseInt(result[0][attribute]) + 1;\n                        }\n                        self.execute('INSERT INTO increment_id(entity, attribute, value) VALUES (?,?,?)',[entity, attribute, value], function(err) {\n                            //throw error if any\n                            if (err) { callback.bind(self)(err); return; }\n                            //return new increment value\n                            callback.bind(self)(err, value);\n                        });\n                    });\n                }\n                else {\n                    //get new increment value\n                    const value = parseInt(result[0].value) + 1;\n                    self.execute('UPDATE increment_id SET value=? WHERE id=?',[value, result[0].id], function(err) {\n                        //throw error if any\n                        if (err) { callback.bind(self)(err); return; }\n                        //return new increment value\n                        callback.bind(self)(err, value);\n                    });\n                }\n            });\n        });\n    }\n\n    /**\n     * @param query {*}\n     * @param values {*}\n     * @param {function} callback\n     */\n    execute(query, values, callback) {\n        const self = this;\n        let sql = null;\n        try {\n\n            if (typeof query === 'string') {\n                sql = query;\n            }\n            else {\n                //format query expression or any object that may be act as query expression\n                const formatter = new MySqlFormatter();\n                formatter.settings.nameFormat = MySqlAdapter.NAME_FORMAT;\n                sql = formatter.format(query);\n            }\n            //validate sql statement\n            if (typeof sql !== 'string') {\n                callback.bind(self)(new Error('The executing command is of the wrong type or empty.'));\n                return;\n            }\n            //ensure connection\n            self.open(function(err) {\n                if (err) {\n                    callback.bind(self)(err);\n                }\n                else {\n                    let startTime;\n                    if (process.env.NODE_ENV==='development') {\n                        startTime = new Date().getTime();\n                    }\n                    //execute raw command\n                    self.rawConnection.query(sql, values, function(err, result) {\n                        if (process.env.NODE_ENV==='development') {\n                            TraceUtils.log(util.format('SQL (Execution Time:%sms):%s, Parameters:%s', (new Date()).getTime()-startTime, sql, JSON.stringify(values)));\n                        }\n                        callback.bind(self)(err, result);\n                    });\n                }\n            });\n        }\n        catch (err) {\n            callback.bind(self)(err);\n        }\n    }\n\n    /**\n     * Formats an object based on the format string provided. Valid formats are:\n     * %t : Formats a field and returns field type definition\n     * %f : Formats a field and returns field name\n     * @param  {string} format\n     * @param {*} obj\n     */\n    static format(format, obj) {\n        let result = format;\n        if (/%t/.test(format))\n            result = result.replace(/%t/g,MySqlAdapter.formatType(obj));\n        if (/%f/.test(format))\n            result = result.replace(/%f/g,obj.name);\n        return result;\n    }\n\n    static formatType(field) {\n        const size = parseInt(field.size);\n        const scale = parseInt(field.scale);\n        let s = 'varchar(512) NULL';\n        const type=field.type;\n        switch (type)\n        {\n            case 'Boolean':\n                s = 'tinyint(1)';\n                break;\n            case 'Byte':\n                s = 'tinyint(3) unsigned';\n                break;\n            case 'Number':\n            case 'Float':\n                s = 'float';\n                break;\n            case 'Counter':\n                return 'int(11) auto_increment not null';\n            case 'Currency':\n                s =  'decimal(19,4)';\n                break;\n            case 'Decimal':\n                s =  util.format('decimal(%s,%s)', (size>0 ? size : 19),(scale>0 ? scale : 8));\n                break;\n            case 'Date':\n                s = 'date';\n                break;\n            case 'DateTime':\n            case 'Time':\n                s = 'timestamp';\n                break;\n            case 'Integer':\n            case 'Duration':\n                s = 'int(11)';\n                break;\n            case 'URL':\n            case 'Text':\n                s = size>0 ?  `varchar(${size})` : 'varchar(512)';\n                break;\n            case 'Note':\n                s = size>0 ?  `varchar(${size})` : 'text';\n                break;\n            case 'Image':\n            case 'Binary':\n                s = size > 0 ? `blob(${size})` : 'blob';\n                break;\n            case 'Guid':\n                s = 'varchar(36)';\n                break;\n            case 'Short':\n                s = 'smallint(6)';\n                break;\n            default:\n                s = 'int(11)';\n                break;\n        }\n        if (field.primary === true) {\n            s += ' not null';\n        }\n        else {\n            s += (typeof field.nullable === 'undefined') ? ' null': ((field.nullable===true || field.nullable === 1) ? ' null': ' not null');\n\n        }\n        return s;\n    }\n\n    /**\n     * @param {string} name\n     * @param {QueryExpression} query\n     * @param {Function} callback\n     */\n    createView(name, query, callback) {\n        this.view(name).create(query, callback);\n    }\n\n    /**\n     *\n     * @param  {DataModelMigration|*} obj - An Object that represents the data model scheme we want to migrate\n     * @param {Function} callback\n     */\n    migrate(obj, callback) {\n        if (obj===null)\n            return;\n        const self = this;\n        const migration = obj;\n        if (migration.appliesTo===null)\n            throw new Error(\"Model name is undefined\");\n        self.open(function(err) {\n            if (err) {\n                callback.bind(self)(err);\n            }\n            else {\n                const db = self.rawConnection;\n                async.waterfall([\n                    //1. Check migrations table existence\n                    function(cb) {\n                        self.table('migrations').exists(function(err, exists) {\n                            if (err) { return cb(err); }\n                            cb(null, exists);\n                        });\n                    },\n                    //2. Create migrations table if not exists\n                    function(arg, cb) {\n                        if (arg>0) { return cb(null, 0); }\n                        self.table('migrations').create([\n                            { name:'id', type:'Counter', primary:true, nullable:false  },\n                            { name:'appliesTo', type:'Text', size:'80', nullable:false  },\n                            { name:'model', type:'Text', size:'120', nullable:true  },\n                            { name:'description', type:'Text', size:'512', nullable:true  },\n                            { name:'version', type:'Text', size:'40', nullable:false  }\n                        ], function(err) {\n                            if (err) { return cb(err); }\n                            cb(null,0);\n                        });\n                    },\n                    //3. Check if migration has already been applied\n                    function(arg, cb) {\n                        self.execute('SELECT COUNT(*) AS `count` FROM `migrations` WHERE `appliesTo`=? and `version`=?',\n                            [migration.appliesTo, migration.version], function(err, result) {\n                                if (err) { return cb(err); }\n                                cb(null, result[0].count);\n                            });\n                    },\n                    //4a. Check table existence\n                    function(arg, cb) {\n                        //migration has already been applied (set migration.updated=true)\n                        if (arg>0) { obj.updated=true; return cb(null, -1); }\n                        self.table(migration.appliesTo).exists(function(err, exists) {\n                            if (err) { return cb(err); }\n                            cb(null, exists);\n                        });\n                    },\n                    //4b. Migrate target table (create or alter)\n                    function(arg, cb) {\n                        //migration has already been applied\n                        if (arg<0) { return cb(null, arg); }\n                        if (arg===0) {\n                            //create table\n                            return self.table(migration.appliesTo).create(migration.add, function(err) {\n                                if (err) { return cb(err); }\n                                cb(null, 1);\n                            });\n                        }\n                        //columns to be removed (unsupported)\n                        if (_.isArray(migration.remove)) {\n                            if (migration.remove.length>0) {\n                                return cb(new Error('Data migration remove operation is not supported by this adapter.'));\n                            }\n                        }\n                        //columns to be changed (unsupported)\n                        if (_.isArray(migration.change)) {\n                            if (migration.change.length>0) {\n                                return cb(new Error('Data migration change operation is not supported by this adapter. Use add collection instead.'));\n                            }\n                        }\n                        let column, newType, oldType;\n                        if (_.isArray(migration.add)) {\n                            //init change collection\n                            migration.change = [];\n                            //get table columns\n                            self.table(migration.appliesTo).columns(function(err, columns) {\n                                if (err) { return cb(err); }\n                                for (let i = 0; i < migration.add.length; i++) {\n                                    const x = migration.add[i];\n                                    column = _.find(columns, function(y) { return (y.name===x.name); });\n                                    if (column) {\n                                        //if column is primary key remove it from collection\n                                        if (column.primary) {\n                                            migration.add.splice(i, 1);\n                                            i-=1;\n                                        }\n                                        else {\n                                            //get new type\n                                            newType = MySqlAdapter.format('%t', x);\n                                            //get old type\n                                            oldType = column.type1.replace(/\\s+$/,'') + ((column.nullable===true || column.nullable === 1) ? ' null' : ' not null');\n                                            //remove column from collection\n                                            migration.add.splice(i, 1);\n                                            i-=1;\n                                            if (newType !== oldType) {\n                                                //add column to alter collection\n                                                migration.change.push(x);\n                                            }\n                                        }\n                                    }\n                                }\n                                //alter table\n                                const targetTable = self.table(migration.appliesTo);\n                                //add new columns (if any)\n                                targetTable.add(migration.add, function(err) {\n                                    if (err) { return cb(err); }\n                                    //modify columns (if any)\n                                    targetTable.change(migration.change, function(err) {\n                                        if (err) { return cb(err); }\n                                        cb(null, 1);\n                                    });\n                                });\n                            });\n                        }\n                        else {\n                            cb(new Error('Invalid migration data.'));\n                        }\n                    },\n                    //Apply data model indexes\n                    function (arg, cb) {\n                        if (arg<=0) { return cb(null, arg); }\n                        if (migration.indexes) {\n                            const tableIndexes = self.indexes(migration.appliesTo);\n                            //enumerate migration constraints\n                            async.eachSeries(migration.indexes, function(index, indexCallback) {\n                                tableIndexes.create(index.name, index.columns, indexCallback);\n                            }, function(err) {\n                                //throw error\n                                if (err) { return cb(err); }\n                                //or return success flag\n                                return cb(null, 1);\n                            });\n                        }\n                        else {\n                            //do nothing and exit\n                            return cb(null, 1);\n                        }\n                    },\n                    function(arg, cb) {\n                        if (arg>0) {\n                            //log migration to database\n                            self.execute('INSERT INTO `migrations` (`appliesTo`,`model`,`version`,`description`) VALUES (?,?,?,?)', [migration.appliesTo,\n                                migration.model,\n                                migration.version,\n                                migration.description ], function(err) {\n                                if (err) { return cb(err); }\n                                return cb(null, 1);\n                            });\n                        }\n                        else\n                            cb(null, arg);\n\n                    }\n                ], function(err, result) {\n                    callback(err, result);\n                });\n            }\n        });\n    }\n\n    table(name) {\n        const self = this;\n\n        return {\n            /**\n             * @param {function(Error,Boolean=)} callback\n             */\n            exists:function(callback) {\n                callback = callback || function() {};\n                self.execute('SELECT COUNT(*) AS `count` FROM information_schema.TABLES WHERE TABLE_NAME=? AND TABLE_SCHEMA=DATABASE()',\n                    [ name ], function(err, result) {\n                        if (err) { return callback(err); }\n                        callback(null, result[0].count);\n                    });\n            },\n            /**\n             * @param {function(Error,string=)} callback\n             */\n            version:function(callback) {\n                callback = callback || function() {};\n                self.execute('SELECT MAX(`version`) AS `version` FROM `migrations` WHERE `appliesTo`=?',\n                    [name], function(err, result) {\n                        if (err) { return callback(err); }\n                        if (result.length===0)\n                            callback(null, '0.0');\n                        else\n                            callback(null, result[0].version || '0.0');\n                    });\n            },\n            /**\n             * @param {function(Error=,Array=)} callback\n             */\n            columns:function(callback) {\n                callback = callback || function() {};\n                self.execute('SELECT COLUMN_NAME AS `name`, DATA_TYPE as `type`, ' +\n                    'CHARACTER_MAXIMUM_LENGTH as `size`,CASE WHEN IS_NULLABLE=\\'YES\\' THEN 1 ELSE 0 END AS `nullable`, ' +\n                    'NUMERIC_PRECISION as `precision`, NUMERIC_SCALE as `scale`, ' +\n                    'CASE WHEN COLUMN_KEY=\\'PRI\\' THEN 1 ELSE 0 END AS `primary`, ' +\n                    'CONCAT(COLUMN_TYPE, (CASE WHEN EXTRA = NULL THEN \\'\\' ELSE CONCAT(\\' \\',EXTRA) END)) AS `type1` ' +\n                    'FROM information_schema.COLUMNS WHERE TABLE_NAME=? AND TABLE_SCHEMA=DATABASE()',\n                    [ name ], function(err, result) {\n                        if (err) { return callback(err); }\n                        callback(null, result);\n                    });\n            },\n            /**\n             * @param {Array} fields\n             * @param {Function} callback\n             */\n            create: function(fields, callback) {\n                callback = callback || function() {};\n                fields = fields || [];\n                if (!_.isArray(fields)) {\n                    return callback(new Error('Invalid argument type. Expected Array.'));\n                }\n                if (fields.length === 0) {\n                    return callback(new Error('Invalid argument. Fields collection cannot be empty.'));\n                }\n                let strFields = _.map(_.filter(fields,(x) => { return !x.oneToMany; }),\n                    (x) => {\n                        return MySqlAdapter.format('`%f` %t', x);\n                    }).join(', ');\n                //add primary key constraint\n                const strPKFields = _.map(_.filter(fields, (x) => {\n                    return (x.primary === true || x.primary === 1);\n                }), (x) => {\n                    return MySqlAdapter.format('`%f`', x);\n                }).join(', ');\n                if (strPKFields.length>0) {\n                    strFields += ', ' + util.format('PRIMARY KEY (%s)', strPKFields);\n                }\n                const sql = util.format('CREATE TABLE %s (%s)', name, strFields);\n                self.execute(sql, null, function(err) {\n                    callback(err);\n                });\n            },\n            /**\n             * Alters the table by adding an array of fields\n             * @param {{name:string,type:string,primary:boolean|number,nullable:boolean|number,size:number,oneToMany:boolean}[]|*} fields\n             * @param callback\n             */\n            add:function(fields, callback) {\n                callback = callback || function() {};\n                callback = callback || function() {};\n                fields = fields || [];\n                if (!_.isArray(fields)) {\n                    //invalid argument exception\n                    return callback(new Error('Invalid argument type. Expected Array.'));\n                }\n                if (fields.length === 0) {\n                    //do nothing\n                    return callback();\n                }\n                const formatter = new MySqlFormatter();\n                const strTable = formatter.escapeName(name);\n                //generate SQL statement\n                const sql = _.map(fields, function(x) {\n                    return MySqlAdapter.format('ALTER TABLE ' + strTable + ' ADD COLUMN `%f` %t', x);\n                }).join(';');\n                self.execute(sql, [], function(err) {\n                    callback(err);\n                });\n            },\n            /**\n             * Alters the table by modifying an array of fields\n             * @param {{name:string,type:string,primary:boolean|number,nullable:boolean|number,size:number,oneToMany:boolean}[]|*} fields\n             * @param callback\n             */\n            change:function(fields, callback) {\n                callback = callback || function() {};\n                callback = callback || function() {};\n                fields = fields || [];\n                if (!_.isArray(fields)) {\n                    //invalid argument exception\n                    return callback(new Error('Invalid argument type. Expected Array.'));\n                }\n                if (fields.length === 0) {\n                    //do nothing\n                    return callback();\n                }\n                const formatter = new MySqlFormatter();\n                const strTable = formatter.escapeName(name);\n                //generate SQL statement\n                const sql = _.map(fields, function(x) {\n                    return MySqlAdapter.format('ALTER TABLE ' + strTable + ' MODIFY COLUMN `%f` %t', x);\n                }).join(';');\n                self.execute(sql, [], function(err) {\n                    callback(err);\n                });\n            }\n        };\n    }\n\n    view(name) {\n        const self = this;\n        let owner;\n        let view;\n\n        const matches = /(\\w+)\\.(\\w+)/.exec(name);\n        if (matches) {\n            //get schema owner\n            owner = matches[1];\n            //get table name\n            view = matches[2];\n        }\n        else {\n            view = name;\n        }\n        return {\n            /**\n             * @param {function(Error,Boolean=)} callback\n             */\n            exists:function(callback) {\n                const sql = 'SELECT COUNT(*) AS `count` FROM information_schema.TABLES WHERE TABLE_NAME=? AND TABLE_TYPE=\\'VIEW\\' AND TABLE_SCHEMA=DATABASE()';\n                self.execute(sql, [name], function(err, result) {\n                    if (err) { callback(err); return; }\n                    callback(null, (result[0].count>0));\n                });\n            },\n            /**\n             * @param {Function} callback\n             */\n            drop:function(callback) {\n                callback = callback || function() {};\n                self.open(function(err) {\n                    if (err) { return callback(err); }\n                    const sql = 'SELECT COUNT(*) AS `count` FROM information_schema.TABLES WHERE TABLE_NAME=? AND TABLE_TYPE=\\'VIEW\\' AND TABLE_SCHEMA=DATABASE()';\n                    self.execute(sql, [name], function(err, result) {\n                        if (err) { return callback(err); }\n                        const exists = (result[0].count>0);\n                        if (exists) {\n                            const sql = util.format('DROP VIEW `%s`',name);\n                            self.execute(sql, undefined, function(err) {\n                                if (err) { callback(err); return; }\n                                callback();\n                            });\n                        }\n                        else {\n                            callback();\n                        }\n                    });\n                });\n            },\n            /**\n             * @param {QueryExpression|*} q\n             * @param {Function} callback\n             */\n            create:function(q, callback) {\n                const thisArg = this;\n                self.executeInTransaction(function(tr) {\n                    thisArg.drop(function(err) {\n                        if (err) { tr(err); return; }\n                        try {\n                            let sql = util.format('CREATE VIEW `%s` AS ',name);\n                            const formatter = new MySqlFormatter();\n                            sql += formatter.format(q);\n                            self.execute(sql, [], tr);\n                        }\n                        catch(e) {\n                            tr(e);\n                        }\n                    });\n                }, function(err) {\n                    callback(err);\n                });\n\n            }\n        };\n    }\n\n    indexes(table) {\n        const self = this, formatter = new MySqlFormatter();\n        return {\n            list: function (callback) {\n                const this1 = this;\n                if (this1.hasOwnProperty('indexes_')) {\n                    return callback(null, this1['indexes_']);\n                }\n                self.execute(util.format(\"SHOW INDEXES FROM `%s`\", table), null , function (err, result) {\n                    if (err) { return callback(err); }\n                    const indexes = [];\n                    _.forEach(result, function(x) {\n                        const obj = _.find(indexes, function(y) { return y.name === x['Key_name']; });\n                        if (typeof obj === 'undefined') {\n                            indexes.push({\n                                name:x['Key_name'],\n                                columns:[ x['Column_name'] ]\n                            });\n                        }\n                        else {\n                            obj.columns.push(x['Column_name']);\n                        }\n                    });\n                    return callback(null, indexes);\n                });\n            },\n            /**\n             * @param {string} name\n             * @param {Array|string} columns\n             * @param {Function} callback\n             */\n            create: function(name, columns, callback) {\n                const cols = [];\n                if (typeof columns === 'string') {\n                    cols.push(columns);\n                }\n                else if (_.isArray(columns)) {\n                    cols.push.apply(cols,columns);\n                }\n                else {\n                    return callback(new Error(\"Invalid parameter. Columns parameter must be a string or an array of strings.\"));\n                }\n\n                this.list(function(err, indexes) {\n                    if (err) { return callback(err); }\n                    const ix =_.find(indexes, function(x) { return x.name === name; });\n                    //format create index SQL statement\n                    const sqlCreateIndex = util.format(\"CREATE INDEX %s ON %s(%s)\",\n                        formatter.escapeName(name),\n                        formatter.escapeName(table),\n                        _.map(cols, function(x) {\n                            return formatter.escapeName(x);\n                        }).join(\",\"));\n                    if (typeof ix === 'undefined' || ix === null) {\n                        self.execute(sqlCreateIndex, [], callback);\n                    }\n                    else {\n                        let nCols = cols.length;\n                        //enumerate existing columns\n                        _.forEach(ix.columns, function(x) {\n                            if (cols.indexOf(x)>=0) {\n                                //column exists in index\n                                nCols -= 1;\n                            }\n                        });\n                        if (nCols>0) {\n                            //drop index\n                            this.drop(name, function(err) {\n                                if (err) { return callback(err); }\n                                //and create it\n                                self.execute(sqlCreateIndex, [], callback);\n                            });\n                        }\n                        else {\n                            //do nothing\n                            return callback();\n                        }\n                    }\n                });\n\n\n            },\n            drop: function(name, callback) {\n                if (typeof name !== 'string') {\n                    return callback(new Error(\"Name must be a valid string.\"));\n                }\n                this.list(function(err, indexes) {\n                    if (err) { return callback(err); }\n                    const exists = typeof _.find(indexes, function(x) { return x.name === name; }) !== 'undefined';\n                    if (!exists) {\n                        return callback();\n                    }\n                    self.execute(util.format(\"DROP INDEX %s ON %s\", formatter.escapeName(name), formatter.escapeName(table)), [], callback);\n                });\n            }\n        };\n    }\n\n    queryFormat(query, values) {\n        if (!values) return query;\n        const self = this;\n        return query.replace(/:(\\w+)/g, function (txt, key) {\n            if (values.hasOwnProperty(key)) {\n                return self.escape(values[key]);\n            }\n            return txt;\n        }.bind(this));\n    }\n}\n\nfunction zeroPad(number, length) {\n    number = number || 0;\n    let res = number.toString();\n    while (res.length < length) {\n        res = '0' + res;\n    }\n    return res;\n}\n\n/**\n * @class\n * @augments {SqlFormatter}\n */\nexport class MySqlFormatter extends SqlFormatter {\n    /**\n     * @constructor\n     */\n    constructor() {\n        super();\n        this.settings = {\n            nameFormat:MySqlFormatter.NAME_FORMAT,\n            forceAlias:true\n        };\n    }\n\n    escapeName(name) {\n        if (typeof name === 'string') {\n            if (/^(\\w+)\\.(\\w+)$/g.test(name)) {\n                return name.replace(/(\\w+)/g, MySqlFormatter.NAME_FORMAT);\n            }\n            return name.replace(/(\\w+)$|^(\\w+)$/g, MySqlFormatter.NAME_FORMAT);\n        }\n        return name;\n    }\n\n    escape(value, unquoted) {\n\n        if (typeof value === 'boolean') { return value ? '1' : '0'; }\n        if (value instanceof Date) {\n            return this.escapeDate(value);\n        }\n        return super.escape.bind(this)(value, unquoted);\n    }\n\n    /**\n     * @param {Date|*} val\n     * @returns {string}\n     */\n    escapeDate(val) {\n        const year   = val.getFullYear();\n        const month  = zeroPad(val.getMonth() + 1, 2);\n        const day    = zeroPad(val.getDate(), 2);\n        const hour   = zeroPad(val.getHours(), 2);\n        const minute = zeroPad(val.getMinutes(), 2);\n        const second = zeroPad(val.getSeconds(), 2);\n        //var millisecond = zeroPad(val.getMilliseconds(), 3);\n        //format timezone\n        const offset = val.getTimezoneOffset(), timezone = (offset<=0 ? '+' : '-') + zeroPad(-Math.floor(offset/60),2) + ':' + zeroPad(offset%60,2);\n        const datetime = year + '-' + month + '-' + day + ' ' + hour + ':' + minute + ':' + second;\n        //convert timestamp to mysql server timezone (by using date object timezone offset)\n        return util.format(\"CONVERT_TZ('%s','%s', @@session.time_zone)\", datetime, timezone);\n    }\n}\n\nMySqlFormatter.NAME_FORMAT = '`$1`';\n\n/**\n * Creates an instance of MySqlAdapter object that represents a MySql database connection.\n * @param {*} options An object that represents the properties of the underlying database connection.\n * @returns {*}\n */\nexport function createInstance(options) {\n    return new MySqlAdapter(options);\n}"]}