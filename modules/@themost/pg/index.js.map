{"version":3,"sources":["index.es6"],"names":["createInstance","pg","async","util","_","SqlFormatter","QueryExpression","QueryField","SqlUtils","TraceUtils","types","setTypeParser","val","parseInt","parseFloat","PGSqlAdapter","options","rawConnection","transaction","port","host","self","Object","defineProperty","get","format","user","password","database","enumerable","configurable","callback","Client","connectionString","startTime","process","env","NODE_ENV","Date","getTime","connect","err","console","log","end","connection","stream","destroy","e","message","disconnect","query","values","prepare","sql","formatter","PGSqlFormatter","call","Error","open","prepared","result","JSON","stringify","rows","lastval","insertId","length","fn","entity","attribute","migration","appliesTo","model","description","version","add","name","type","primary","size","migrate","execute","q","create","select","max","value","id","batch","escapeName","executeInTransaction","tr","waterfall","cb","count","arg","settings","nameFormat","NAME_FORMAT","exists","has_sequence","columns","obj","test","replace","formatType","supportMigrations","table","args","strFields","map","filter","x","oneToMany","join","key","find","expressions","column","fname","findColumnFunc","columnName","remove","i","bind","k","deletedColumnName","toString","push","newSize","originalSize","fieldName","nullable","maxLength","change","field","scale","s","formatSelect","$take","$skip","concat","quoted","res","escape","unquoted","SINGLE_QUOTE_ESCAPE","DOUBLE_QUOTE_ESCAPE","p0","p1","isNullOrUndefined","pos","valueOf","prototype","$text","$regex"],"mappings":"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","file":"index.js","sourcesContent":["/**\n * @license\n * MOST Web Framework 2.0 Codename Blueshift\n * Copyright (c) 2014, Kyriakos Barbounakis k.barbounakis@gmail.com\n *                     Anthi Oikonomou anthioikonomou@gmail.com\n *\n * Use of this source code is governed by an BSD-3-Clause license that can be\n * found in the LICENSE file at https://themost.io/license\n */\n'use strict';\nimport pg from 'pg';\nimport async from 'async';\nimport util from 'util';\nimport {_} from 'lodash';\nimport {SqlFormatter} from '@themost/query/formatter';\nimport {QueryExpression,QueryField} from \"@themost/query/query\";\nimport {SqlUtils} from \"@themost/query/utils\";\nimport {TraceUtils} from \"themost/common/utils\";\n\n\npg.types.setTypeParser(20, function(val) {\n    return val === null ? null : parseInt(val);\n});\n\npg.types.setTypeParser(1700, function(val) {\n    return val === null ? null : parseFloat(val);\n});\n\n\n/**\n * @class\n * @augments {DataAdapter}\n */\nexport class PGSqlAdapter {\n    /**\n     * @constructor\n     * @param {*} options\n     */\n    constructor(options) {\n        this.rawConnection = null;\n        /**\n         * @type {*}\n         */\n        this.transaction = null;\n        /**\n         * @type {*}\n         */\n        this.options = options || { };\n        if (typeof this.options.port === 'undefined')\n            this.options.port = 5432;\n        if (typeof this.options.host === 'undefined')\n            this.options.host = 'localhost';\n        //define connection string\n        const self = this;\n        Object.defineProperty(this, 'connectionString', { get: function() {\n            return util.format('postgres://%s:%s@%s:%s/%s',\n                self.options.user,\n                self.options.password,\n                self.options.host,\n                self.options.port,\n                self.options.database);\n        }, enumerable:false, configurable:false});\n    }\n\n    /**\n     * Opens a new database connection\n     * @param {function(Error=)} callback\n     */\n    connect(callback) {\n\n        const self = this;\n        callback = callback || function() {};\n        if (self.rawConnection) {\n            callback();\n            return;\n        }\n        self.rawConnection = new pg.Client(this.connectionString);\n\n        let startTime;\n        if (process.env.NODE_ENV==='development') {\n            startTime = new Date().getTime();\n        }\n        //try to connection\n        self.rawConnection.connect(function(err) {\n            if(err) {\n                self.rawConnection = null;\n                return callback(err);\n            }\n            if (process.env.NODE_ENV==='development') {\n                console.log(util.format('SQL (Execution Time:%sms): Connect', (new Date()).getTime()-startTime));\n            }\n            //and return\n            callback(err);\n        });\n    }\n\n    /**\n     * Opens a new database connection\n     * @param {function(Error=)} callback\n     */\n    open(callback) {\n        callback = callback || function() {};\n        if (this.rawConnection) { return callback(); }\n        this.connect(callback);\n    }\n\n    /**\n     * Closes the underlying database connection\n     * @param {function(Error=)} callback\n     */\n    disconnect(callback) {\n        callback = callback || function() {};\n        if (typeof this.rawConnection === 'undefined' || this.rawConnection===null) {\n            callback();\n            return;\n        }\n        try {\n            //try to close connection\n            this.rawConnection.end();\n            if (this.rawConnection.connection && this.rawConnection.connection.stream) {\n                if (typeof this.rawConnection.connection.stream.destroy === 'function') {\n                    this.rawConnection.connection.stream.destroy();\n                }\n            }\n            this.rawConnection = null;\n            callback();\n        }\n        catch(e) {\n            console.log('An error occurred while trying to close database connection. ' + e.message);\n            this.rawConnection = null;\n            //do nothing (do not raise an error)\n            callback();\n        }\n    }\n\n    /**\n     * Closes the underlying database connection\n     * @param {function(Error=)} callback\n     */\n    close(callback) {\n        callback = callback || function() {};\n        this.disconnect(callback);\n    }\n\n    /**\n     * @param {string} query\n     * @param {*=} values\n     */\n    prepare(query, values) {\n        return SqlUtils.prepare(query,values);\n    }\n\n    /**\n     * Executes a query against the underlying database\n     * @param {string|*} query\n     * @param values {*=}\n     * @param {function(Error=,*=)} callback\n     */\n    execute(query, values, callback) {\n        const self = this;\n        let sql = null;\n        try {\n\n            if (typeof query === 'string') {\n                //get raw sql statement\n                sql = query;\n            }\n            else {\n                //format query expression or any object that may be act as query expression\n                const formatter = new PGSqlFormatter();\n                sql = formatter.format(query);\n            }\n            //validate sql statement\n            if (typeof sql !== 'string') {\n                callback.call(self, new Error('The executing command is of the wrong type or empty.'));\n                return;\n            }\n            //ensure connection\n            self.open(function(err) {\n                if (err) {\n                    callback.call(self, err);\n                }\n                else {\n                    //log statement (optional)\n                    let startTime;\n                    const prepared = self.prepare(sql, values);\n                    if (process.env.NODE_ENV==='development') {\n                        startTime = new Date().getTime();\n                    }\n                    //execute raw command\n                    self.rawConnection.query(prepared, null, function(err, result) {\n                        if (process.env.NODE_ENV==='development') {\n                            console.log(util.format('SQL (Execution Time:%sms):%s, Parameters:%s', (new Date()).getTime()-startTime, prepared, JSON.stringify(values)));\n                        }\n                        if (err) {\n                            //log sql\n                            console.log(util.format('SQL Error:%s', prepared));\n                            callback(err);\n                        }\n                        else {\n                            callback(null, result.rows);\n                        }\n                    });\n                }\n            });\n        }\n        catch (e) {\n            callback.call(self, e);\n        }\n    }\n\n    lastIdentity(callback) {\n        const self = this;\n        self.open(function(err) {\n            if (err) {\n                callback(err);\n            }\n            else {\n                //execute lastval (for sequence)\n                self.rawConnection.query('SELECT lastval()', null, function(err, lastval) {\n                    if (err) {\n                        callback(null, { insertId: null });\n                    }\n                    else {\n                        lastval.rows = lastval.rows || [];\n                        if (lastval.rows.length>0)\n                            callback(null, { insertId:lastval.rows[0]['lastval'] });\n                        else\n                            callback(null, { insertId: null });\n                    }\n                });\n            }\n        });\n    }\n\n    /**\n     * Begins a database transaction and executes the given function\n     * @param {function(Error=)} fn\n     * @param {function(Error=)} callback\n     */\n    executeInTransaction(fn, callback) {\n        const self = this;\n        //ensure parameters\n        fn = fn || function() {}; callback = callback || function() {};\n        self.open(function(err) {\n            if (err) {\n                callback(err);\n            }\n            else {\n                if (self.transaction) {\n                    fn.call(self, function(err) {\n                        callback(err);\n                    });\n                }\n                else {\n                    //begin transaction\n                    self.rawConnection.query('BEGIN TRANSACTION;', null, function(err) {\n                        if (err) {\n                            callback(err);\n                            return;\n                        }\n                        //initialize dummy transaction object (for future use)\n                        self.transaction = { };\n                        //execute function\n                        fn.call(self, function(err) {\n                            if (err) {\n                                //rollback transaction\n                                self.rawConnection.query('ROLLBACK TRANSACTION;', null, function() {\n                                    self.transaction = null;\n                                    callback(err);\n                                });\n                            }\n                            else {\n                                //commit transaction\n                                self.rawConnection.query('COMMIT TRANSACTION;', null, function(err) {\n                                    self.transaction = null;\n                                    callback(err);\n                                });\n                            }\n                        });\n                    });\n                }\n            }\n        });\n\n    }\n\n    /**\n     * Produces a new identity value for the given entity and attribute.\n     * @param entity {String} The target entity name\n     * @param attribute {String} The target attribute\n     * @param callback {Function=}\n     */\n    selectIdentity(entity, attribute, callback) {\n\n        const self = this;\n\n        const migration = {\n            appliesTo:'increment_id',\n            model:'increments',\n            description:'Increments migration (version 1.0)',\n            version:'1.0',\n            add:[\n                { name:'id', type:'Counter', primary:true },\n                { name:'entity', type:'Text', size:120 },\n                { name:'attribute', type:'Text', size:120 },\n                { name:'value', type:'Integer' }\n            ]\n        };\n        //ensure increments entity\n        self.migrate(migration, function(err)\n        {\n            //throw error if any\n            if (err) { callback.call(self,err); return; }\n            self.execute('SELECT * FROM increment_id WHERE entity=? AND attribute=?', [entity, attribute], function(err, result) {\n                if (err) { callback.call(self,err); return; }\n                if (result.length===0) {\n                    //get max value by querying the given entity\n                    const q = QueryExpression.create(entity).select(QueryField.create().max(attribute));\n                    self.execute(q,null, function(err, result) {\n                        if (err) { return callback.call(self, err); }\n                        let value = 1;\n                        if (result.length>0) {\n                            value = parseInt(result[0][attribute]) + 1;\n                        }\n                        self.execute('INSERT INTO increment_id(entity, attribute, value) VALUES (?,?,?)',[entity, attribute, value], function(err) {\n                            //throw error if any\n                            if (err) { return callback.call(self, err); }\n                            //return new increment value\n                            callback.call(self, err, value);\n                        });\n                    });\n                }\n                else {\n                    //get new increment value\n                    const value = parseInt(result[0].value) + 1;\n                    self.execute('UPDATE increment_id SET value=? WHERE id=?',[value, result[0].id], function(err) {\n                        //throw error if any\n                        if (err) { return callback.call(self, err); }\n                        //return new increment value\n                        callback.call(self, err, value);\n                    });\n                }\n            });\n        });\n    }\n\n    /**\n     * Executes an operation against database and returns the results.\n     * @param {DataModelBatch} batch\n     * @param {Function} callback\n     * @deprecated DataAdapter.executeBatch() is obsolete. Use DataAdapter.executeInTransaction() instead.\n     */\n    executeBatch(batch, callback) {\n        callback = callback || function() {};\n        callback(new Error('DataAdapter.executeBatch() is obsolete. Use DataAdapter.executeInTransaction() instead.'));\n    }\n\n    /**\n     *\n     * @param {*|{type:string, size:number, nullable:boolean}} field\n     * @param {string=} format\n     * @returns {string}\n     */\n    static formatType(field, format) {\n        const size = parseInt(field.size);\n        const scale = parseInt(field.scale);\n        let s = 'varchar(512) NULL';\n        const type=field.type;\n        switch (type)\n        {\n            case 'Boolean':\n                s = 'boolean';\n                break;\n            case 'Byte':\n                s = 'smallint';\n                break;\n            case 'Number':\n            case 'Float':\n                s = 'real';\n                break;\n            case 'Counter':\n                return 'SERIAL';\n            case 'Currency':\n            case 'Decimal':\n                s =  util.format('decimal(%s,%s)', (size>0? size: 19), (scale>0 ? scale: 4));\n                break;\n            case 'Date':\n                s = 'date';\n                break;\n            case 'DateTime':\n                s = 'timestamp';\n                break;\n            case 'Time':\n                s = 'time';\n                break;\n            case 'Integer':\n                s = 'int';\n                break;\n            case 'Duration':\n                s = 'integer';\n                break;\n            case 'URL':\n                if (size>0)\n                    s =  util.format('varchar(%s)', size);\n                else\n                    s =  'varchar';\n                break;\n            case 'Text':\n                if (size>0)\n                    s =  util.format('varchar(%s)', size);\n                else\n                    s =  'varchar';\n                break;\n            case 'Note':\n                if (size>0)\n                    s =  util.format('varchar(%s)', size);\n                else\n                    s =  'text';\n                break;\n            case 'Image':\n            case 'Binary':\n                s = size > 0 ? util.format('bytea(%s)', size) : 'bytea';\n                break;\n            case 'Guid':\n                s = 'uuid';\n                break;\n            case 'Short':\n                s = 'smallint';\n                break;\n            default:\n                s = 'integer';\n                break;\n        }\n        if (format==='alter')\n            s += (typeof field.nullable === 'undefined') ? ' DROP NOT NULL': (field.nullable ? ' DROP NOT NULL': ' SET NOT NULL');\n        else\n            s += (typeof field.nullable === 'undefined') ? ' NULL': (field.nullable ? ' NULL': ' NOT NULL');\n        return s;\n    }\n\n    refreshView(name, query, callback) {\n        const formatter = new PGSqlFormatter();\n        this.execute('REFRESH MATERIALIZED VIEW ' + formatter.escapeName(name), null, function(err) {\n            callback(err);\n        });\n    }\n\n    /**\n     * @param query {QueryExpression}\n     */\n    createView(name, query, callback) {\n        const self = this;\n        //open database\n        self.open(function(err) {\n            if (err) {\n                callback.call(self, err);\n                return;\n            }\n            //begin transaction\n            self.executeInTransaction(function(tr)\n            {\n                async.waterfall([\n                    function(cb) {\n                        self.execute('SELECT COUNT(*) FROM information_schema.tables WHERE table_schema=\\'public\\' AND table_type=\\'VIEW\\' AND table_name=?', [ name ],function(err, result) {\n                            if (err) { throw err; }\n                            if (result.length===0)\n                                return cb(null, 0);\n                            cb(null, result[0].count);\n                        });\n                    },\n                    function(arg, cb) {\n                        if (arg===0) { cb(null, 0); return; }\n                        //format query\n                        const sql = util.format(\"DROP VIEW \\\"%s\\\"\",name);\n                        self.execute(sql, null, function(err, result) {\n                            if (err) { throw err; }\n                            cb(null, 0);\n                        });\n                    },\n                    function(arg, cb) {\n                        //format query\n                        const formatter = new PGSqlFormatter();\n                        formatter.settings.nameFormat = PGSqlAdapter.NAME_FORMAT;\n                        const sql = util.format(\"CREATE VIEW \\\"%s\\\" AS %s\", name, formatter.format(query));\n                        self.execute(sql, null, function(err, result) {\n                            if (err) { throw err; }\n                            cb(null, 0);\n                        });\n                    }\n                ], function(err) {\n                    if (err) { tr(err); return; }\n                    tr(null);\n                });\n            }, function(err) {\n                callback(err);\n            });\n        });\n\n    }\n\n    /**\n     * @class DataModelMigration\n     * @property {string} name\n     * @property {string} description\n     * @property {string} model\n     * @property {string} appliesTo\n     * @property {string} version\n     * @property {array} add\n     * @property {array} remove\n     * @property {array} change\n     */\n    /**\n     * @param {string} name\n     * @returns {{exists: Function}}\n     */\n    table(name) {\n        const self = this;\n        return {\n            /**\n             * @param {function(Error,Boolean=)} callback\n             */\n            exists: function(callback) {\n                callback = callback || function() {};\n                self.execute('SELECT COUNT(*) FROM information_schema.tables WHERE table_schema=\\'public\\' AND table_type=\\'BASE TABLE\\' AND table_name=?',\n                    [name], function(err, result) {\n                        if (err) { callback(err); return; }\n                        callback(null, (result[0].count>0));\n                    });\n            },\n            /**\n             * @param {function(Error,string=)} callback\n             */\n            version:function(callback) {\n                self.execute('SELECT MAX(\"version\") AS version FROM migrations WHERE \"appliesTo\"=?',\n                    [name], function(err, result) {\n                        if (err) { callback(err); return; }\n                        if (result.length===0)\n                            callback(null, '0.0');\n                        else\n                            callback(null, result[0].version || '0.0');\n                    });\n            },\n            /**\n             * @param {function(Error,Boolean=)} callback\n             */\n            has_sequence:function(callback) {\n                callback = callback || function() {};\n                self.execute('SELECT COUNT(*) FROM information_schema.columns WHERE table_name=? AND table_schema=\\'public\\' AND (\"column_default\" ~ \\'^nextval\\((.*?)\\)$\\')',\n                    [name], function(err, result) {\n                        if (err) { callback(err); return; }\n                        callback(null, (result[0].count>0));\n                    });\n            },\n            /**\n             * @param {function(Error,{columnName:string,ordinal:number,dataType:*, maxLength:number,isNullable:number }[]=)} callback\n             */\n            columns:function(callback) {\n                callback = callback || function() {};\n                self.execute('SELECT column_name AS \"columnName\", ordinal_position as \"ordinal\", data_type as \"dataType\",' +\n                    'character_maximum_length as \"maxLength\", is_nullable AS  \"isNullable\", column_default AS \"defaultValue\"' +\n                    ' FROM information_schema.columns WHERE table_name=?',\n                    [name], function(err, result) {\n                        if (err) { callback(err); return; }\n                        callback(null, result);\n                    });\n            }\n        };\n    }\n\n    /*\n    * @param obj {DataModelMigration|*} An Object that represents the data model scheme we want to migrate\n    * @param callback {Function}\n    */\n    migrate(obj, callback) {\n        if (obj===null)\n            return;\n        const self = this;\n        /**\n         * @type {DataModelMigration|*}\n         */\n        const migration = obj;\n\n        const format = function(format, obj)\n        {\n            let result = format;\n            if (/%t/.test(format))\n                result = result.replace(/%t/g,PGSqlAdapter.formatType(obj));\n            if (/%f/.test(format))\n                result = result.replace(/%f/g,obj.name);\n            return result;\n        };\n\n        if (migration.appliesTo===null)\n            throw new Error(\"Model name is undefined\");\n        self.open(function(err) {\n            if (err) {\n                callback.call(self, err);\n            }\n            else {\n                async.waterfall([\n                    //1. Check migrations table existence\n                    function(cb) {\n                        if (PGSqlAdapter.supportMigrations) {\n                            cb(null, 1);\n                            return;\n                        }\n                        self.table('migrations').exists(function(err, exists) {\n                            if (err) { cb(err); return; }\n                            cb(null, exists);\n                        });\n                    },\n                    //2. Create migrations table if not exists\n                    function(arg, cb) {\n                        if (arg>0) { cb(null, 0); return; }\n                        //create migrations table\n                        self.execute('CREATE TABLE migrations(id SERIAL NOT NULL, ' +\n                                '\"appliesTo\" varchar(80) NOT NULL, \"model\" varchar(120) NULL, \"description\" varchar(512),\"version\" varchar(40) NOT NULL)',\n                            ['migrations'], function(err) {\n                                if (err) { cb(err); return; }\n                                PGSqlAdapter.supportMigrations=true;\n                                cb(null, 0);\n                            });\n                    },\n                    //3. Check if migration has already been applied\n                    function(arg, cb) {\n                        self.table(migration.appliesTo).version(function(err, version) {\n                            if (err) { cb(err); return; }\n                            cb(null, (version>=migration.version));\n                        });\n\n                    },\n                    //4a. Check table existence\n                    function(arg, cb) {\n                        //migration has already been applied (set migration.updated=true)\n                        if (arg) {\n                            obj['updated']=true;\n                            return cb(null, -1);\n                        }\n                        else {\n                            self.table(migration.appliesTo).exists(function(err, exists) {\n                                if (err) { cb(err); return; }\n                                cb(null, exists ? 1 : 0);\n                            });\n\n                        }\n                    },\n                    //4b. Get table columns\n                    function(arg, cb) {\n                        //migration has already been applied\n                        if (arg<0) { cb(null, [arg, null]); return; }\n                        self.table(migration.appliesTo).columns(function(err, columns) {\n                            if (err) { cb(err); return; }\n                            cb(null, [arg, columns]);\n                        });\n                    },\n                    //5. Migrate target table (create or alter)\n                    function(args, cb)\n                    {\n                        //migration has already been applied\n                        if (args[0]<0) { cb(null, args[0]); return; }\n                        const columns = args[1];\n                        if (args[0]===0) {\n                            //create table and\n                            const strFields = _.map(_.filter(migration.add, (x) => {\n                                return !x.oneToMany;\n                            }),(x) => {\n                                    return format('\\\"%f\\\" %t', x);\n                                }).join(', ');\n                            const key = _.find(migration.add, (x) => { return x.primary; });\n                            const sql = util.format('CREATE TABLE \\\"%s\\\" (%s, PRIMARY KEY(\\\"%s\\\"))', migration.appliesTo, strFields, key.name);\n                            self.execute(sql, null, function(err)\n                            {\n                                if (err) { return cb(err); }\n                                return cb(null, 1);\n                            });\n\n                        }\n                        else {\n                            const expressions = [];\n                            let column;\n                            let fname;\n                            const findColumnFunc = (name) => {\n                                return _.find(this, (x) => {\n                                    return x.columnName === name;\n                                });\n                            };\n                            //1. enumerate fields to delete\n                            if (migration.remove) {\n                                for(let i=0;i<migration.remove.length;i++) {\n                                    fname=migration.remove[i].name;\n                                    column = findColumnFunc.bind(columns)(fname);\n                                    if (typeof column !== 'undefined') {\n                                        let k= 1, deletedColumnName =util.format('xx%s1_%s', k.toString(), column.columnName);\n                                        while(typeof findColumnFunc.bind(columns)(deletedColumnName) !=='undefined') {\n                                            k+=1;\n                                            deletedColumnName =util.format('xx%s_%s', k.toString(), column.columnName);\n                                        }\n                                        expressions.push(util.format('ALTER TABLE \\\"%s\\\" RENAME COLUMN \\\"%s\\\" TO %s', migration.appliesTo, column.columnName, deletedColumnName));\n                                    }\n                                }\n                            }\n                            //2. enumerate fields to add\n                            let newSize, originalSize, fieldName, nullable;\n                            if (migration.add)\n                            {\n                                for(let i=0;i<migration.add.length;i++)\n                                {\n                                    //get field name\n                                    fieldName = migration.add[i].name;\n                                    //check if field exists or not\n                                    column = findColumnFunc.bind(columns)(fieldName);\n                                    if (typeof column !== 'undefined') {\n                                        //get original field size\n                                        originalSize = column.maxLength;\n                                        //and new field size\n                                        newSize = migration.add[i].size;\n                                        //add expression for modifying column (size)\n                                        if ((typeof newSize !== 'undefined') && (originalSize!==newSize)) {\n                                            expressions.push(util.format('UPDATE pg_attribute SET atttypmod = %s+4 WHERE attrelid = \\'\"%s\"\\'::regclass AND attname = \\'%s\\';',newSize, migration.appliesTo,  fieldName));\n                                        }\n                                        //update nullable attribute\n                                        nullable = (typeof migration.add[i].nullable !=='undefined') ? migration.add[i].nullable  : true;\n                                        expressions.push(util.format('ALTER TABLE \\\"%s\\\" ALTER COLUMN \\\"%s\\\" %s', migration.appliesTo, fieldName, (nullable ? 'DROP NOT NULL' : 'SET NOT NULL')));\n                                    }\n                                    else {\n                                        //add expression for adding column\n                                        expressions.push(util.format('ALTER TABLE \\\"%s\\\" ADD COLUMN \\\"%s\\\" %s', migration.appliesTo, fieldName, PGSqlAdapter.formatType(migration.add[i])));\n                                    }\n                                }\n                            }\n\n                            //3. enumerate fields to update\n                            if (migration.change) {\n                                for(var i=0;i<migration.change.length;i++) {\n                                    const change = migration.change[i];\n                                    column = findColumnFunc.bind(columns)(change);\n                                    if (typeof column !== 'undefined') {\n                                        //important note: Alter column operation is not supported for column types\n                                        expressions.push(util.format('ALTER TABLE \\\"%s\\\" ALTER COLUMN \\\"%s\\\" TYPE %s', migration.appliesTo, migration.add[i].name, PGSqlAdapter.formatType(migration.change[i])));\n                                    }\n                                }\n                            }\n\n                            if (expressions.length>0) {\n                                self.execute(expressions.join(';'), null, function(err)\n                                {\n                                    if (err) { cb(err); return; }\n                                    return cb(null, 1);\n                                });\n                            }\n                            else\n                                cb(null, 2);\n                        }\n                    }, function(arg, cb) {\n\n                        if (arg>0) {\n                            //log migration to database\n                            self.execute('INSERT INTO migrations(\"appliesTo\", \"model\", \"version\", \"description\") VALUES (?,?,?,?)', [migration.appliesTo,\n                                migration.model,\n                                migration.version,\n                                migration.description ], function(err, result)\n                            {\n                                if (err) throw err;\n                                return cb(null, 1);\n                            });\n                        }\n                        else {\n                            migration['updated'] = true;\n                            cb(null, arg);\n                        }\n                    }\n                ], function(err, result) {\n                    callback(err, result);\n                });\n            }\n        });\n    }\n}\n\nPGSqlAdapter.NAME_FORMAT = '\"$1\"';\n\n/**\n * @class\n * @augments {SqlFormatter}\n */\nexport class PGSqlFormatter extends SqlFormatter {\n    /**\n     * @constructor\n     */\n    constructor() {\n        super();\n        this.settings = {\n            nameFormat:PGSqlAdapter.NAME_FORMAT\n        };\n    }\n\n    /**\n     *\n     * @param {QueryExpression|{$take:number=,$skip:number=}} obj\n     * @returns {string}\n     */\n    formatLimitSelect(obj) {\n        let sql=this.formatSelect(obj);\n        if (obj.$take) {\n            if (obj.$skip)\n            //add limit and skip records\n                sql= sql.concat(' LIMIT ', obj.$take.toString() ,' OFFSET ',obj.$skip.toString());\n            else\n            //add only limit\n                sql= sql.concat(' LIMIT ',  obj.$take.toString());\n        }\n        return sql;\n    }\n\n    escapeConstant(obj, quoted) {\n        let res = this.escape(obj, quoted);\n        if (typeof obj === 'undefined' || obj === null)\n            res += '::text';\n        else if (obj instanceof Date)\n            res += '::timestamp';\n        else if (typeof obj === 'number')\n            res += '::float';\n        else if (typeof obj === 'boolean')\n            res += '::bool';\n        else\n            res += '::text';\n        return res;\n    }\n\n    /**\n     * Escapes an object or a value and returns the equivalent sql value.\n     * @param {*} value - A value that is going to be escaped for SQL statements\n     * @param {boolean=} unquoted - An optional value that indicates whether the resulted string will be quoted or not.\n     * @returns {string} - The equivalent SQL string value\n     */\n    escape(value, unquoted) {\n        let res = super.escape.bind(this)(value, unquoted);\n        if (typeof value === 'string') {\n            if (/\\\\'/g.test(res))\n                res = res.replace(/\\\\'/g, SINGLE_QUOTE_ESCAPE);\n            if (/\\\\\"/g.test(res))\n                res = res.replace(/\\\\\"/g, DOUBLE_QUOTE_ESCAPE);\n        }\n        return res;\n    }\n\n    /**\n     * Implements indexOf(str,substr) expression formatter.\n     * @param {String} p0 The source string\n     * @param {String} p1 The string to search for\n     */\n    $indexof(p0, p1) {\n\n        return util.format('POSITION(lower(%s) IN lower(%s::text))', this.escape(p1), this.escape(p0));\n    }\n\n    /**\n     * Implements regular expression formatting.\n     * @param {*} p0 - An object or string that represents the field which is going to be used in this expression.\n     * @param {string|*} p1 - A string that represents the text to search for\n     * @returns {string}\n     */\n    $regex(p0, p1) {\n        //validate params\n        if (Object.isNullOrUndefined(p0) || Object.isNullOrUndefined(p1))\n            return '';\n        return util.format('(%s ~ \\'%s\\')', this.escape(p0), this.escape(p1, true));\n    }\n\n    /**\n     * Implements startsWith(a,b) expression formatter.\n     * @param p0 {*}\n     * @param p1 {*}\n     */\n    $startswith(p0, p1) {\n        //validate params\n        if (Object.isNullOrUndefined(p0) || Object.isNullOrUndefined(p1))\n            return '';\n        return util.format('(%s ~ \\'^%s\\')', this.escape(p0), this.escape(p1, true));\n    }\n\n    /**\n     * Implements endsWith(a,b) expression formatter.\n     * @param p0 {*}\n     * @param p1 {*}\n     */\n    $endswith(p0, p1) {\n        //validate params\n        if (Object.isNullOrUndefined(p0) || Object.isNullOrUndefined(p1))\n            return '';\n        const result = util.format('(%s ~ \\'%s$$\\')', this.escape(p0), this.escape(p1, true));\n        return result;\n    }\n\n    /**\n     * Implements substring(str,pos) expression formatter.\n     * @param {String} p0 The source string\n     * @param {Number} pos The starting position\n     * @param {Number=} length The length of the resulted string\n     * @returns {string}\n     */\n    $substring(p0, pos, length) {\n        if (length)\n            return util.format('SUBSTRING(%s FROM %s FOR %s)', this.escape(p0), pos.valueOf()+1, length.valueOf());\n        else\n            return util.format('SUBSTRING(%s FROM %s)', this.escape(p0), pos.valueOf()+1);\n    }\n\n    /**\n     * Implements contains(a,b) expression formatter.\n     * @param p0 {*}\n     * @param p1 {*}\n     */\n    $contains(p0, p1) {\n        //validate params\n        if (Object.isNullOrUndefined(p0) || Object.isNullOrUndefined(p1))\n            return '';\n        if (p1.valueOf().toString().length===0)\n            return '';\n        return util.format('(%s ~ \\'%s\\')', this.escape(p0), this.escape(p1, true));\n    }\n\n    escapeName(name) {\n        if (typeof name === 'string')\n            return name.replace(/(\\w+)/ig, this.settings.nameFormat);\n        return name;\n    }\n\n    /**\n     * Implements length(a) expression formatter.\n     * @param p0 {*}\n     */\n    $length(p0) {\n        return util.format('LENGTH(%s)', this.escape(p0));\n    }\n\n    $day(p0) { return util.format('DATE_PART(\\'day\\',%s)', this.escape(p0)); }\n    $month(p0) { return util.format('DATE_PART(\\'month\\',%s)', this.escape(p0)); }\n    $year(p0) { return util.format('DATE_PART(\\'year\\',%s)', this.escape(p0)); }\n    $hour(p0) { return util.format('HOUR_TZ(%s::timestamp with time zone)', this.escape(p0)); }\n    $minute(p0) { return util.format('DATE_PART(\\'minute\\',%s)', this.escape(p0)); }\n    $second(p0) { return util.format('DATE_PART(\\'second\\',%s)', this.escape(p0)); }\n\n    $date(p0) {\n        return util.format('CAST(%s AS DATE)', this.escape(p0));\n    }\n}\n\nconst SINGLE_QUOTE_ESCAPE ='\\'\\'',\n    DOUBLE_QUOTE_ESCAPE = '\"';\n/**\n * Implements text search expression formatting.\n * @param {*} p0 - An object or string that represents the field which is going to be used in this expression.\n * @param {string|*} p1 - A string that represents the text to search for\n * @returns {string}\n */\nPGSqlFormatter.prototype.$text = PGSqlFormatter.prototype.$regex;\n\n/**\n * Creates an instance of PGSqlAdapter object that represents a Postgres database connection.\n * @param {*} options An object that represents the properties of the underlying database connection.\n * @returns {DataAdapter}\n */\nexport function createInstance(options) {\n    return new PGSqlAdapter(options);\n}\n"]}