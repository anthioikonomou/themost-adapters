{"version":3,"sources":["index.es6"],"names":["createInstance","mssql","async","util","_","SqlFormatter","QueryExpression","QueryField","TraceUtils","SqlUtils","MSSqlAdapter","options","rawConnection","connectionPooling","self","Object","defineProperty","get","keys","map","x","concat","join","configurable","enumerable","query","values","format","callback","call","Connection","connect","err","log","close","fn","open","transaction","Transaction","begin","rollback","Error","commit","e","batch","entity","attribute","migration","appliesTo","model","version","description","add","name","type","primary","size","migrate","execute","result","length","q","from","select","max","value","parseInt","id","sql","formatter","MSSqlFormatter","startTime","process","env","NODE_ENV","Date","getTime","request","Request","preparedSql","prepare","$insert","JSON","stringify","message","bind","insertId","view","create","owner","table","matches","exec","exists","count","columns","fields","isArray","strFields","filter","oneToMany","strPKFields","strTable","change","drop","escapeName","thisArg","executeInTransaction","tr","obj","isNil","waterfall","cb","arg","nullable","remove","column","newType","oldType","findColumnFunc","find","y","i","splice","type1","replace","push","targetTable","test","formatType","field","scale","s","undefined","zeroPad","number","res","toString","settings","nameFormat","$take","formatSelect","$skip","$select","qfields","order","$order","subQuery","pop","forEach","_extend","as","p0","p1","escape","s1","unquoted","escapeDate","hasOwnProperty","$name","valueOf","val","year","getFullYear","month","getMonth","day","getDate","hour","getHours","minute","getMinutes","second","getSeconds","millisecond","getMilliseconds","offset","getTimezoneOffset","timezone","Math","floor","pos"],"mappings":"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","file":"index.js","sourcesContent":["/**\r\n * @license\r\n * MOST Web Framework 2.0 Codename Blueshift\r\n * Copyright (c) 2014, Kyriakos Barbounakis k.barbounakis@gmail.com\r\n *                     Anthi Oikonomou anthioikonomou@gmail.com\r\n *\r\n * Use of this source code is governed by an BSD-3-Clause license that can be\r\n * found in the LICENSE file at https://themost.io/license\r\n */\r\nimport mssql from 'mssql';\r\nimport async from 'async';\r\nimport util from 'util';\r\nimport _ from 'lodash';\r\nimport {SqlFormatter} from '@themost/query/formatter';\r\nimport {QueryExpression,QueryField} from \"@themost/query/query\";\r\nimport {TraceUtils} from '@themost/common/utils';\r\nimport {SqlUtils} from '@themost/query/utils';\r\n\r\n/**\r\n * @class\r\n * @augments DataAdapter\r\n */\r\nexport class MSSqlAdapter {\r\n    /**\r\n     * @constructor\r\n     * @param {*} options\r\n     */\r\n    constructor(options) {\r\n        /**\r\n         * @private\r\n         * @type {Connection}\r\n         */\r\n        this.rawConnection = null;\r\n        /**\r\n         * Gets or sets database connection string\r\n         * @type {*}\r\n         */\r\n        this.options = options;\r\n        /**\r\n         * Gets or sets a boolean that indicates whether connection pooling is enabled or not.\r\n         * @type {boolean}\r\n         */\r\n        this.connectionPooling = false;\r\n\r\n        const self = this;\r\n        /**\r\n         * Gets connection string from options.\r\n         * @type {string}\r\n         */\r\n        Object.defineProperty(this, 'connectionString', {\r\n            get: function() {\r\n                const keys = Object.keys(self.options);\r\n                return keys.map(function(x) {\r\n                    return x.concat('=',self.options[x]);\r\n                }).join(';');\r\n            }, configurable:false, enumerable:false\r\n        });\r\n    }\r\n\r\n    prepare(query, values) {\r\n        return SqlUtils.format(query,values);\r\n    }\r\n\r\n    /**\r\n     * Opens database connection\r\n     */\r\n    open(callback) {\r\n        callback = callback || function() {};\r\n        const self = this;\r\n        if (this.rawConnection) {\r\n            callback.call(self);\r\n            return;\r\n        }\r\n\r\n        self.rawConnection = new mssql.Connection(self.options);\r\n        self.rawConnection.connect(function(err) {\r\n            if (err) {\r\n                self.rawConnection=null;\r\n                TraceUtils.log(err);\r\n            }\r\n            callback.call(self, err);\r\n        });\r\n\r\n    }\r\n\r\n    close() {\r\n        const self = this;\r\n        if (!self.rawConnection)\r\n            return;\r\n\r\n        self.rawConnection.close(function (err) {\r\n            if (err) {\r\n                TraceUtils.log(err);\r\n                //do nothing\r\n                self.rawConnection = null;\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Begins a data transaction and executes the given function\r\n     * @param fn {Function}\r\n     * @param callback {Function}\r\n     */\r\n    executeInTransaction(fn, callback) {\r\n        const self = this;\r\n        //ensure callback\r\n        callback = callback || function () {\r\n        };\r\n\r\n        //ensure that database connection is open\r\n        self.open(function (err) {\r\n            if (err) {\r\n                callback.call(self, err);\r\n                return;\r\n            }\r\n            //check if transaction is already defined (as object)\r\n            if (self.transaction) {\r\n                //so invoke method\r\n                fn.call(self, function (err) {\r\n                    //call callback\r\n                    callback.call(self, err);\r\n                });\r\n            }\r\n            else {\r\n                //create transaction\r\n                self.transaction = new mssql.Transaction(self.rawConnection);\r\n                //begin transaction\r\n                self.transaction.begin(function(err) {\r\n                    //error check (?)\r\n                    if (err) {\r\n                        TraceUtils.log(err);\r\n                        callback.call(self, err);\r\n                    }\r\n                    else {\r\n                        try {\r\n                            fn.call(self, function (err) {\r\n                                try {\r\n                                    if (err) {\r\n                                        if (self.transaction) {\r\n                                            self.transaction.rollback();\r\n                                            self.transaction=null;\r\n                                        }\r\n                                        callback.call(self, err);\r\n                                    }\r\n                                    else {\r\n                                        if (typeof self.transaction === 'undefined' || self.transaction === null) {\r\n                                            callback.call(self, new Error('Database transaction cannot be empty on commit.'));\r\n                                            return;\r\n                                        }\r\n                                        self.transaction.commit(function (err) {\r\n                                            if (err) {\r\n                                                self.transaction.rollback();\r\n                                            }\r\n                                            self.transaction = null;\r\n                                            callback.call(self, err);\r\n                                        });\r\n                                    }\r\n                                }\r\n                                catch (e) {\r\n                                    callback.call(self, e);\r\n                                }\r\n                            });\r\n                        }\r\n                        catch (e) {\r\n                            callback.call(self, e);\r\n                        }\r\n\r\n                    }\r\n                });\r\n\r\n               /* self.transaction.on('begin', function() {\r\n                    TraceUtils.log('begin transaction');\r\n                });*/\r\n\r\n\r\n\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Executes an operation against database and returns the results.\r\n     * @param {*} batch\r\n     * @param {Function} callback\r\n     * @deprecated DataAdapter.executeBatch() is obsolete. Use DataAdapter.executeInTransaction() instead.\r\n     */\r\n    executeBatch(batch, callback) {\r\n        callback = callback || function() {};\r\n        return callback(new Error('DataAdapter.executeBatch() is obsolete. Use DataAdapter.executeInTransaction() instead.'));\r\n    }\r\n\r\n    /**\r\n     * Produces a new identity value for the given entity and attribute.\r\n     * @param entity {String} The target entity name\r\n     * @param attribute {String} The target attribute\r\n     * @param callback {Function=}\r\n     */\r\n    selectIdentity(entity, attribute, callback) {\r\n\r\n        const self = this;\r\n\r\n        const migration = {\r\n            appliesTo:'increment_id',\r\n            model:'increments',\r\n            version:'1.0',\r\n            description:'Increments migration (version 1.0)',\r\n            add:[\r\n                { name:'id', type:'Counter', primary:true },\r\n                { name:'entity', type:'Text', size:120 },\r\n                { name:'attribute', type:'Text', size:120 },\r\n                { name:'value', type:'Integer' }\r\n            ]\r\n        };\r\n        //ensure increments entity\r\n        self.migrate(migration, function(err)\r\n        {\r\n            //throw error if any\r\n            if (err) { callback.call(self,err); return; }\r\n\r\n            self.execute('SELECT * FROM increment_id WHERE entity=? AND attribute=?', [entity, attribute], function(err, result) {\r\n                if (err) { callback.call(self,err); return; }\r\n                if (result.length===0) {\r\n                    //get max value by querying the given entity\r\n                    const q = new QueryExpression().from(entity).select([new QueryField().max(attribute)]);\r\n                    self.execute(q,null, function(err, result) {\r\n                        if (err) { callback.call(self, err); return; }\r\n                        let value = 1;\r\n                        if (result.length>0) {\r\n                            value = parseInt(result[0][attribute]) + 1;\r\n                        }\r\n                        self.execute('INSERT INTO increment_id(entity, attribute, value) VALUES (?,?,?)',[entity, attribute, value], function(err) {\r\n                            //throw error if any\r\n                            if (err) { callback.call(self, err); return; }\r\n                            //return new increment value\r\n                            callback.call(self, err, value);\r\n                        });\r\n                    });\r\n                }\r\n                else {\r\n                    //get new increment value\r\n                    const value = parseInt(result[0].value) + 1;\r\n                    self.execute('UPDATE increment_id SET value=? WHERE id=?',[value, result[0].id], function(err) {\r\n                        //throw error if any\r\n                        if (err) { callback.call(self, err); return; }\r\n                        //return new increment value\r\n                        callback.call(self, err, value);\r\n                    });\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @param query {*}\r\n     * @param values {*}\r\n     * @param {function} callback\r\n     */\r\n    execute(query, values, callback) {\r\n        const self = this;\r\n        let sql = null;\r\n        try {\r\n\r\n            if (typeof query === 'string') {\r\n                //get raw sql statement\r\n                sql = query;\r\n            }\r\n            else {\r\n                //format query expression or any object that may be act as query expression\r\n                const formatter = new MSSqlFormatter();\r\n                sql = formatter.format(query);\r\n            }\r\n            //validate sql statement\r\n            if (typeof sql !== 'string') {\r\n                callback.call(self, new Error('The executing command is of the wrong type or empty.'));\r\n                return;\r\n            }\r\n            //ensure connection\r\n            self.open(function(err) {\r\n                if (err) {\r\n                    callback.call(self, err);\r\n                }\r\n                else {\r\n                    //log statement (optional)\r\n                    let startTime;\r\n                    if (process.env.NODE_ENV==='development') {\r\n                        startTime = new Date().getTime();\r\n                    }\r\n                    //execute raw command\r\n                    const request = self.transaction ? new mssql.Request(self.transaction) : new mssql.Request(self.rawConnection);\r\n                    let preparedSql=self.prepare(sql , values);\r\n                     if(typeof query.$insert!=='undefined')\r\n                         preparedSql+= ';SELECT @@IDENTITY as insertId';\r\n                    request.query(preparedSql, function(err, result) {\r\n                        if (process.env.NODE_ENV==='development') {\r\n                            TraceUtils.log(util.format('SQL (Execution Time:%sms):%s, Parameters:%s', (new Date()).getTime()-startTime, sql, JSON.stringify(values)));\r\n                        }\r\n                        if (err) {\r\n                            TraceUtils.log(util.format('SQL (Execution Error):%s, %s',err.message, preparedSql));\r\n                        }\r\n                        if(typeof query.$insert==='undefined')\r\n                            callback.bind(self)(err, result);\r\n                        else {\r\n                            if (result) {\r\n                                if(result.length>0)\r\n                                    callback.bind(self)(err, { insertId:result[0].insertId });\r\n                                else\r\n                                    callback.bind(self)(err, result);\r\n                            }\r\n                            else {\r\n                                callback.bind(self)(err, result);\r\n                            }\r\n                        }\r\n                    });\r\n                }\r\n            });\r\n        }\r\n        catch (err) {\r\n            callback.bind(self)(err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Formats an object based on the format string provided. Valid formats are:\r\n     * %t : Formats a field and returns field type definition\r\n     * %f : Formats a field and returns field name\r\n     * @param format {string}\r\n     * @param obj {*}\r\n     */\r\n    static format(format, obj) {\r\n        let result = format;\r\n        if (/%t/.test(format))\r\n            result = result.replace(/%t/g,MSSqlAdapter.formatType(obj));\r\n        if (/%f/.test(format))\r\n            result = result.replace(/%f/g,obj.name);\r\n        return result;\r\n    }\r\n\r\n    static formatType(field) {\r\n        const size = parseInt(field.size);\r\n        const scale = parseInt(field.scale);\r\n        let s = 'varchar(512) NULL';\r\n        const type=field.type;\r\n        switch (type)\r\n        {\r\n            case 'Boolean':\r\n                s = 'bit';\r\n                break;\r\n            case 'Byte':\r\n                s = 'tinyint';\r\n                break;\r\n            case 'Number':\r\n            case 'Float':\r\n                s = 'float';\r\n                break;\r\n            case 'Counter':\r\n                return 'int IDENTITY (1,1) NOT NULL';\r\n            case 'Currency':\r\n                s = size>0 ? (size<=10 ? 'smallmoney' : 'money') : 'money';\r\n                break;\r\n            case 'Decimal':\r\n                s =  util.format('decimal(%s,%s)', (size>0 ? size : 19), (scale>0 ? scale : 4));\r\n                break;\r\n            case 'Date':\r\n                s = 'date';\r\n                break;\r\n            case 'DateTime':\r\n                s = 'datetimeoffset';\r\n                break;\r\n            case 'Time':\r\n                s = 'time';\r\n                break;\r\n            case 'Integer':\r\n                s = 'int';\r\n                break;\r\n            case 'Duration':\r\n                s = size>0 ? util.format('varchar(%s)', size): 'varchar(48)';\r\n                break;\r\n            case 'URL':\r\n                if (size>0)\r\n                    s =  util.format('varchar(%s)', size);\r\n                else\r\n                    s =  'varchar(512)';\r\n                break;\r\n            case 'Text':\r\n                if (size>0)\r\n                    s =  util.format('varchar(%s)', size);\r\n                else\r\n                    s =  'varchar(512)';\r\n                break;\r\n            case 'Note':\r\n                if (size>0)\r\n                    s =  util.format('varchar(%s)', size);\r\n                else\r\n                    s =  'text';\r\n                break;\r\n            case 'Image':\r\n            case 'Binary':\r\n                s ='binary';\r\n                break;\r\n            case 'Guid':\r\n                s = 'varchar(36)';\r\n                break;\r\n            case 'Short':\r\n                s = 'smallint';\r\n                break;\r\n            default:\r\n                s = 'int';\r\n                break;\r\n        }\r\n        s += field.nullable===undefined ? ' null': field.nullable ? ' null': ' not null';\r\n        return s;\r\n    }\r\n\r\n    /**\r\n     * @param {string} name\r\n     * @param {QueryExpression} query\r\n     * @param {Function} callback\r\n     */\r\n    createView(name, query, callback) {\r\n        return this.view(name).create(query, callback);\r\n    }\r\n\r\n    /**\r\n     * Initializes database table helper.\r\n     * @param {string} name - The table name\r\n     * @returns {{exists: Function, version: Function, columns: Function, create: Function, add: Function, change: Function}}\r\n     */\r\n    table(name) {\r\n        const self = this;\r\n        let owner;\r\n        let table;\r\n        const matches = /(\\w+)\\.(\\w+)/.exec(name);\r\n        if (matches) {\r\n            //get schema owner\r\n            owner = matches[1];\r\n            //get table name\r\n            table = matches[2];\r\n        }\r\n        else {\r\n            //get view name\r\n            table = name;\r\n            //get default owner\r\n            owner = 'dbo';\r\n        }\r\n        return {\r\n            /**\r\n             * @param {Function} callback\r\n             */\r\n            exists:function(callback) {\r\n                callback = callback || function() {};\r\n                self.execute('SELECT COUNT(*) AS [count] FROM sysobjects WHERE [name]=? AND [type]=\\'U\\' AND SCHEMA_NAME([uid])=?',\r\n                    [ table, owner ], function(err, result) {\r\n                        if (err) { return callback(err); }\r\n                        callback(null, result[0].count);\r\n                    });\r\n            },\r\n            /**\r\n             * @param {function(Error,string=)} callback\r\n             */\r\n            version:function(callback) {\r\n                callback = callback || function() {};\r\n                self.execute('SELECT MAX([version]) AS [version] FROM [migrations] WHERE [appliesTo]=?',\r\n                    [table], function(err, result) {\r\n                        if (err) { return callback(err); }\r\n                        if (result.length===0)\r\n                            callback(null, '0.0');\r\n                        else\r\n                            callback(null, result[0].version || '0.0');\r\n                    });\r\n            },\r\n            /**\r\n             * @param {function(Error=,Array=)} callback\r\n             */\r\n            columns:function(callback) {\r\n                callback = callback || function() {};\r\n                self.execute(\"SELECT c0.[name] AS [name], c0.[isnullable] AS [nullable], c0.[length] AS [size], c0.[prec] AS [precision], \" +\r\n                    \"c0.[scale] AS [scale], t0.[name] AS type, t0.[name] + CASE WHEN t0.[variable]=0 THEN '' ELSE '(' + CONVERT(varchar,c0.[length]) + ')' END AS [type1], \" +\r\n                    \"CASE WHEN p0.[indid]>0 THEN 1 ELSE 0 END [primary] FROM syscolumns c0  INNER JOIN systypes t0 ON c0.[xusertype] = t0.[xusertype] \" +\r\n                    \"INNER JOIN  sysobjects s0 ON c0.[id]=s0.[id]  LEFT JOIN (SELECT k0.* FROM sysindexkeys k0 INNER JOIN (SELECT i0.* FROM sysindexes i0 \" +\r\n                    \"INNER JOIN sysobjects s0 ON i0.[id]=s0.[id]  WHERE i0.[status]=2066) x0  ON k0.[id]=x0.[id] AND k0.[indid]=x0.[indid] ) p0 ON c0.[id]=p0.[id] \" +\r\n                    \"AND c0.[colid]=p0.[colid]  WHERE s0.[name]=? AND s0.[xtype]='U' AND SCHEMA_NAME(s0.[uid])=?\",\r\n                    [ table, owner ], function(err, result) {\r\n                        if (err) { return callback(err); }\r\n                        callback(null, result);\r\n                    });\r\n            },\r\n            /**\r\n             * @param {{name:string,type:string,primary:boolean|number,nullable:boolean|number,size:number, scale:number,precision:number,oneToMany:boolean}[]|*} fields\r\n             * @param callback\r\n             */\r\n            create: function(fields, callback) {\r\n                callback = callback || function() {};\r\n                fields = fields || [];\r\n                if (!util.isArray(fields)) {\r\n                    return callback(new Error('Invalid argument type. Expected Array.'));\r\n                }\r\n                if (fields.length === 0) {\r\n                    return callback(new Error('Invalid argument. Fields collection cannot be empty.'));\r\n                }\r\n                let strFields = _.map(_.filter(fields, (x) => {\r\n                        return !x.oneToMany;\r\n                    }),\r\n                    (x) => {\r\n                        return MSSqlAdapter.format('[%f] %t', x);\r\n                    }).join(', ');\r\n                //add primary key constraint\r\n                const strPKFields = _.map(_.filter(fields, (x)=> { return (x.primary === true || x.primary === 1); }),\r\n                    (x)=> {\r\n                    return MSSqlAdapter.format('[%f]', x);\r\n                }).join(', ');\r\n                if (strPKFields.length>0) {\r\n                    strFields += ', ' + util.format('PRIMARY KEY (%s)', strPKFields);\r\n                }\r\n                const strTable = util.format('[%s].[%s]', owner, table);\r\n                const sql = util.format('CREATE TABLE %s (%s)', strTable, strFields);\r\n                self.execute(sql, null, function(err) {\r\n                    callback(err);\r\n                });\r\n            },\r\n            /**\r\n             * Alters the table by adding an array of fields\r\n             * @param {{name:string,type:string,primary:boolean|number,nullable:boolean|number,size:number,oneToMany:boolean}[]|*} fields\r\n             * @param callback\r\n             */\r\n            add:function(fields, callback) {\r\n                callback = callback || function() {};\r\n                callback = callback || function() {};\r\n                fields = fields || [];\r\n                if (!util.isArray(fields)) {\r\n                    //invalid argument exception\r\n                    return callback(new Error('Invalid argument type. Expected Array.'));\r\n                }\r\n                if (fields.length === 0) {\r\n                    //do nothing\r\n                    return callback();\r\n                }\r\n                const strTable = util.format('[%s].[%s]', owner, table);\r\n                //generate SQL statement\r\n                const sql = _.map(fields, (x) => {\r\n                    return MSSqlAdapter.format('ALTER TABLE ' + strTable + ' ADD [%f] %t', x);\r\n                }).join(';');\r\n                self.execute(sql, [], function(err) {\r\n                    callback(err);\r\n                });\r\n            },\r\n            /**\r\n             * Alters the table by modifying an array of fields\r\n             * @param {{name:string,type:string,primary:boolean|number,nullable:boolean|number,size:number,oneToMany:boolean}[]|*} fields\r\n             * @param callback\r\n             */\r\n            change:function(fields, callback) {\r\n                callback = callback || function() {};\r\n                callback = callback || function() {};\r\n                fields = fields || [];\r\n                if (!util.isArray(fields)) {\r\n                    //invalid argument exception\r\n                    return callback(new Error('Invalid argument type. Expected Array.'));\r\n                }\r\n                if (fields.length === 0) {\r\n                    //do nothing\r\n                    return callback();\r\n                }\r\n                const strTable = util.format('[%s].[%s]', owner, table);\r\n                //generate SQL statement\r\n                const sql = _.map(fields, (x) => {\r\n                    return MSSqlAdapter.format('ALTER TABLE ' + strTable + ' ALTER COLUMN [%f] %t', x);\r\n                }).join(';');\r\n                self.execute(sql, [], function(err) {\r\n                    callback(err);\r\n                });\r\n            }\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Initializes database view helper.\r\n     * @param {string} name - A string that represents the view name\r\n     * @returns {*}\r\n     */\r\n    view(name) {\r\n        const self = this;\r\n        let owner;\r\n        let view;\r\n        const matches = /(\\w+)\\.(\\w+)/.exec(name);\r\n        if (matches) {\r\n            //get schema owner\r\n            owner = matches[1];\r\n            //get table name\r\n            view = matches[2];\r\n        }\r\n        else {\r\n            //get view name\r\n            view = name;\r\n            //get default owner\r\n            owner = 'dbo';\r\n        }\r\n        return {\r\n            /**\r\n             * @param {Function} callback\r\n             */\r\n            exists:function(callback) {\r\n                callback = callback || function() {};\r\n                self.execute('SELECT COUNT(*) AS [count] FROM sysobjects WHERE [name]=? AND [type]=\\'V\\' AND SCHEMA_NAME([uid])=?',\r\n                    [ view, owner ], function(err, result) {\r\n                        if (err) { return callback(err); }\r\n                        callback(null, result[0].count);\r\n                    });\r\n            },\r\n            /**\r\n             * @param {Function} callback\r\n             */\r\n            drop:function(callback) {\r\n                callback = callback || function() {};\r\n                self.open(function(err) {\r\n                    if (err) { return callback(err); }\r\n                    self.execute('SELECT COUNT(*) AS [count] FROM sysobjects WHERE [name]=? AND [type]=\\'V\\' AND SCHEMA_NAME([uid])=?',\r\n                        [view, owner], function(err, result) {\r\n                        if (err) { return callback(err); }\r\n                        const exists = (result[0].count>0);\r\n                        if (exists) {\r\n                            const formatter = new MSSqlFormatter();\r\n                            const sql = util.format('DROP VIEW %s.%s',formatter.escapeName(owner), formatter.escapeName(view));\r\n                            self.execute(sql, [], function(err) {\r\n                                if (err) { callback(err); return; }\r\n                                callback();\r\n                            });\r\n                        }\r\n                        else {\r\n                            callback();\r\n                        }\r\n                    });\r\n                });\r\n            },\r\n            /**\r\n             * @param {QueryExpression|*} q\r\n             * @param {Function} callback\r\n             */\r\n            create:function(q, callback) {\r\n                const thisArg = this;\r\n                self.executeInTransaction(function(tr) {\r\n                    thisArg.drop(function(err) {\r\n                        if (err) { tr(err); return; }\r\n                        try {\r\n                            const formatter = new MSSqlFormatter();\r\n                            const sql = \"EXECUTE('\" + util.format('CREATE VIEW %s.%s AS ',formatter.escapeName(owner), formatter.escapeName(view)) + formatter.format(q) + \"')\";\r\n                            self.execute(sql, [], tr);\r\n                        }\r\n                        catch(e) {\r\n                            tr(e);\r\n                        }\r\n                    });\r\n                }, function(err) {\r\n                    callback(err);\r\n                });\r\n\r\n            }\r\n        };\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param  {DataModelMigration|*} obj - An Object that represents the data model scheme we want to migrate\r\n     * @param {Function} callback\r\n     */\r\n    migrate(obj, callback) {\r\n        if (_.isNil(obj))\r\n            return;\r\n        const self = this;\r\n        const migration = obj;\r\n        if (_.isNil(migration.appliesTo))\r\n            throw new Error(\"Invalid argument. Model name is undefined.\");\r\n        self.open(function(err) {\r\n            if (err) {\r\n                callback.bind(self)(err);\r\n            }\r\n            else {\r\n                async.waterfall([\r\n                    //1. Check migrations table existence\r\n                    function(cb) {\r\n                        self.table('migrations').exists(function(err, exists) {\r\n                            if (err) { return cb(err); }\r\n                            cb(null, exists);\r\n                        });\r\n                    },\r\n                    //2. Create migrations table if not exists\r\n                    function(arg, cb) {\r\n                        if (arg>0) { return cb(null, 0); }\r\n                        self.table('migrations').create([\r\n                            { name:'id', type:'Counter', primary:true, nullable:false  },\r\n                            { name:'appliesTo', type:'Text', size:'80', nullable:false  },\r\n                            { name:'model', type:'Text', size:'120', nullable:true  },\r\n                            { name:'description', type:'Text', size:'512', nullable:true  },\r\n                            { name:'version', type:'Text', size:'40', nullable:false  }\r\n                        ], function(err) {\r\n                            if (err) { return cb(err); }\r\n                            cb(null,0);\r\n                        });\r\n                    },\r\n                    //3. Check if migration has already been applied\r\n                    function(arg, cb) {\r\n                        self.execute('SELECT COUNT(*) AS [count] FROM [migrations] WHERE [appliesTo]=? and [version]=?',\r\n                            [migration.appliesTo, migration.version], function(err, result) {\r\n                                if (err) { return cb(err); }\r\n                                cb(null, result[0].count);\r\n                            });\r\n                    },\r\n                    //4a. Check table existence\r\n                    function(arg, cb) {\r\n                        //migration has already been applied (set migration.updated=true)\r\n                        if (arg>0) { obj['updated']=true; cb(null, -1); return; }\r\n                        self.table(migration.appliesTo).exists(function(err, exists) {\r\n                            if (err) { return cb(err); }\r\n                            cb(null, exists);\r\n                        });\r\n                    },\r\n                    //4b. Migrate target table (create or alter)\r\n                    function(arg, cb) {\r\n                        //migration has already been applied\r\n                        if (arg<0) { return cb(null, arg); }\r\n                        if (arg===0) {\r\n                            //create table\r\n                            return self.table(migration.appliesTo).create(migration.add, function(err) {\r\n                                if (err) { return cb(err); }\r\n                                cb(null, 1);\r\n                            });\r\n                        }\r\n                        //columns to be removed (unsupported)\r\n                        if (util.isArray(migration.remove)) {\r\n                            if (migration.remove.length>0) {\r\n                                return cb(new Error('Data migration remove operation is not supported by this adapter.'));\r\n                            }\r\n                        }\r\n                        //columns to be changed (unsupported)\r\n                        if (util.isArray(migration.change)) {\r\n                            if (migration.change.length>0) {\r\n                                return cb(new Error('Data migration change operation is not supported by this adapter. Use add collection instead.'));\r\n                            }\r\n                        }\r\n                        let column, newType, oldType;\r\n                        if (util.isArray(migration.add)) {\r\n                            //init change collection\r\n                            migration.change = [];\r\n                            //get table columns\r\n                            self.table(migration.appliesTo).columns(function(err, columns) {\r\n                                if (err) { return cb(err); }\r\n\r\n                                const findColumnFunc = (name) => {\r\n                                    return _.find(columns, (y)=> { return (y.name===name); });\r\n                                };\r\n\r\n                                for (let i = 0; i < migration.add.length; i++) {\r\n                                    const x = migration.add[i];\r\n                                    column = findColumnFunc(x.name);\r\n                                    if (column) {\r\n                                        //if column is primary key remove it from collection\r\n                                        if (column.primary) {\r\n                                            migration.add.splice(i, 1);\r\n                                            i-=1;\r\n                                        }\r\n                                        else {\r\n                                            //get new type\r\n                                            newType = MSSqlAdapter.format('%t', x);\r\n                                            //get old type\r\n                                            oldType = column.type1.replace(/\\s+$/,'') + ((column.nullable===true || column.nullable === 1) ? ' null' : ' not null');\r\n                                            //remove column from collection\r\n                                            migration.add.splice(i, 1);\r\n                                            i-=1;\r\n                                            if (newType !== oldType) {\r\n                                                //add column to alter collection\r\n                                                migration.change.push(x);\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                }\r\n                                //alter table\r\n                                const targetTable = self.table(migration.appliesTo);\r\n                                //add new columns (if any)\r\n                                targetTable.add(migration.add, function(err) {\r\n                                    if (err) { return cb(err); }\r\n                                    //modify columns (if any)\r\n                                    targetTable.change(migration.change, function(err) {\r\n                                        if (err) { return cb(err); }\r\n                                        cb(null, 1);\r\n                                    });\r\n                                });\r\n                            });\r\n                        }\r\n                        else {\r\n                            cb(new Error('Invalid migration data.'));\r\n                        }\r\n                    }, function(arg, cb) {\r\n                        if (arg>0) {\r\n                            self.execute('INSERT INTO migrations (appliesTo,model,version,description) VALUES (?,?,?,?)', [migration.appliesTo,\r\n                                migration.model,\r\n                                migration.version,\r\n                                migration.description ], function(err) {\r\n                                if (err) { return cb(err); }\r\n                                return cb(null, 1);\r\n                            });\r\n                        }\r\n                        else\r\n                            cb(null, arg);\r\n                    }\r\n                ], function(err, result) {\r\n                    callback(err, result);\r\n                });\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\n\r\nfunction zeroPad(number, length) {\r\n    number = number || 0;\r\n    let res = number.toString();\r\n    while (res.length < length) {\r\n        res = '0' + res;\r\n    }\r\n    return res;\r\n}\r\n\r\n/**\r\n * @class\r\n * @augments {SqlFormatter}\r\n */\r\nexport class MSSqlFormatter extends SqlFormatter {\r\n    /**\r\n     * @constructor\r\n     */\r\n    constructor() {\r\n        super();\r\n        this.settings = {\r\n            nameFormat:'[$1]'\r\n        };\r\n    }\r\n\r\n    formatLimitSelect(obj) {\r\n        let sql;\r\n        const self=this;\r\n        if (!obj.$take) {\r\n            sql=self.formatSelect(obj);\r\n        }\r\n        else {\r\n            obj.$take= parseInt(obj.$take) || 0;\r\n            obj.$skip= parseInt(obj.$skip) || 0;\r\n            //add row_number with order\r\n            const keys = Object.keys(obj.$select);\r\n            if (keys.length === 0)\r\n                throw new Error('Entity is missing');\r\n            const qfields = obj.$select[keys[0]], order =obj.$order;\r\n            qfields.push(util.format('ROW_NUMBER() OVER(%s) AS __RowIndex', order ? self.format(order, '%o') : 'ORDER BY (SELECT NULL)'));\r\n            if (order)\r\n                delete obj.$order;\r\n            const subQuery = self.formatSelect(obj);\r\n            if (order)\r\n                obj.$order = order;\r\n            //delete row index field\r\n            qfields.pop();\r\n            const fields = [];\r\n            _.forEach(qfields, (x) => {\r\n                if (typeof x === 'string') {\r\n                    fields.push(new QueryField(x));\r\n                }\r\n                else {\r\n                    const field = util._extend(new QueryField(), x);\r\n                    fields.push(field.as() || field.name());\r\n                }\r\n            });\r\n            sql = util.format('SELECT %s FROM (%s) t0 WHERE __RowIndex BETWEEN %s AND %s', _.map(fields, (x) => {\r\n                return self.format(x, '%f');\r\n            }).join(', '), subQuery, obj.$skip + 1, obj.$skip + obj.$take);\r\n        }\r\n        return sql;\r\n    }\r\n\r\n    /**\r\n     * Implements indexOf(str,substr) expression formatter.\r\n     * @param {String} p0 The source string\r\n     * @param {String} p1 The string to search for\r\n     */\r\n    $indexof(p0, p1) {\r\n        p1='%'+ p1+ '%';\r\n        return 'PATINDEX('.concat( this.escape(p1),',',this.escape(p0),')');\r\n    }\r\n\r\n    /**\r\n     * Implements simple regular expression formatter. Important Note: MS SQL Server does not provide a core sql function for regular expression matching.\r\n     * @param {string|*} p0 The source string or field\r\n     * @param {string|*} p1 The string to search for\r\n     */\r\n    $regex(p0, p1) {\r\n        let s1;\r\n        //implement starts with equivalent for PATINDEX T-SQL\r\n        if (/^\\^/.test(p1)) {\r\n            s1 = p1.replace(/^\\^/,'');\r\n        }\r\n        else {\r\n            s1 = '%' + p1;\r\n        }\r\n        //implement ends with equivalent for PATINDEX T-SQL\r\n        if (/\\$$/.test(s1)) {\r\n            s1 = s1.replace(/\\$$/,'');\r\n        }\r\n        else {\r\n            s1 = s1 + '%';\r\n        }\r\n        //use patindex for text searching\r\n        return util.format('PATINDEX(%s,%s) >= 1',this.escape(s1), this.escape(p0));\r\n    }\r\n\r\n    $date(p0) {\r\n        return util.format(' TODATETIMEOFFSET (%s,datepart(TZ,SYSDATETIMEOFFSET()))', this.escape(p0));\r\n    }\r\n\r\n    /**\r\n     * Escapes an object or a value and returns the equivalen sql value.\r\n     * @param {*} value\r\n     * @param {boolean=} unquoted\r\n     */\r\n    escape(value, unquoted) {\r\n        if (value===null || typeof value==='undefined')\r\n            return SqlUtils.escape(null);\r\n\r\n        if(typeof value==='string')\r\n            return '\\'' + value.replace(/'/g, \"''\") + '\\'';\r\n\r\n        if (typeof value==='boolean')\r\n            return value ? 1 : 0;\r\n        if (typeof value === 'object')\r\n        {\r\n            //add an exception for Date object\r\n            if (value instanceof Date)\r\n                return this.escapeDate(value);\r\n            if (value.hasOwnProperty('$name'))\r\n                return this.escapeName(value.$name);\r\n        }\r\n        if (unquoted)\r\n            return value.valueOf();\r\n        else\r\n            return SqlUtils.escape(value);\r\n    }\r\n\r\n    escapeName(name) {\r\n        if (typeof name === 'string') {\r\n            if (/^(\\w+)\\.(\\w+)$/g.test(name)) {\r\n                return name.replace(/(\\w+)/g, \"[$1]\");\r\n            }\r\n            return name.replace(/(\\w+)$|^(\\w+)$/g, \"[$1]\");\r\n        }\r\n        return name;\r\n    }\r\n\r\n    /**\r\n     * @param {Date|*} val\r\n     * @returns {string}\r\n     */\r\n    escapeDate(val) {\r\n        const year   = val.getFullYear();\r\n        const month  = zeroPad(val.getMonth() + 1, 2);\r\n        const day    = zeroPad(val.getDate(), 2);\r\n        const hour   = zeroPad(val.getHours(), 2);\r\n        const minute = zeroPad(val.getMinutes(), 2);\r\n        const second = zeroPad(val.getSeconds(), 2);\r\n        const millisecond = zeroPad(val.getMilliseconds(), 3);\r\n        //format timezone\r\n        const offset = val.getTimezoneOffset(), timezone = (offset<=0 ? '+' : '-') + zeroPad(-Math.floor(offset/60),2) + ':' + zeroPad(offset%60,2);\r\n        return \"CONVERT(datetimeoffset,'\" + year + '-' + month + '-' + day + ' ' + hour + ':' + minute + ':' + second + \".\" + millisecond + timezone + \"')\";\r\n    }\r\n\r\n    /**\r\n     * Implements startsWith(a,b) expression formatter.\r\n     * @param p0 {*}\r\n     * @param p1 {*}\r\n     */\r\n    $startswith(p0, p1) {\r\n        p1='%' +p1 + '%';\r\n        return util.format('PATINDEX (%s,%s)', this.escape(p1), this.escape(p0));\r\n    }\r\n\r\n    /**\r\n     * Implements contains(a,b) expression formatter.\r\n     * @param p0 {*}\r\n     * @param p1 {*}\r\n     */\r\n    $text(p0, p1) {\r\n        return util.format('PATINDEX (%s,%s)', this.escape('%' + p1 + '%'), this.escape(p0));\r\n    }\r\n\r\n    /**\r\n     * Implements endsWith(a,b) expression formatter.\r\n     * @param p0 {*}\r\n     * @param p1 {*}\r\n     */\r\n    $endswith(p0, p1) {\r\n        p1='%' +p1;\r\n        // (PATINDEX('%S%',  UserData.alternateName))\r\n        return util.format('(CASE WHEN %s LIKE %s THEN 1 ELSE 0 END)', this.escape(p0), this.escape(p1));\r\n    }\r\n\r\n    /**\r\n     * Implements substring(str,pos) expression formatter.\r\n     * @param {String} p0 The source string\r\n     * @param {Number} pos The starting position\r\n     * @param {Number=} length The length of the resulted string\r\n     * @returns {string}\r\n     */\r\n    $substring(p0, pos, length) {\r\n        if (length)\r\n            return util.format('SUBSTRING(%s,%s,%s)', this.escape(p0), pos.valueOf()+1, length.valueOf());\r\n        else\r\n            return util.format('SUBSTRING(%s,%s,%s)', this.escape(p0), pos.valueOf()+1,255);\r\n    }\r\n\r\n    /**\r\n     * Implements trim(a) expression formatter.\r\n     * @param p0 {*}\r\n     */\r\n    $trim(p0) {\r\n        return util.format('LTRIM(RTRIM((%s)))', this.escape(p0));\r\n    }\r\n}\r\n/**\r\n * Creates an instance of MSSqlAdapter object that represents a MsSql database connection.\r\n * @param {*} options An object that represents the properties of the underlying database connection.\r\n * @returns {DataAdapter}\r\n */\r\nexport function createInstance(options) {\r\n    return new MSSqlAdapter(options);\r\n}"]}