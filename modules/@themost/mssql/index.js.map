{"version":3,"sources":["index.es6"],"names":["createInstance","mssql","async","util","_","SqlFormatter","QueryExpression","QueryField","TraceUtils","SqlUtils","MSSqlAdapter","options","rawConnection","connectionPooling","self","Object","defineProperty","get","keys","map","x","concat","join","configurable","enumerable","query","values","format","callback","call","Connection","connect","err","log","close","fn","open","transaction","Transaction","begin","rollback","Error","commit","e","batch","entity","attribute","migration","appliesTo","model","version","description","add","name","type","primary","size","migrate","execute","result","length","q","create","select","max","value","parseInt","id","sql","formatter","MSSqlFormatter","startTime","process","env","NODE_ENV","Date","getTime","request","Request","preparedSql","prepare","$insert","JSON","stringify","message","bind","insertId","view","owner","table","matches","exec","exists","count","columns","fields","isArray","strFields","filter","oneToMany","strPKFields","strTable","change","drop","escapeName","thisArg","executeInTransaction","tr","obj","isNil","waterfall","cb","arg","nullable","remove","column","newType","oldType","findColumnFunc","find","y","i","splice","type1","replace","push","targetTable","test","formatType","field","scale","s","undefined","zeroPad","number","res","toString","settings","nameFormat","$take","formatSelect","$skip","$select","qfields","order","$order","subQuery","pop","forEach","_extend","as","p0","p1","escape","s1","unquoted","escapeDate","hasOwnProperty","$name","valueOf","val","year","getFullYear","month","getMonth","day","getDate","hour","getHours","minute","getMinutes","second","getSeconds","millisecond","getMilliseconds","offset","getTimezoneOffset","timezone","Math","floor","pos"],"mappings":"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","file":"index.js","sourcesContent":["/**\n * @license\n * MOST Web Framework 2.0 Codename Blueshift\n * Copyright (c) 2014, Kyriakos Barbounakis k.barbounakis@gmail.com\n *                     Anthi Oikonomou anthioikonomou@gmail.com\n *\n * Use of this source code is governed by an BSD-3-Clause license that can be\n * found in the LICENSE file at https://themost.io/license\n */\nimport mssql from 'mssql';\nimport async from 'async';\nimport util from 'util';\nimport _ from 'lodash';\nimport {SqlFormatter} from '@themost/query/formatter';\nimport {QueryExpression,QueryField} from \"@themost/query/query\";\nimport {TraceUtils} from '@themost/common/utils';\nimport {SqlUtils} from '@themost/query/utils';\n\n/**\n * @class\n * @augments DataAdapter\n */\nexport class MSSqlAdapter {\n    /**\n     * @constructor\n     * @param {*} options\n     */\n    constructor(options) {\n        /**\n         * @private\n         * @type {Connection}\n         */\n        this.rawConnection = null;\n        /**\n         * Gets or sets database connection string\n         * @type {*}\n         */\n        this.options = options;\n        /**\n         * Gets or sets a boolean that indicates whether connection pooling is enabled or not.\n         * @type {boolean}\n         */\n        this.connectionPooling = false;\n\n        const self = this;\n        /**\n         * Gets connection string from options.\n         * @type {string}\n         */\n        Object.defineProperty(this, 'connectionString', {\n            get: function() {\n                const keys = Object.keys(self.options);\n                return keys.map(function(x) {\n                    return x.concat('=',self.options[x]);\n                }).join(';');\n            }, configurable:false, enumerable:false\n        });\n    }\n\n    prepare(query, values) {\n        return SqlUtils.format(query,values);\n    }\n\n    /**\n     * Opens database connection\n     */\n    open(callback) {\n        callback = callback || function() {};\n        const self = this;\n        if (this.rawConnection) {\n            callback.call(self);\n            return;\n        }\n\n        self.rawConnection = new mssql.Connection(self.options);\n        self.rawConnection.connect(function(err) {\n            if (err) {\n                self.rawConnection=null;\n                TraceUtils.log(err);\n            }\n            callback.call(self, err);\n        });\n\n    }\n\n    close() {\n        const self = this;\n        if (!self.rawConnection)\n            return;\n\n        self.rawConnection.close(function (err) {\n            if (err) {\n                TraceUtils.log(err);\n                //do nothing\n                self.rawConnection = null;\n            }\n        });\n    }\n\n    /**\n     * Begins a data transaction and executes the given function\n     * @param fn {Function}\n     * @param callback {Function}\n     */\n    executeInTransaction(fn, callback) {\n        const self = this;\n        //ensure callback\n        callback = callback || function () {\n        };\n\n        //ensure that database connection is open\n        self.open(function (err) {\n            if (err) {\n                callback.call(self, err);\n                return;\n            }\n            //check if transaction is already defined (as object)\n            if (self.transaction) {\n                //so invoke method\n                fn.call(self, function (err) {\n                    //call callback\n                    callback.call(self, err);\n                });\n            }\n            else {\n                //create transaction\n                self.transaction = new mssql.Transaction(self.rawConnection);\n                //begin transaction\n                self.transaction.begin(function(err) {\n                    //error check (?)\n                    if (err) {\n                        TraceUtils.log(err);\n                        callback.call(self, err);\n                    }\n                    else {\n                        try {\n                            fn.call(self, function (err) {\n                                try {\n                                    if (err) {\n                                        if (self.transaction) {\n                                            self.transaction.rollback();\n                                            self.transaction=null;\n                                        }\n                                        callback.call(self, err);\n                                    }\n                                    else {\n                                        if (typeof self.transaction === 'undefined' || self.transaction === null) {\n                                            callback.call(self, new Error('Database transaction cannot be empty on commit.'));\n                                            return;\n                                        }\n                                        self.transaction.commit(function (err) {\n                                            if (err) {\n                                                self.transaction.rollback();\n                                            }\n                                            self.transaction = null;\n                                            callback.call(self, err);\n                                        });\n                                    }\n                                }\n                                catch (e) {\n                                    callback.call(self, e);\n                                }\n                            });\n                        }\n                        catch (e) {\n                            callback.call(self, e);\n                        }\n\n                    }\n                });\n\n               /* self.transaction.on('begin', function() {\n                    TraceUtils.log('begin transaction');\n                });*/\n\n\n\n            }\n        });\n    }\n\n    /**\n     * Executes an operation against database and returns the results.\n     * @param {*} batch\n     * @param {Function} callback\n     * @deprecated DataAdapter.executeBatch() is obsolete. Use DataAdapter.executeInTransaction() instead.\n     */\n    executeBatch(batch, callback) {\n        callback = callback || function() {};\n        return callback(new Error('DataAdapter.executeBatch() is obsolete. Use DataAdapter.executeInTransaction() instead.'));\n    }\n\n    /**\n     * Produces a new identity value for the given entity and attribute.\n     * @param entity {String} The target entity name\n     * @param attribute {String} The target attribute\n     * @param callback {Function=}\n     */\n    selectIdentity(entity, attribute, callback) {\n\n        const self = this;\n\n        const migration = {\n            appliesTo:'increment_id',\n            model:'increments',\n            version:'1.0',\n            description:'Increments migration (version 1.0)',\n            add:[\n                { name:'id', type:'Counter', primary:true },\n                { name:'entity', type:'Text', size:120 },\n                { name:'attribute', type:'Text', size:120 },\n                { name:'value', type:'Integer' }\n            ]\n        };\n        //ensure increments entity\n        self.migrate(migration, function(err)\n        {\n            //throw error if any\n            if (err) { callback.call(self,err); return; }\n\n            self.execute('SELECT * FROM increment_id WHERE entity=? AND attribute=?', [entity, attribute], function(err, result) {\n                if (err) { callback.call(self,err); return; }\n                if (result.length===0) {\n                    //get max value by querying the given entity\n                    const q = QueryExpression.create(entity).select(QueryField.create().max(attribute));\n                    self.execute(q,null, function(err, result) {\n                        if (err) { callback.call(self, err); return; }\n                        let value = 1;\n                        if (result.length>0) {\n                            value = parseInt(result[0][attribute]) + 1;\n                        }\n                        self.execute('INSERT INTO increment_id(entity, attribute, value) VALUES (?,?,?)',[entity, attribute, value], function(err) {\n                            //throw error if any\n                            if (err) { callback.call(self, err); return; }\n                            //return new increment value\n                            callback.call(self, err, value);\n                        });\n                    });\n                }\n                else {\n                    //get new increment value\n                    const value = parseInt(result[0].value) + 1;\n                    self.execute('UPDATE increment_id SET value=? WHERE id=?',[value, result[0].id], function(err) {\n                        //throw error if any\n                        if (err) { callback.call(self, err); return; }\n                        //return new increment value\n                        callback.call(self, err, value);\n                    });\n                }\n            });\n        });\n    }\n\n    /**\n     * @param query {*}\n     * @param values {*}\n     * @param {function} callback\n     */\n    execute(query, values, callback) {\n        const self = this;\n        let sql = null;\n        try {\n\n            if (typeof query === 'string') {\n                //get raw sql statement\n                sql = query;\n            }\n            else {\n                //format query expression or any object that may be act as query expression\n                const formatter = new MSSqlFormatter();\n                sql = formatter.format(query);\n            }\n            //validate sql statement\n            if (typeof sql !== 'string') {\n                callback.call(self, new Error('The executing command is of the wrong type or empty.'));\n                return;\n            }\n            //ensure connection\n            self.open(function(err) {\n                if (err) {\n                    callback.call(self, err);\n                }\n                else {\n                    //log statement (optional)\n                    let startTime;\n                    if (process.env.NODE_ENV==='development') {\n                        startTime = new Date().getTime();\n                    }\n                    //execute raw command\n                    const request = self.transaction ? new mssql.Request(self.transaction) : new mssql.Request(self.rawConnection);\n                    let preparedSql=self.prepare(sql , values);\n                     if(typeof query.$insert!=='undefined')\n                         preparedSql+= ';SELECT @@IDENTITY as insertId';\n                    request.query(preparedSql, function(err, result) {\n                        if (process.env.NODE_ENV==='development') {\n                            TraceUtils.log(util.format('SQL (Execution Time:%sms):%s, Parameters:%s', (new Date()).getTime()-startTime, sql, JSON.stringify(values)));\n                        }\n                        if (err) {\n                            TraceUtils.log(util.format('SQL (Execution Error):%s, %s',err.message, preparedSql));\n                        }\n                        if(typeof query.$insert==='undefined')\n                            callback.bind(self)(err, result);\n                        else {\n                            if (result) {\n                                if(result.length>0)\n                                    callback.bind(self)(err, { insertId:result[0].insertId });\n                                else\n                                    callback.bind(self)(err, result);\n                            }\n                            else {\n                                callback.bind(self)(err, result);\n                            }\n                        }\n                    });\n                }\n            });\n        }\n        catch (err) {\n            callback.bind(self)(err);\n        }\n    }\n\n    /**\n     * Formats an object based on the format string provided. Valid formats are:\n     * %t : Formats a field and returns field type definition\n     * %f : Formats a field and returns field name\n     * @param format {string}\n     * @param obj {*}\n     */\n    static format(format, obj) {\n        let result = format;\n        if (/%t/.test(format))\n            result = result.replace(/%t/g,MSSqlAdapter.formatType(obj));\n        if (/%f/.test(format))\n            result = result.replace(/%f/g,obj.name);\n        return result;\n    }\n\n    static formatType(field) {\n        const size = parseInt(field.size);\n        const scale = parseInt(field.scale);\n        let s = 'varchar(512) NULL';\n        const type=field.type;\n        switch (type)\n        {\n            case 'Boolean':\n                s = 'bit';\n                break;\n            case 'Byte':\n                s = 'tinyint';\n                break;\n            case 'Number':\n            case 'Float':\n                s = 'float';\n                break;\n            case 'Counter':\n                return 'int IDENTITY (1,1) NOT NULL';\n            case 'Currency':\n                s = size>0 ? (size<=10 ? 'smallmoney' : 'money') : 'money';\n                break;\n            case 'Decimal':\n                s =  util.format('decimal(%s,%s)', (size>0 ? size : 19), (scale>0 ? scale : 4));\n                break;\n            case 'Date':\n                s = 'date';\n                break;\n            case 'DateTime':\n                s = 'datetimeoffset';\n                break;\n            case 'Time':\n                s = 'time';\n                break;\n            case 'Integer':\n                s = 'int';\n                break;\n            case 'Duration':\n                s = size>0 ? util.format('varchar(%s)', size): 'varchar(48)';\n                break;\n            case 'URL':\n                if (size>0)\n                    s =  util.format('varchar(%s)', size);\n                else\n                    s =  'varchar(512)';\n                break;\n            case 'Text':\n                if (size>0)\n                    s =  util.format('varchar(%s)', size);\n                else\n                    s =  'varchar(512)';\n                break;\n            case 'Note':\n                if (size>0)\n                    s =  util.format('varchar(%s)', size);\n                else\n                    s =  'text';\n                break;\n            case 'Image':\n            case 'Binary':\n                s ='binary';\n                break;\n            case 'Guid':\n                s = 'varchar(36)';\n                break;\n            case 'Short':\n                s = 'smallint';\n                break;\n            default:\n                s = 'int';\n                break;\n        }\n        s += field.nullable===undefined ? ' null': field.nullable ? ' null': ' not null';\n        return s;\n    }\n\n    /**\n     * @param {string} name\n     * @param {QueryExpression} query\n     * @param {Function} callback\n     */\n    createView(name, query, callback) {\n        return this.view(name).create(query, callback);\n    }\n\n    /**\n     * Initializes database table helper.\n     * @param {string} name - The table name\n     * @returns {{exists: Function, version: Function, columns: Function, create: Function, add: Function, change: Function}}\n     */\n    table(name) {\n        const self = this;\n        let owner;\n        let table;\n        const matches = /(\\w+)\\.(\\w+)/.exec(name);\n        if (matches) {\n            //get schema owner\n            owner = matches[1];\n            //get table name\n            table = matches[2];\n        }\n        else {\n            //get view name\n            table = name;\n            //get default owner\n            owner = 'dbo';\n        }\n        return {\n            /**\n             * @param {Function} callback\n             */\n            exists:function(callback) {\n                callback = callback || function() {};\n                self.execute('SELECT COUNT(*) AS [count] FROM sysobjects WHERE [name]=? AND [type]=\\'U\\' AND SCHEMA_NAME([uid])=?',\n                    [ table, owner ], function(err, result) {\n                        if (err) { return callback(err); }\n                        callback(null, result[0].count);\n                    });\n            },\n            /**\n             * @param {function(Error,string=)} callback\n             */\n            version:function(callback) {\n                callback = callback || function() {};\n                self.execute('SELECT MAX([version]) AS [version] FROM [migrations] WHERE [appliesTo]=?',\n                    [table], function(err, result) {\n                        if (err) { return callback(err); }\n                        if (result.length===0)\n                            callback(null, '0.0');\n                        else\n                            callback(null, result[0].version || '0.0');\n                    });\n            },\n            /**\n             * @param {function(Error=,Array=)} callback\n             */\n            columns:function(callback) {\n                callback = callback || function() {};\n                self.execute(\"SELECT c0.[name] AS [name], c0.[isnullable] AS [nullable], c0.[length] AS [size], c0.[prec] AS [precision], \" +\n                    \"c0.[scale] AS [scale], t0.[name] AS type, t0.[name] + CASE WHEN t0.[variable]=0 THEN '' ELSE '(' + CONVERT(varchar,c0.[length]) + ')' END AS [type1], \" +\n                    \"CASE WHEN p0.[indid]>0 THEN 1 ELSE 0 END [primary] FROM syscolumns c0  INNER JOIN systypes t0 ON c0.[xusertype] = t0.[xusertype] \" +\n                    \"INNER JOIN  sysobjects s0 ON c0.[id]=s0.[id]  LEFT JOIN (SELECT k0.* FROM sysindexkeys k0 INNER JOIN (SELECT i0.* FROM sysindexes i0 \" +\n                    \"INNER JOIN sysobjects s0 ON i0.[id]=s0.[id]  WHERE i0.[status]=2066) x0  ON k0.[id]=x0.[id] AND k0.[indid]=x0.[indid] ) p0 ON c0.[id]=p0.[id] \" +\n                    \"AND c0.[colid]=p0.[colid]  WHERE s0.[name]=? AND s0.[xtype]='U' AND SCHEMA_NAME(s0.[uid])=?\",\n                    [ table, owner ], function(err, result) {\n                        if (err) { return callback(err); }\n                        callback(null, result);\n                    });\n            },\n            /**\n             * @param {{name:string,type:string,primary:boolean|number,nullable:boolean|number,size:number, scale:number,precision:number,oneToMany:boolean}[]|*} fields\n             * @param callback\n             */\n            create: function(fields, callback) {\n                callback = callback || function() {};\n                fields = fields || [];\n                if (!util.isArray(fields)) {\n                    return callback(new Error('Invalid argument type. Expected Array.'));\n                }\n                if (fields.length === 0) {\n                    return callback(new Error('Invalid argument. Fields collection cannot be empty.'));\n                }\n                let strFields = _.map(_.filter(fields, (x) => {\n                        return !x.oneToMany;\n                    }),\n                    (x) => {\n                        return MSSqlAdapter.format('[%f] %t', x);\n                    }).join(', ');\n                //add primary key constraint\n                const strPKFields = _.map(_.filter(fields, (x)=> { return (x.primary === true || x.primary === 1); }),\n                    (x)=> {\n                    return MSSqlAdapter.format('[%f]', x);\n                }).join(', ');\n                if (strPKFields.length>0) {\n                    strFields += ', ' + util.format('PRIMARY KEY (%s)', strPKFields);\n                }\n                const strTable = util.format('[%s].[%s]', owner, table);\n                const sql = util.format('CREATE TABLE %s (%s)', strTable, strFields);\n                self.execute(sql, null, function(err) {\n                    callback(err);\n                });\n            },\n            /**\n             * Alters the table by adding an array of fields\n             * @param {{name:string,type:string,primary:boolean|number,nullable:boolean|number,size:number,oneToMany:boolean}[]|*} fields\n             * @param callback\n             */\n            add:function(fields, callback) {\n                callback = callback || function() {};\n                callback = callback || function() {};\n                fields = fields || [];\n                if (!util.isArray(fields)) {\n                    //invalid argument exception\n                    return callback(new Error('Invalid argument type. Expected Array.'));\n                }\n                if (fields.length === 0) {\n                    //do nothing\n                    return callback();\n                }\n                const strTable = util.format('[%s].[%s]', owner, table);\n                //generate SQL statement\n                const sql = _.map(fields, (x) => {\n                    return MSSqlAdapter.format('ALTER TABLE ' + strTable + ' ADD [%f] %t', x);\n                }).join(';');\n                self.execute(sql, [], function(err) {\n                    callback(err);\n                });\n            },\n            /**\n             * Alters the table by modifying an array of fields\n             * @param {{name:string,type:string,primary:boolean|number,nullable:boolean|number,size:number,oneToMany:boolean}[]|*} fields\n             * @param callback\n             */\n            change:function(fields, callback) {\n                callback = callback || function() {};\n                callback = callback || function() {};\n                fields = fields || [];\n                if (!util.isArray(fields)) {\n                    //invalid argument exception\n                    return callback(new Error('Invalid argument type. Expected Array.'));\n                }\n                if (fields.length === 0) {\n                    //do nothing\n                    return callback();\n                }\n                const strTable = util.format('[%s].[%s]', owner, table);\n                //generate SQL statement\n                const sql = _.map(fields, (x) => {\n                    return MSSqlAdapter.format('ALTER TABLE ' + strTable + ' ALTER COLUMN [%f] %t', x);\n                }).join(';');\n                self.execute(sql, [], function(err) {\n                    callback(err);\n                });\n            }\n        };\n    }\n\n    /**\n     * Initializes database view helper.\n     * @param {string} name - A string that represents the view name\n     * @returns {*}\n     */\n    view(name) {\n        const self = this;\n        let owner;\n        let view;\n        const matches = /(\\w+)\\.(\\w+)/.exec(name);\n        if (matches) {\n            //get schema owner\n            owner = matches[1];\n            //get table name\n            view = matches[2];\n        }\n        else {\n            //get view name\n            view = name;\n            //get default owner\n            owner = 'dbo';\n        }\n        return {\n            /**\n             * @param {Function} callback\n             */\n            exists:function(callback) {\n                callback = callback || function() {};\n                self.execute('SELECT COUNT(*) AS [count] FROM sysobjects WHERE [name]=? AND [type]=\\'V\\' AND SCHEMA_NAME([uid])=?',\n                    [ view, owner ], function(err, result) {\n                        if (err) { return callback(err); }\n                        callback(null, result[0].count);\n                    });\n            },\n            /**\n             * @param {Function} callback\n             */\n            drop:function(callback) {\n                callback = callback || function() {};\n                self.open(function(err) {\n                    if (err) { return callback(err); }\n                    self.execute('SELECT COUNT(*) AS [count] FROM sysobjects WHERE [name]=? AND [type]=\\'V\\' AND SCHEMA_NAME([uid])=?',\n                        [view, owner], function(err, result) {\n                        if (err) { return callback(err); }\n                        const exists = (result[0].count>0);\n                        if (exists) {\n                            const formatter = new MSSqlFormatter();\n                            const sql = util.format('DROP VIEW %s.%s',formatter.escapeName(owner), formatter.escapeName(view));\n                            self.execute(sql, [], function(err) {\n                                if (err) { callback(err); return; }\n                                callback();\n                            });\n                        }\n                        else {\n                            callback();\n                        }\n                    });\n                });\n            },\n            /**\n             * @param {QueryExpression|*} q\n             * @param {Function} callback\n             */\n            create:function(q, callback) {\n                const thisArg = this;\n                self.executeInTransaction(function(tr) {\n                    thisArg.drop(function(err) {\n                        if (err) { tr(err); return; }\n                        try {\n                            const formatter = new MSSqlFormatter();\n                            const sql = \"EXECUTE('\" + util.format('CREATE VIEW %s.%s AS ',formatter.escapeName(owner), formatter.escapeName(view)) + formatter.format(q) + \"')\";\n                            self.execute(sql, [], tr);\n                        }\n                        catch(e) {\n                            tr(e);\n                        }\n                    });\n                }, function(err) {\n                    callback(err);\n                });\n\n            }\n        };\n    }\n\n    /**\n     *\n     * @param  {DataModelMigration|*} obj - An Object that represents the data model scheme we want to migrate\n     * @param {Function} callback\n     */\n    migrate(obj, callback) {\n        if (_.isNil(obj))\n            return;\n        const self = this;\n        const migration = obj;\n        if (_.isNil(migration.appliesTo))\n            throw new Error(\"Invalid argument. Model name is undefined.\");\n        self.open(function(err) {\n            if (err) {\n                callback.bind(self)(err);\n            }\n            else {\n                async.waterfall([\n                    //1. Check migrations table existence\n                    function(cb) {\n                        self.table('migrations').exists(function(err, exists) {\n                            if (err) { return cb(err); }\n                            cb(null, exists);\n                        });\n                    },\n                    //2. Create migrations table if not exists\n                    function(arg, cb) {\n                        if (arg>0) { return cb(null, 0); }\n                        self.table('migrations').create([\n                            { name:'id', type:'Counter', primary:true, nullable:false  },\n                            { name:'appliesTo', type:'Text', size:'80', nullable:false  },\n                            { name:'model', type:'Text', size:'120', nullable:true  },\n                            { name:'description', type:'Text', size:'512', nullable:true  },\n                            { name:'version', type:'Text', size:'40', nullable:false  }\n                        ], function(err) {\n                            if (err) { return cb(err); }\n                            cb(null,0);\n                        });\n                    },\n                    //3. Check if migration has already been applied\n                    function(arg, cb) {\n                        self.execute('SELECT COUNT(*) AS [count] FROM [migrations] WHERE [appliesTo]=? and [version]=?',\n                            [migration.appliesTo, migration.version], function(err, result) {\n                                if (err) { return cb(err); }\n                                cb(null, result[0].count);\n                            });\n                    },\n                    //4a. Check table existence\n                    function(arg, cb) {\n                        //migration has already been applied (set migration.updated=true)\n                        if (arg>0) { obj['updated']=true; cb(null, -1); return; }\n                        self.table(migration.appliesTo).exists(function(err, exists) {\n                            if (err) { return cb(err); }\n                            cb(null, exists);\n                        });\n                    },\n                    //4b. Migrate target table (create or alter)\n                    function(arg, cb) {\n                        //migration has already been applied\n                        if (arg<0) { return cb(null, arg); }\n                        if (arg===0) {\n                            //create table\n                            return self.table(migration.appliesTo).create(migration.add, function(err) {\n                                if (err) { return cb(err); }\n                                cb(null, 1);\n                            });\n                        }\n                        //columns to be removed (unsupported)\n                        if (util.isArray(migration.remove)) {\n                            if (migration.remove.length>0) {\n                                return cb(new Error('Data migration remove operation is not supported by this adapter.'));\n                            }\n                        }\n                        //columns to be changed (unsupported)\n                        if (util.isArray(migration.change)) {\n                            if (migration.change.length>0) {\n                                return cb(new Error('Data migration change operation is not supported by this adapter. Use add collection instead.'));\n                            }\n                        }\n                        let column, newType, oldType;\n                        if (util.isArray(migration.add)) {\n                            //init change collection\n                            migration.change = [];\n                            //get table columns\n                            self.table(migration.appliesTo).columns(function(err, columns) {\n                                if (err) { return cb(err); }\n\n                                const findColumnFunc = (name) => {\n                                    return _.find(columns, (y)=> { return (y.name===name); });\n                                };\n\n                                for (let i = 0; i < migration.add.length; i++) {\n                                    const x = migration.add[i];\n                                    column = findColumnFunc(x.name);\n                                    if (column) {\n                                        //if column is primary key remove it from collection\n                                        if (column.primary) {\n                                            migration.add.splice(i, 1);\n                                            i-=1;\n                                        }\n                                        else {\n                                            //get new type\n                                            newType = MSSqlAdapter.format('%t', x);\n                                            //get old type\n                                            oldType = column.type1.replace(/\\s+$/,'') + ((column.nullable===true || column.nullable === 1) ? ' null' : ' not null');\n                                            //remove column from collection\n                                            migration.add.splice(i, 1);\n                                            i-=1;\n                                            if (newType !== oldType) {\n                                                //add column to alter collection\n                                                migration.change.push(x);\n                                            }\n                                        }\n                                    }\n                                }\n                                //alter table\n                                const targetTable = self.table(migration.appliesTo);\n                                //add new columns (if any)\n                                targetTable.add(migration.add, function(err) {\n                                    if (err) { return cb(err); }\n                                    //modify columns (if any)\n                                    targetTable.change(migration.change, function(err) {\n                                        if (err) { return cb(err); }\n                                        cb(null, 1);\n                                    });\n                                });\n                            });\n                        }\n                        else {\n                            cb(new Error('Invalid migration data.'));\n                        }\n                    }, function(arg, cb) {\n                        if (arg>0) {\n                            self.execute('INSERT INTO migrations (appliesTo,model,version,description) VALUES (?,?,?,?)', [migration.appliesTo,\n                                migration.model,\n                                migration.version,\n                                migration.description ], function(err) {\n                                if (err) { return cb(err); }\n                                return cb(null, 1);\n                            });\n                        }\n                        else\n                            cb(null, arg);\n                    }\n                ], function(err, result) {\n                    callback(err, result);\n                });\n            }\n        });\n    }\n}\n\n\nfunction zeroPad(number, length) {\n    number = number || 0;\n    let res = number.toString();\n    while (res.length < length) {\n        res = '0' + res;\n    }\n    return res;\n}\n\n/**\n * @class\n * @augments {SqlFormatter}\n */\nexport class MSSqlFormatter extends SqlFormatter {\n    /**\n     * @constructor\n     */\n    constructor() {\n        super();\n        this.settings = {\n            nameFormat:'[$1]'\n        };\n    }\n\n    formatLimitSelect(obj) {\n        let sql;\n        const self=this;\n        if (!obj.$take) {\n            sql=self.formatSelect(obj);\n        }\n        else {\n            obj.$take= parseInt(obj.$take) || 0;\n            obj.$skip= parseInt(obj.$skip) || 0;\n            //add row_number with order\n            const keys = Object.keys(obj.$select);\n            if (keys.length === 0)\n                throw new Error('Entity is missing');\n            const qfields = obj.$select[keys[0]], order =obj.$order;\n            qfields.push(util.format('ROW_NUMBER() OVER(%s) AS __RowIndex', order ? self.format(order, '%o') : 'ORDER BY (SELECT NULL)'));\n            if (order)\n                delete obj.$order;\n            const subQuery = self.formatSelect(obj);\n            if (order)\n                obj.$order = order;\n            //delete row index field\n            qfields.pop();\n            const fields = [];\n            _.forEach(qfields, (x) => {\n                if (typeof x === 'string') {\n                    fields.push(new QueryField(x));\n                }\n                else {\n                    const field = util._extend(new QueryField(), x);\n                    fields.push(field.as() || field.name());\n                }\n            });\n            sql = util.format('SELECT %s FROM (%s) t0 WHERE __RowIndex BETWEEN %s AND %s', _.map(fields, (x) => {\n                return self.format(x, '%f');\n            }).join(', '), subQuery, obj.$skip + 1, obj.$skip + obj.$take);\n        }\n        return sql;\n    }\n\n    /**\n     * Implements indexOf(str,substr) expression formatter.\n     * @param {String} p0 The source string\n     * @param {String} p1 The string to search for\n     */\n    $indexof(p0, p1) {\n        p1='%'+ p1+ '%';\n        return 'PATINDEX('.concat( this.escape(p1),',',this.escape(p0),')');\n    }\n\n    /**\n     * Implements simple regular expression formatter. Important Note: MS SQL Server does not provide a core sql function for regular expression matching.\n     * @param {string|*} p0 The source string or field\n     * @param {string|*} p1 The string to search for\n     */\n    $regex(p0, p1) {\n        let s1;\n        //implement starts with equivalent for PATINDEX T-SQL\n        if (/^\\^/.test(p1)) {\n            s1 = p1.replace(/^\\^/,'');\n        }\n        else {\n            s1 = '%' + p1;\n        }\n        //implement ends with equivalent for PATINDEX T-SQL\n        if (/\\$$/.test(s1)) {\n            s1 = s1.replace(/\\$$/,'');\n        }\n        else {\n            s1 = s1 + '%';\n        }\n        //use patindex for text searching\n        return util.format('PATINDEX(%s,%s) >= 1',this.escape(s1), this.escape(p0));\n    }\n\n    $date(p0) {\n        return util.format(' TODATETIMEOFFSET (%s,datepart(TZ,SYSDATETIMEOFFSET()))', this.escape(p0));\n    }\n\n    /**\n     * Escapes an object or a value and returns the equivalen sql value.\n     * @param {*} value\n     * @param {boolean=} unquoted\n     */\n    escape(value, unquoted) {\n        if (value===null || typeof value==='undefined')\n            return SqlUtils.escape(null);\n\n        if(typeof value==='string')\n            return '\\'' + value.replace(/'/g, \"''\") + '\\'';\n\n        if (typeof value==='boolean')\n            return value ? 1 : 0;\n        if (typeof value === 'object')\n        {\n            //add an exception for Date object\n            if (value instanceof Date)\n                return this.escapeDate(value);\n            if (value.hasOwnProperty('$name'))\n                return this.escapeName(value.$name);\n        }\n        if (unquoted)\n            return value.valueOf();\n        else\n            return SqlUtils.escape(value);\n    }\n\n    escapeName(name) {\n        if (typeof name === 'string') {\n            if (/^(\\w+)\\.(\\w+)$/g.test(name)) {\n                return name.replace(/(\\w+)/g, \"[$1]\");\n            }\n            return name.replace(/(\\w+)$|^(\\w+)$/g, \"[$1]\");\n        }\n        return name;\n    }\n\n    /**\n     * @param {Date|*} val\n     * @returns {string}\n     */\n    escapeDate(val) {\n        const year   = val.getFullYear();\n        const month  = zeroPad(val.getMonth() + 1, 2);\n        const day    = zeroPad(val.getDate(), 2);\n        const hour   = zeroPad(val.getHours(), 2);\n        const minute = zeroPad(val.getMinutes(), 2);\n        const second = zeroPad(val.getSeconds(), 2);\n        const millisecond = zeroPad(val.getMilliseconds(), 3);\n        //format timezone\n        const offset = val.getTimezoneOffset(), timezone = (offset<=0 ? '+' : '-') + zeroPad(-Math.floor(offset/60),2) + ':' + zeroPad(offset%60,2);\n        return \"CONVERT(datetimeoffset,'\" + year + '-' + month + '-' + day + ' ' + hour + ':' + minute + ':' + second + \".\" + millisecond + timezone + \"')\";\n    }\n\n    /**\n     * Implements startsWith(a,b) expression formatter.\n     * @param p0 {*}\n     * @param p1 {*}\n     */\n    $startswith(p0, p1) {\n        p1='%' +p1 + '%';\n        return util.format('PATINDEX (%s,%s)', this.escape(p1), this.escape(p0));\n    }\n\n    /**\n     * Implements contains(a,b) expression formatter.\n     * @param p0 {*}\n     * @param p1 {*}\n     */\n    $text(p0, p1) {\n        return util.format('PATINDEX (%s,%s)', this.escape('%' + p1 + '%'), this.escape(p0));\n    }\n\n    /**\n     * Implements endsWith(a,b) expression formatter.\n     * @param p0 {*}\n     * @param p1 {*}\n     */\n    $endswith(p0, p1) {\n        p1='%' +p1;\n        // (PATINDEX('%S%',  UserData.alternateName))\n        return util.format('(CASE WHEN %s LIKE %s THEN 1 ELSE 0 END)', this.escape(p0), this.escape(p1));\n    }\n\n    /**\n     * Implements substring(str,pos) expression formatter.\n     * @param {String} p0 The source string\n     * @param {Number} pos The starting position\n     * @param {Number=} length The length of the resulted string\n     * @returns {string}\n     */\n    $substring(p0, pos, length) {\n        if (length)\n            return util.format('SUBSTRING(%s,%s,%s)', this.escape(p0), pos.valueOf()+1, length.valueOf());\n        else\n            return util.format('SUBSTRING(%s,%s,%s)', this.escape(p0), pos.valueOf()+1,255);\n    }\n\n    /**\n     * Implements trim(a) expression formatter.\n     * @param p0 {*}\n     */\n    $trim(p0) {\n        return util.format('LTRIM(RTRIM((%s)))', this.escape(p0));\n    }\n}\n/**\n * Creates an instance of MSSqlAdapter object that represents a MsSql database connection.\n * @param {*} options An object that represents the properties of the underlying database connection.\n * @returns {DataAdapter}\n */\nexport function createInstance(options) {\n    return new MSSqlAdapter(options);\n}"]}